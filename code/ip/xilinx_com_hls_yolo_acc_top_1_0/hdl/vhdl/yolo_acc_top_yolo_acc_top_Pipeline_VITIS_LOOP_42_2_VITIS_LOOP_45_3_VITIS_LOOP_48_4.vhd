-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yolo_acc_top_yolo_acc_top_Pipeline_VITIS_LOOP_42_2_VITIS_LOOP_45_3_VITIS_LOOP_48_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    outStream_TREADY : IN STD_LOGIC;
    sub_i_i : IN STD_LOGIC_VECTOR (9 downto 0);
    sub_i_i55 : IN STD_LOGIC_VECTOR (9 downto 0);
    bound4 : IN STD_LOGIC_VECTOR (21 downto 0);
    bound : IN STD_LOGIC_VECTOR (12 downto 0);
    cmp_i_i32_mid111 : IN STD_LOGIC_VECTOR (0 downto 0);
    fold_input_ch : IN STD_LOGIC_VECTOR (3 downto 0);
    icmp_ln1027 : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_a_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    inStream_a_TVALID : IN STD_LOGIC;
    inStream_a_TREADY : OUT STD_LOGIC;
    inStream_a_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_a_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_a_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_a_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_a_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    inStream_a_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    inStream_b_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    inStream_b_TVALID : IN STD_LOGIC;
    inStream_b_TREADY : OUT STD_LOGIC;
    inStream_b_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_b_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_b_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_b_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_b_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    inStream_b_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    kernel_bias_fp_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    kernel_bias_fp_V_ce0 : OUT STD_LOGIC;
    kernel_bias_fp_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_bias_fp_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    kernel_bias_fp_V_ce1 : OUT STD_LOGIC;
    kernel_bias_fp_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_en : IN STD_LOGIC_VECTOR (0 downto 0);
    leaky : IN STD_LOGIC_VECTOR (0 downto 0);
    outStream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    outStream_TVALID : OUT STD_LOGIC;
    outStream_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    outStream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of yolo_acc_top_yolo_acc_top_Pipeline_VITIS_LOOP_42_2_VITIS_LOOP_45_3_VITIS_LOOP_48_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln1027_1_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal inStream_a_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln1027_1_reg_1113 : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_b_TDATA_blk_n : STD_LOGIC;
    signal outStream_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal indvar_flatten_load_reg_1117 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1027_2_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_2_reg_1122 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln42_3_fu_419_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln42_3_reg_1131 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln45_fu_432_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln45_reg_1137 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_444_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_reg_1143 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_keep_V_reg_1159 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_keep_V_reg_1159_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_keep_V_reg_1159_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_keep_V_reg_1159_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_strb_V_reg_1164 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_strb_V_reg_1164_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_strb_V_reg_1164_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_strb_V_reg_1164_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_1169 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_1169_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_1169_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_1169_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_id_V_reg_1174 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_1174_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_1174_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_1174_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_dest_V_reg_1179 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_1179_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_1179_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_1179_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln302_fu_726_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln302_reg_1184 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln302_1_fu_796_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln302_1_reg_1189 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln302_2_fu_866_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln302_2_reg_1194 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln302_3_fu_936_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln302_3_reg_1199 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_bias_fp_V_load_reg_1204 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_bias_fp_V_load_1_reg_1209 : STD_LOGIC_VECTOR (15 downto 0);
    signal curr_output_last_V_fu_975_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_output_last_V_reg_1224 : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_output_last_V_reg_1224_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_output_last_V_reg_1224_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_output_last_V_reg_1224_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal kernel_bias_fp_V_load_2_reg_1229 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_bias_fp_V_load_3_reg_1234 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_post_process_unit_fu_348_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal curr_output_data_sub_data_0_V_reg_1239 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_post_process_unit_fu_356_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal curr_output_data_sub_data_1_V_reg_1244 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal grp_post_process_unit_fu_348_data_in : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_post_process_unit_fu_348_bias : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_post_process_unit_fu_348_ap_ce : STD_LOGIC;
    signal ap_block_state2_pp0_stage1_iter0_ignore_call90 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1_ignore_call90 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2_ignore_call90 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3_ignore_call90 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4_ignore_call90 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_ignoreCallOp164 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call90 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1_ignore_call90 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2_ignore_call90 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3_ignore_call90 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4_ignore_call90 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp168 : BOOLEAN;
    signal grp_post_process_unit_fu_356_data_in : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_post_process_unit_fu_356_bias : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_post_process_unit_fu_356_ap_ce : STD_LOGIC;
    signal ap_block_state2_pp0_stage1_iter0_ignore_call95 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1_ignore_call95 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2_ignore_call95 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3_ignore_call95 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4_ignore_call95 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_ignoreCallOp165 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call95 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1_ignore_call95 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2_ignore_call95 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3_ignore_call95 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4_ignore_call95 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp169 : BOOLEAN;
    signal zext_ln65_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_fu_463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_fu_949_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_fu_959_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_ch_idx_fu_172 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln48_fu_981_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal col_idx_fu_176 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln1027_1_fu_561_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_fu_180 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln1027_2_fu_991_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal row_idx_fu_184 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln1027_fu_532_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten15_fu_188 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln1027_1_fu_397_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal icmp_ln1027_3_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln65_fu_440_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln66_fu_457_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal row_idx_cast_fu_479_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal col_idx_cast_fu_488_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln42_fu_504_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal row_idx_cast_mid1_fu_510_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal cmp_i_i_mid1_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i32_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln42_fu_497_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_idx_3_fu_539_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_idx_cast_mid1_fu_545_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal cmp_i_i32_mid1_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln42_2_fu_526_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_sub_data_0_V_1_fu_592_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_sub_data_0_V_2_fu_630_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln813_1_fu_668_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln813_fu_664_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_fu_672_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_1_fu_686_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_678_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_692_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln895_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln302_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_fu_718_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_sub_data_1_V_1_fu_596_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_sub_data_1_V_2_fu_634_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln813_3_fu_738_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln813_2_fu_734_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_fu_742_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_3_fu_756_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_2_fu_748_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_762_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln895_1_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_1_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln302_1_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_1_fu_788_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_sub_data_2_V_1_fu_606_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_sub_data_2_V_2_fu_644_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln813_5_fu_808_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln813_4_fu_804_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_2_fu_812_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_5_fu_826_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_4_fu_818_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_fu_832_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln895_2_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_2_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln302_2_fu_852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_2_fu_858_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_sub_data_3_V_1_fu_616_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_sub_data_3_V_2_fu_654_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln813_7_fu_878_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln813_6_fu_874_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_3_fu_882_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_7_fu_896_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_6_fu_888_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_fu_902_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln895_3_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_3_fu_916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln302_3_fu_922_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_3_fu_928_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln67_fu_944_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln68_fu_954_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln42_1_fu_519_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_fu_964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_fu_969_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln45_1_fu_554_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1027_fu_986_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to4 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component yolo_acc_top_post_process_unit IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (15 downto 0);
        bias : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_en : IN STD_LOGIC_VECTOR (0 downto 0);
        leaky : IN STD_LOGIC_VECTOR (0 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component yolo_acc_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    grp_post_process_unit_fu_348 : component yolo_acc_top_post_process_unit
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => grp_post_process_unit_fu_348_data_in,
        bias => grp_post_process_unit_fu_348_bias,
        bias_en => bias_en,
        leaky => leaky,
        ap_return => grp_post_process_unit_fu_348_ap_return,
        ap_ce => grp_post_process_unit_fu_348_ap_ce);

    grp_post_process_unit_fu_356 : component yolo_acc_top_post_process_unit
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => grp_post_process_unit_fu_356_data_in,
        bias => grp_post_process_unit_fu_356_bias,
        bias_en => bias_en,
        leaky => leaky,
        ap_return => grp_post_process_unit_fu_356_ap_return,
        ap_ce => grp_post_process_unit_fu_356_ap_ce);

    flow_control_loop_pipe_sequential_init_U : component yolo_acc_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    col_idx_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    col_idx_fu_176 <= ap_const_lv9_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1027_1_reg_1113 = ap_const_lv1_0))) then 
                    col_idx_fu_176 <= select_ln1027_1_fu_561_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten15_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten15_fu_188 <= ap_const_lv22_0;
            elsif (((icmp_ln1027_1_fu_392_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                indvar_flatten15_fu_188 <= add_ln1027_1_fu_397_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_180 <= ap_const_lv13_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1027_1_reg_1113 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_180 <= select_ln1027_2_fu_991_p3;
                end if;
            end if; 
        end if;
    end process;

    input_ch_idx_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    input_ch_idx_fu_172 <= ap_const_lv4_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1027_1_reg_1113 = ap_const_lv1_0))) then 
                    input_ch_idx_fu_172 <= add_ln48_fu_981_p2;
                end if;
            end if; 
        end if;
    end process;

    row_idx_fu_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    row_idx_fu_184 <= ap_const_lv9_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1027_1_reg_1113 = ap_const_lv1_0))) then 
                    row_idx_fu_184 <= select_ln1027_fu_532_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                icmp_ln1027_1_reg_1113 <= icmp_ln1027_1_fu_392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                curr_output_data_sub_data_0_V_reg_1239 <= grp_post_process_unit_fu_348_ap_return;
                curr_output_data_sub_data_1_V_reg_1244 <= grp_post_process_unit_fu_356_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1027_1_reg_1113 = ap_const_lv1_0))) then
                curr_output_last_V_reg_1224 <= curr_output_last_V_fu_975_p2;
                select_ln302_1_reg_1189 <= select_ln302_1_fu_796_p3;
                select_ln302_2_reg_1194 <= select_ln302_2_fu_866_p3;
                select_ln302_3_reg_1199 <= select_ln302_3_fu_936_p3;
                select_ln302_reg_1184 <= select_ln302_fu_726_p3;
                tmp_dest_V_reg_1179 <= inStream_a_TDEST;
                tmp_id_V_reg_1174 <= inStream_a_TID;
                tmp_keep_V_reg_1159 <= inStream_a_TKEEP;
                tmp_strb_V_reg_1164 <= inStream_a_TSTRB;
                tmp_user_V_reg_1169 <= inStream_a_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                curr_output_last_V_reg_1224_pp0_iter2_reg <= curr_output_last_V_reg_1224;
                curr_output_last_V_reg_1224_pp0_iter3_reg <= curr_output_last_V_reg_1224_pp0_iter2_reg;
                curr_output_last_V_reg_1224_pp0_iter4_reg <= curr_output_last_V_reg_1224_pp0_iter3_reg;
                tmp_dest_V_reg_1179_pp0_iter2_reg <= tmp_dest_V_reg_1179;
                tmp_dest_V_reg_1179_pp0_iter3_reg <= tmp_dest_V_reg_1179_pp0_iter2_reg;
                tmp_dest_V_reg_1179_pp0_iter4_reg <= tmp_dest_V_reg_1179_pp0_iter3_reg;
                tmp_id_V_reg_1174_pp0_iter2_reg <= tmp_id_V_reg_1174;
                tmp_id_V_reg_1174_pp0_iter3_reg <= tmp_id_V_reg_1174_pp0_iter2_reg;
                tmp_id_V_reg_1174_pp0_iter4_reg <= tmp_id_V_reg_1174_pp0_iter3_reg;
                tmp_keep_V_reg_1159_pp0_iter2_reg <= tmp_keep_V_reg_1159;
                tmp_keep_V_reg_1159_pp0_iter3_reg <= tmp_keep_V_reg_1159_pp0_iter2_reg;
                tmp_keep_V_reg_1159_pp0_iter4_reg <= tmp_keep_V_reg_1159_pp0_iter3_reg;
                tmp_strb_V_reg_1164_pp0_iter2_reg <= tmp_strb_V_reg_1164;
                tmp_strb_V_reg_1164_pp0_iter3_reg <= tmp_strb_V_reg_1164_pp0_iter2_reg;
                tmp_strb_V_reg_1164_pp0_iter4_reg <= tmp_strb_V_reg_1164_pp0_iter3_reg;
                tmp_user_V_reg_1169_pp0_iter2_reg <= tmp_user_V_reg_1169;
                tmp_user_V_reg_1169_pp0_iter3_reg <= tmp_user_V_reg_1169_pp0_iter2_reg;
                tmp_user_V_reg_1169_pp0_iter4_reg <= tmp_user_V_reg_1169_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_1_fu_392_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln1027_2_reg_1122 <= icmp_ln1027_2_fu_409_p2;
                indvar_flatten_load_reg_1117 <= indvar_flatten_fu_180;
                select_ln42_3_reg_1131 <= select_ln42_3_fu_419_p3;
                select_ln45_reg_1137 <= select_ln45_fu_432_p3;
                    shl_ln_reg_1143(4 downto 2) <= shl_ln_fu_444_p3(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1027_1_reg_1113 = ap_const_lv1_0))) then
                kernel_bias_fp_V_load_1_reg_1209 <= kernel_bias_fp_V_q0;
                kernel_bias_fp_V_load_reg_1204 <= kernel_bias_fp_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                kernel_bias_fp_V_load_2_reg_1229 <= kernel_bias_fp_V_q1;
                kernel_bias_fp_V_load_3_reg_1234 <= kernel_bias_fp_V_q0;
            end if;
        end if;
    end process;
    shl_ln_reg_1143(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to4, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to4 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln1027_1_fu_397_p2 <= std_logic_vector(unsigned(indvar_flatten15_fu_188) + unsigned(ap_const_lv22_1));
    add_ln1027_fu_986_p2 <= std_logic_vector(unsigned(indvar_flatten_load_reg_1117) + unsigned(ap_const_lv13_1));
    add_ln42_fu_504_p2 <= std_logic_vector(unsigned(row_idx_fu_184) + unsigned(ap_const_lv9_1));
    add_ln48_fu_981_p2 <= std_logic_vector(unsigned(select_ln45_reg_1137) + unsigned(ap_const_lv4_1));
    and_ln76_fu_969_p2 <= (select_ln42_1_fu_519_p3 and icmp_ln75_fu_964_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, inStream_a_TVALID, inStream_b_TVALID, icmp_ln1027_1_reg_1113)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((inStream_b_TVALID = ap_const_logic_0) and (icmp_ln1027_1_reg_1113 = ap_const_lv1_0)) or ((inStream_a_TVALID = ap_const_logic_0) and (icmp_ln1027_1_reg_1113 = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp168_assign_proc : process(ap_enable_reg_pp0_iter1, inStream_a_TVALID, inStream_b_TVALID, icmp_ln1027_1_reg_1113)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp168 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((inStream_b_TVALID = ap_const_logic_0) and (icmp_ln1027_1_reg_1113 = ap_const_lv1_0)) or ((inStream_a_TVALID = ap_const_logic_0) and (icmp_ln1027_1_reg_1113 = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp169_assign_proc : process(ap_enable_reg_pp0_iter1, inStream_a_TVALID, inStream_b_TVALID, icmp_ln1027_1_reg_1113)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp169 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((inStream_b_TVALID = ap_const_logic_0) and (icmp_ln1027_1_reg_1113 = ap_const_lv1_0)) or ((inStream_a_TVALID = ap_const_logic_0) and (icmp_ln1027_1_reg_1113 = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, inStream_a_TVALID, inStream_b_TVALID, icmp_ln1027_1_reg_1113)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((inStream_b_TVALID = ap_const_logic_0) and (icmp_ln1027_1_reg_1113 = ap_const_lv1_0)) or ((inStream_a_TVALID = ap_const_logic_0) and (icmp_ln1027_1_reg_1113 = ap_const_lv1_0))));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter4, outStream_TREADY)
    begin
                ap_block_pp0_stage1_01001 <= ((outStream_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter4, outStream_TREADY)
    begin
                ap_block_pp0_stage1_11001 <= ((outStream_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_ignoreCallOp164_assign_proc : process(ap_enable_reg_pp0_iter4, outStream_TREADY)
    begin
                ap_block_pp0_stage1_11001_ignoreCallOp164 <= ((outStream_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_ignoreCallOp165_assign_proc : process(ap_enable_reg_pp0_iter4, outStream_TREADY)
    begin
                ap_block_pp0_stage1_11001_ignoreCallOp165 <= ((outStream_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, outStream_TREADY)
    begin
                ap_block_pp0_stage1_subdone <= ((outStream_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage1_iter4_assign_proc : process(outStream_TREADY)
    begin
                ap_block_state10_pp0_stage1_iter4 <= (outStream_TREADY = ap_const_logic_0);
    end process;


    ap_block_state10_pp0_stage1_iter4_ignore_call90_assign_proc : process(outStream_TREADY)
    begin
                ap_block_state10_pp0_stage1_iter4_ignore_call90 <= (outStream_TREADY = ap_const_logic_0);
    end process;


    ap_block_state10_pp0_stage1_iter4_ignore_call95_assign_proc : process(outStream_TREADY)
    begin
                ap_block_state10_pp0_stage1_iter4_ignore_call95 <= (outStream_TREADY = ap_const_logic_0);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0_ignore_call90 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0_ignore_call95 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0_ignore_call90 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0_ignore_call95 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(inStream_a_TVALID, inStream_b_TVALID, icmp_ln1027_1_reg_1113)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((inStream_b_TVALID = ap_const_logic_0) and (icmp_ln1027_1_reg_1113 = ap_const_lv1_0)) or ((inStream_a_TVALID = ap_const_logic_0) and (icmp_ln1027_1_reg_1113 = ap_const_lv1_0)));
    end process;


    ap_block_state3_pp0_stage0_iter1_ignore_call90_assign_proc : process(inStream_a_TVALID, inStream_b_TVALID, icmp_ln1027_1_reg_1113)
    begin
                ap_block_state3_pp0_stage0_iter1_ignore_call90 <= (((inStream_b_TVALID = ap_const_logic_0) and (icmp_ln1027_1_reg_1113 = ap_const_lv1_0)) or ((inStream_a_TVALID = ap_const_logic_0) and (icmp_ln1027_1_reg_1113 = ap_const_lv1_0)));
    end process;


    ap_block_state3_pp0_stage0_iter1_ignore_call95_assign_proc : process(inStream_a_TVALID, inStream_b_TVALID, icmp_ln1027_1_reg_1113)
    begin
                ap_block_state3_pp0_stage0_iter1_ignore_call95 <= (((inStream_b_TVALID = ap_const_logic_0) and (icmp_ln1027_1_reg_1113 = ap_const_lv1_0)) or ((inStream_a_TVALID = ap_const_logic_0) and (icmp_ln1027_1_reg_1113 = ap_const_lv1_0)));
    end process;

        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1_ignore_call90 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1_ignore_call95 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2_ignore_call90 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2_ignore_call95 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2_ignore_call90 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2_ignore_call95 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3_ignore_call90 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3_ignore_call95 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3_ignore_call90 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3_ignore_call95 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4_ignore_call90 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4_ignore_call95 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln1027_1_fu_392_p2)
    begin
        if (((icmp_ln1027_1_fu_392_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1027_1_reg_1113, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1027_1_reg_1113 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to4 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    cmp_i_i32_fu_492_p2 <= "1" when (sub_i_i55 = col_idx_cast_fu_488_p1) else "0";
    cmp_i_i32_mid1_fu_549_p2 <= "1" when (sub_i_i55 = col_idx_cast_mid1_fu_545_p1) else "0";
    cmp_i_i_fu_483_p2 <= "1" when (sub_i_i = row_idx_cast_fu_479_p1) else "0";
    cmp_i_i_mid1_fu_514_p2 <= "1" when (sub_i_i = row_idx_cast_mid1_fu_510_p1) else "0";
    col_idx_3_fu_539_p2 <= std_logic_vector(unsigned(select_ln42_fu_497_p3) + unsigned(ap_const_lv9_1));
    col_idx_cast_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_idx_fu_176),10));
    col_idx_cast_mid1_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_idx_3_fu_539_p2),10));
    curr_output_last_V_fu_975_p2 <= (select_ln45_1_fu_554_p3 and and_ln76_fu_969_p2);

    grp_post_process_unit_fu_348_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001_ignoreCallOp164, ap_block_pp0_stage0_11001_ignoreCallOp168)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp168) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp164) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_post_process_unit_fu_348_ap_ce <= ap_const_logic_1;
        else 
            grp_post_process_unit_fu_348_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_post_process_unit_fu_348_bias_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, kernel_bias_fp_V_load_reg_1204, kernel_bias_fp_V_load_2_reg_1229)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_post_process_unit_fu_348_bias <= kernel_bias_fp_V_load_2_reg_1229;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_post_process_unit_fu_348_bias <= kernel_bias_fp_V_load_reg_1204;
        else 
            grp_post_process_unit_fu_348_bias <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_post_process_unit_fu_348_data_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, select_ln302_reg_1184, select_ln302_2_reg_1194)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_post_process_unit_fu_348_data_in <= select_ln302_2_reg_1194;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_post_process_unit_fu_348_data_in <= select_ln302_reg_1184;
        else 
            grp_post_process_unit_fu_348_data_in <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_post_process_unit_fu_356_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001_ignoreCallOp165, ap_block_pp0_stage0_11001_ignoreCallOp169)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp169) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp165) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_post_process_unit_fu_356_ap_ce <= ap_const_logic_1;
        else 
            grp_post_process_unit_fu_356_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_post_process_unit_fu_356_bias_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, kernel_bias_fp_V_load_1_reg_1209, kernel_bias_fp_V_load_3_reg_1234)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_post_process_unit_fu_356_bias <= kernel_bias_fp_V_load_3_reg_1234;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_post_process_unit_fu_356_bias <= kernel_bias_fp_V_load_1_reg_1209;
        else 
            grp_post_process_unit_fu_356_bias <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_post_process_unit_fu_356_data_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, select_ln302_1_reg_1189, select_ln302_3_reg_1199)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_post_process_unit_fu_356_data_in <= select_ln302_3_reg_1199;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_post_process_unit_fu_356_data_in <= select_ln302_1_reg_1189;
        else 
            grp_post_process_unit_fu_356_data_in <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln1027_1_fu_392_p2 <= "1" when (indvar_flatten15_fu_188 = bound4) else "0";
    icmp_ln1027_2_fu_409_p2 <= "1" when (indvar_flatten_fu_180 = bound) else "0";
    icmp_ln1027_3_fu_414_p2 <= "1" when (input_ch_idx_fu_172 = fold_input_ch) else "0";
    icmp_ln75_fu_964_p2 <= "1" when (select_ln45_reg_1137 = ap_const_lv4_7) else "0";

    inStream_a_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, inStream_a_TVALID, ap_block_pp0_stage0, icmp_ln1027_1_reg_1113)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1027_1_reg_1113 = ap_const_lv1_0))) then 
            inStream_a_TDATA_blk_n <= inStream_a_TVALID;
        else 
            inStream_a_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    inStream_a_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1027_1_reg_1113, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1027_1_reg_1113 = ap_const_lv1_0))) then 
            inStream_a_TREADY <= ap_const_logic_1;
        else 
            inStream_a_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    inStream_b_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, inStream_b_TVALID, ap_block_pp0_stage0, icmp_ln1027_1_reg_1113)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1027_1_reg_1113 = ap_const_lv1_0))) then 
            inStream_b_TDATA_blk_n <= inStream_b_TVALID;
        else 
            inStream_b_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    inStream_b_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1027_1_reg_1113, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1027_1_reg_1113 = ap_const_lv1_0))) then 
            inStream_b_TREADY <= ap_const_logic_1;
        else 
            inStream_b_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    kernel_bias_fp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln66_fu_463_p1, zext_ln68_fu_959_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            kernel_bias_fp_V_address0 <= zext_ln68_fu_959_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            kernel_bias_fp_V_address0 <= zext_ln66_fu_463_p1(5 - 1 downto 0);
        else 
            kernel_bias_fp_V_address0 <= "XXXXX";
        end if; 
    end process;


    kernel_bias_fp_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln65_fu_452_p1, zext_ln67_fu_949_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            kernel_bias_fp_V_address1 <= zext_ln67_fu_949_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            kernel_bias_fp_V_address1 <= zext_ln65_fu_452_p1(5 - 1 downto 0);
        else 
            kernel_bias_fp_V_address1 <= "XXXXX";
        end if; 
    end process;


    kernel_bias_fp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            kernel_bias_fp_V_ce0 <= ap_const_logic_1;
        else 
            kernel_bias_fp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_bias_fp_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            kernel_bias_fp_V_ce1 <= ap_const_logic_1;
        else 
            kernel_bias_fp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln45_fu_426_p2 <= (select_ln42_3_fu_419_p3 or icmp_ln1027_2_fu_409_p2);
    or_ln66_fu_457_p2 <= (shl_ln_fu_444_p3 or ap_const_lv5_1);
    or_ln67_fu_944_p2 <= (shl_ln_reg_1143 or ap_const_lv5_2);
    or_ln68_fu_954_p2 <= (shl_ln_reg_1143 or ap_const_lv5_3);
    outStream_TDATA <= (((grp_post_process_unit_fu_356_ap_return & grp_post_process_unit_fu_348_ap_return) & curr_output_data_sub_data_1_V_reg_1244) & curr_output_data_sub_data_0_V_reg_1239);

    outStream_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, outStream_TREADY, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            outStream_TDATA_blk_n <= outStream_TREADY;
        else 
            outStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_TDEST <= tmp_dest_V_reg_1179_pp0_iter4_reg;
    outStream_TID <= tmp_id_V_reg_1174_pp0_iter4_reg;
    outStream_TKEEP <= tmp_keep_V_reg_1159_pp0_iter4_reg;
    outStream_TLAST <= curr_output_last_V_reg_1224_pp0_iter4_reg;
    outStream_TSTRB <= tmp_strb_V_reg_1164_pp0_iter4_reg;
    outStream_TUSER <= tmp_user_V_reg_1169_pp0_iter4_reg;

    outStream_TVALID_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            outStream_TVALID <= ap_const_logic_1;
        else 
            outStream_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    overflow_1_fu_776_p2 <= (xor_ln895_1_fu_770_p2 and p_Result_3_fu_762_p3);
    overflow_2_fu_846_p2 <= (xor_ln895_2_fu_840_p2 and p_Result_5_fu_832_p3);
    overflow_3_fu_916_p2 <= (xor_ln895_3_fu_910_p2 and p_Result_7_fu_902_p3);
    overflow_fu_706_p2 <= (xor_ln895_fu_700_p2 and p_Result_1_fu_692_p3);
    p_Result_1_fu_692_p3 <= p_Val2_1_fu_686_p2(15 downto 15);
    p_Result_2_fu_748_p3 <= ret_V_1_fu_742_p2(16 downto 16);
    p_Result_3_fu_762_p3 <= p_Val2_3_fu_756_p2(15 downto 15);
    p_Result_4_fu_818_p3 <= ret_V_2_fu_812_p2(16 downto 16);
    p_Result_5_fu_832_p3 <= p_Val2_5_fu_826_p2(15 downto 15);
    p_Result_6_fu_888_p3 <= ret_V_3_fu_882_p2(16 downto 16);
    p_Result_7_fu_902_p3 <= p_Val2_7_fu_896_p2(15 downto 15);
    p_Result_s_fu_678_p3 <= ret_V_fu_672_p2(16 downto 16);
    p_Val2_1_fu_686_p2 <= std_logic_vector(signed(tmp_data_sub_data_0_V_2_fu_630_p1) + signed(tmp_data_sub_data_0_V_1_fu_592_p1));
    p_Val2_3_fu_756_p2 <= std_logic_vector(signed(tmp_data_sub_data_1_V_2_fu_634_p4) + signed(tmp_data_sub_data_1_V_1_fu_596_p4));
    p_Val2_5_fu_826_p2 <= std_logic_vector(signed(tmp_data_sub_data_2_V_2_fu_644_p4) + signed(tmp_data_sub_data_2_V_1_fu_606_p4));
    p_Val2_7_fu_896_p2 <= std_logic_vector(signed(tmp_data_sub_data_3_V_2_fu_654_p4) + signed(tmp_data_sub_data_3_V_1_fu_616_p4));
    ret_V_1_fu_742_p2 <= std_logic_vector(signed(sext_ln813_3_fu_738_p1) + signed(sext_ln813_2_fu_734_p1));
    ret_V_2_fu_812_p2 <= std_logic_vector(signed(sext_ln813_5_fu_808_p1) + signed(sext_ln813_4_fu_804_p1));
    ret_V_3_fu_882_p2 <= std_logic_vector(signed(sext_ln813_7_fu_878_p1) + signed(sext_ln813_6_fu_874_p1));
    ret_V_fu_672_p2 <= std_logic_vector(signed(sext_ln813_1_fu_668_p1) + signed(sext_ln813_fu_664_p1));
    row_idx_cast_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_idx_fu_184),10));
    row_idx_cast_mid1_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_fu_504_p2),10));
    select_ln1027_1_fu_561_p3 <= 
        col_idx_3_fu_539_p2 when (select_ln42_3_reg_1131(0) = '1') else 
        select_ln42_fu_497_p3;
    select_ln1027_2_fu_991_p3 <= 
        ap_const_lv13_1 when (icmp_ln1027_2_reg_1122(0) = '1') else 
        add_ln1027_fu_986_p2;
    select_ln1027_fu_532_p3 <= 
        add_ln42_fu_504_p2 when (icmp_ln1027_2_reg_1122(0) = '1') else 
        row_idx_fu_184;
    select_ln302_1_fu_796_p3 <= 
        select_ln346_1_fu_788_p3 when (xor_ln302_1_fu_782_p2(0) = '1') else 
        p_Val2_3_fu_756_p2;
    select_ln302_2_fu_866_p3 <= 
        select_ln346_2_fu_858_p3 when (xor_ln302_2_fu_852_p2(0) = '1') else 
        p_Val2_5_fu_826_p2;
    select_ln302_3_fu_936_p3 <= 
        select_ln346_3_fu_928_p3 when (xor_ln302_3_fu_922_p2(0) = '1') else 
        p_Val2_7_fu_896_p2;
    select_ln302_fu_726_p3 <= 
        select_ln346_fu_718_p3 when (xor_ln302_fu_712_p2(0) = '1') else 
        p_Val2_1_fu_686_p2;
    select_ln346_1_fu_788_p3 <= 
        ap_const_lv16_7FFF when (overflow_1_fu_776_p2(0) = '1') else 
        ap_const_lv16_8000;
    select_ln346_2_fu_858_p3 <= 
        ap_const_lv16_7FFF when (overflow_2_fu_846_p2(0) = '1') else 
        ap_const_lv16_8000;
    select_ln346_3_fu_928_p3 <= 
        ap_const_lv16_7FFF when (overflow_3_fu_916_p2(0) = '1') else 
        ap_const_lv16_8000;
    select_ln346_fu_718_p3 <= 
        ap_const_lv16_7FFF when (overflow_fu_706_p2(0) = '1') else 
        ap_const_lv16_8000;
    select_ln42_1_fu_519_p3 <= 
        cmp_i_i_mid1_fu_514_p2 when (icmp_ln1027_2_reg_1122(0) = '1') else 
        cmp_i_i_fu_483_p2;
    select_ln42_2_fu_526_p3 <= 
        cmp_i_i32_mid111 when (icmp_ln1027_2_reg_1122(0) = '1') else 
        cmp_i_i32_fu_492_p2;
    select_ln42_3_fu_419_p3 <= 
        icmp_ln1027 when (icmp_ln1027_2_fu_409_p2(0) = '1') else 
        icmp_ln1027_3_fu_414_p2;
    select_ln42_fu_497_p3 <= 
        ap_const_lv9_0 when (icmp_ln1027_2_reg_1122(0) = '1') else 
        col_idx_fu_176;
    select_ln45_1_fu_554_p3 <= 
        cmp_i_i32_mid1_fu_549_p2 when (select_ln42_3_reg_1131(0) = '1') else 
        select_ln42_2_fu_526_p3;
    select_ln45_fu_432_p3 <= 
        ap_const_lv4_0 when (or_ln45_fu_426_p2(0) = '1') else 
        input_ch_idx_fu_172;
        sext_ln813_1_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_sub_data_0_V_2_fu_630_p1),17));

        sext_ln813_2_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_sub_data_1_V_1_fu_596_p4),17));

        sext_ln813_3_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_sub_data_1_V_2_fu_634_p4),17));

        sext_ln813_4_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_sub_data_2_V_1_fu_606_p4),17));

        sext_ln813_5_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_sub_data_2_V_2_fu_644_p4),17));

        sext_ln813_6_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_sub_data_3_V_1_fu_616_p4),17));

        sext_ln813_7_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_sub_data_3_V_2_fu_654_p4),17));

        sext_ln813_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_sub_data_0_V_1_fu_592_p1),17));

    shl_ln_fu_444_p3 <= (trunc_ln65_fu_440_p1 & ap_const_lv2_0);
    tmp_data_sub_data_0_V_1_fu_592_p1 <= inStream_a_TDATA(16 - 1 downto 0);
    tmp_data_sub_data_0_V_2_fu_630_p1 <= inStream_b_TDATA(16 - 1 downto 0);
    tmp_data_sub_data_1_V_1_fu_596_p4 <= inStream_a_TDATA(31 downto 16);
    tmp_data_sub_data_1_V_2_fu_634_p4 <= inStream_b_TDATA(31 downto 16);
    tmp_data_sub_data_2_V_1_fu_606_p4 <= inStream_a_TDATA(47 downto 32);
    tmp_data_sub_data_2_V_2_fu_644_p4 <= inStream_b_TDATA(47 downto 32);
    tmp_data_sub_data_3_V_1_fu_616_p4 <= inStream_a_TDATA(63 downto 48);
    tmp_data_sub_data_3_V_2_fu_654_p4 <= inStream_b_TDATA(63 downto 48);
    trunc_ln65_fu_440_p1 <= select_ln45_fu_432_p3(3 - 1 downto 0);
    xor_ln302_1_fu_782_p2 <= (p_Result_3_fu_762_p3 xor p_Result_2_fu_748_p3);
    xor_ln302_2_fu_852_p2 <= (p_Result_5_fu_832_p3 xor p_Result_4_fu_818_p3);
    xor_ln302_3_fu_922_p2 <= (p_Result_7_fu_902_p3 xor p_Result_6_fu_888_p3);
    xor_ln302_fu_712_p2 <= (p_Result_s_fu_678_p3 xor p_Result_1_fu_692_p3);
    xor_ln895_1_fu_770_p2 <= (p_Result_2_fu_748_p3 xor ap_const_lv1_1);
    xor_ln895_2_fu_840_p2 <= (p_Result_4_fu_818_p3 xor ap_const_lv1_1);
    xor_ln895_3_fu_910_p2 <= (p_Result_6_fu_888_p3 xor ap_const_lv1_1);
    xor_ln895_fu_700_p2 <= (p_Result_s_fu_678_p3 xor ap_const_lv1_1);
    zext_ln65_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_444_p3),64));
    zext_ln66_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln66_fu_457_p2),64));
    zext_ln67_fu_949_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln67_fu_944_p2),64));
    zext_ln68_fu_959_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln68_fu_954_p2),64));
end behav;
