-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yolo_conv_top_post_process is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    sub0_val_output : IN STD_LOGIC_VECTOR (31 downto 0);
    sub1_val_output : IN STD_LOGIC_VECTOR (31 downto 0);
    sub2_val_output : IN STD_LOGIC_VECTOR (31 downto 0);
    sub3_val_output : IN STD_LOGIC_VECTOR (31 downto 0);
    input_ch_idx : IN STD_LOGIC_VECTOR (3 downto 0);
    val_output : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of yolo_conv_top_post_process is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";

attribute shreg_extract : string;
    signal sub0_val_output_read_reg_91 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln214_fu_62_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln214_reg_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln813_9_fu_76_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln813_9_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln214_fu_56_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln813_8_fu_70_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln813_fu_82_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln813_10_fu_86_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal ap_return_int_reg : STD_LOGIC_VECTOR (31 downto 0);


begin




    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln813_9_reg_101 <= add_ln813_9_fu_76_p2;
                select_ln214_reg_96 <= select_ln214_fu_62_p3;
                sub0_val_output_read_reg_91 <= sub0_val_output;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= add_ln813_10_fu_86_p2;
            end if;
        end if;
    end process;
    add_ln813_10_fu_86_p2 <= std_logic_vector(unsigned(add_ln813_9_reg_101) + unsigned(add_ln813_fu_82_p2));
    add_ln813_8_fu_70_p2 <= std_logic_vector(unsigned(sub2_val_output) + unsigned(sub3_val_output));
    add_ln813_9_fu_76_p2 <= std_logic_vector(unsigned(add_ln813_8_fu_70_p2) + unsigned(sub1_val_output));
    add_ln813_fu_82_p2 <= std_logic_vector(unsigned(select_ln214_reg_96) + unsigned(sub0_val_output_read_reg_91));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(add_ln813_10_fu_86_p2, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= add_ln813_10_fu_86_p2;
        else 
            ap_return <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln214_fu_56_p2 <= "1" when (input_ch_idx = ap_const_lv4_0) else "0";
    select_ln214_fu_62_p3 <= 
        ap_const_lv32_0 when (icmp_ln214_fu_56_p2(0) = '1') else 
        val_output;
end behav;
