-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yolo_conv_top_slide_window is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    conv_count : IN STD_LOGIC_VECTOR (8 downto 0);
    line_buff_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    line_buff_0_ce0 : OUT STD_LOGIC;
    line_buff_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    line_buff_0_offset : IN STD_LOGIC_VECTOR (2 downto 0);
    line_buff_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    line_buff_1_ce0 : OUT STD_LOGIC;
    line_buff_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    line_buff_1_offset : IN STD_LOGIC_VECTOR (2 downto 0);
    line_buff_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    line_buff_2_ce0 : OUT STD_LOGIC;
    line_buff_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    line_buff_2_offset : IN STD_LOGIC_VECTOR (2 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of yolo_conv_top_slide_window is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv12_1A2 : STD_LOGIC_VECTOR (11 downto 0) := "000110100010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal mul_ln984_fu_151_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln984_reg_334 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal mul_ln984_1_fu_161_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln984_1_reg_341 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln984_2_fu_171_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln984_2_reg_348 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_count_read_reg_355 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln262_fu_211_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln262_reg_375 : STD_LOGIC_VECTOR (8 downto 0);
    signal kernel_window_val_V_reg_380 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal add_ln984_6_fu_259_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln984_6_reg_400 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln984_7_fu_264_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln984_7_reg_405 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln984_8_fu_269_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln984_8_reg_410 : STD_LOGIC_VECTOR (11 downto 0);
    signal kernel_window_val_V_3_reg_415 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_window_val_V_6_reg_420 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_window_val_V_1_reg_425 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal kernel_window_val_V_4_reg_445 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_window_val_V_7_reg_450 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_port_reg_conv_count : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln984_4_fu_186_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln984_5_fu_196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln984_6_fu_206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln984_8_fu_225_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln984_9_fu_235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln984_10_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln984_12_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln984_13_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln984_14_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mul_ln984_fu_151_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln984_fu_151_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln984_1_fu_161_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln984_1_fu_161_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln984_2_fu_171_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln984_2_fu_171_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln984_3_fu_177_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln984_fu_181_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln984_1_fu_191_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln984_2_fu_201_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln984_7_fu_217_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln984_3_fu_220_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln984_4_fu_230_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln984_5_fu_240_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln262_1_fu_250_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln984_11_fu_255_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln984_1_fu_161_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln984_2_fu_171_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln984_fu_151_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component yolo_conv_top_mul_3ns_10ns_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    mul_3ns_10ns_12_1_1_U89 : component yolo_conv_top_mul_3ns_10ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 10,
        dout_WIDTH => 12)
    port map (
        din0 => mul_ln984_fu_151_p0,
        din1 => mul_ln984_fu_151_p1,
        dout => mul_ln984_fu_151_p2);

    mul_3ns_10ns_12_1_1_U90 : component yolo_conv_top_mul_3ns_10ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 10,
        dout_WIDTH => 12)
    port map (
        din0 => mul_ln984_1_fu_161_p0,
        din1 => mul_ln984_1_fu_161_p1,
        dout => mul_ln984_1_fu_161_p2);

    mul_3ns_10ns_12_1_1_U91 : component yolo_conv_top_mul_3ns_10ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 10,
        dout_WIDTH => 12)
    port map (
        din0 => mul_ln984_2_fu_171_p0,
        din1 => mul_ln984_2_fu_171_p1,
        dout => mul_ln984_2_fu_171_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_ce))) then
                add_ln262_reg_375 <= add_ln262_fu_211_p2;
                conv_count_read_reg_355 <= ap_port_reg_conv_count;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln984_6_reg_400 <= add_ln984_6_fu_259_p2;
                add_ln984_7_reg_405 <= add_ln984_7_fu_264_p2;
                add_ln984_8_reg_410 <= add_ln984_8_fu_269_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_port_reg_conv_count <= conv_count;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                kernel_window_val_V_1_reg_425 <= line_buff_0_q0;
                kernel_window_val_V_4_reg_445 <= line_buff_1_q0;
                kernel_window_val_V_7_reg_450 <= line_buff_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                kernel_window_val_V_3_reg_415 <= line_buff_1_q0;
                kernel_window_val_V_6_reg_420 <= line_buff_2_q0;
                kernel_window_val_V_reg_380 <= line_buff_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln984_1_reg_341 <= mul_ln984_1_fu_161_p2;
                mul_ln984_2_reg_348 <= mul_ln984_2_fu_171_p2;
                mul_ln984_reg_334 <= mul_ln984_fu_151_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln262_1_fu_250_p2 <= std_logic_vector(unsigned(conv_count_read_reg_355) + unsigned(ap_const_lv9_2));
    add_ln262_fu_211_p2 <= std_logic_vector(unsigned(ap_port_reg_conv_count) + unsigned(ap_const_lv9_1));
    add_ln984_1_fu_191_p2 <= std_logic_vector(unsigned(mul_ln984_1_reg_341) + unsigned(zext_ln984_3_fu_177_p1));
    add_ln984_2_fu_201_p2 <= std_logic_vector(unsigned(mul_ln984_reg_334) + unsigned(zext_ln984_3_fu_177_p1));
    add_ln984_3_fu_220_p2 <= std_logic_vector(unsigned(mul_ln984_2_reg_348) + unsigned(zext_ln984_7_fu_217_p1));
    add_ln984_4_fu_230_p2 <= std_logic_vector(unsigned(mul_ln984_1_reg_341) + unsigned(zext_ln984_7_fu_217_p1));
    add_ln984_5_fu_240_p2 <= std_logic_vector(unsigned(mul_ln984_reg_334) + unsigned(zext_ln984_7_fu_217_p1));
    add_ln984_6_fu_259_p2 <= std_logic_vector(unsigned(mul_ln984_2_reg_348) + unsigned(zext_ln984_11_fu_255_p1));
    add_ln984_7_fu_264_p2 <= std_logic_vector(unsigned(mul_ln984_1_reg_341) + unsigned(zext_ln984_11_fu_255_p1));
    add_ln984_8_fu_269_p2 <= std_logic_vector(unsigned(mul_ln984_reg_334) + unsigned(zext_ln984_11_fu_255_p1));
    add_ln984_fu_181_p2 <= std_logic_vector(unsigned(mul_ln984_2_reg_348) + unsigned(zext_ln984_3_fu_177_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage1_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage2_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage3_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= kernel_window_val_V_reg_380;
    ap_return_1 <= kernel_window_val_V_1_reg_425;
    ap_return_2 <= line_buff_0_q0;
    ap_return_3 <= kernel_window_val_V_3_reg_415;
    ap_return_4 <= kernel_window_val_V_4_reg_445;
    ap_return_5 <= line_buff_1_q0;
    ap_return_6 <= kernel_window_val_V_6_reg_420;
    ap_return_7 <= kernel_window_val_V_7_reg_450;
    ap_return_8 <= line_buff_2_q0;

    line_buff_0_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln984_4_fu_186_p1, ap_block_pp0_stage1, zext_ln984_8_fu_225_p1, ap_block_pp0_stage2, zext_ln984_12_fu_274_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                line_buff_0_address0 <= zext_ln984_12_fu_274_p1(12 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                line_buff_0_address0 <= zext_ln984_8_fu_225_p1(12 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                line_buff_0_address0 <= zext_ln984_4_fu_186_p1(12 - 1 downto 0);
            else 
                line_buff_0_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            line_buff_0_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_ce, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_ce)))) then 
            line_buff_0_ce0 <= ap_const_logic_1;
        else 
            line_buff_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_1_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1, zext_ln984_5_fu_196_p1, ap_block_pp0_stage2, zext_ln984_9_fu_235_p1, ap_block_pp0_stage3, zext_ln984_13_fu_278_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                line_buff_1_address0 <= zext_ln984_13_fu_278_p1(12 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                line_buff_1_address0 <= zext_ln984_9_fu_235_p1(12 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                line_buff_1_address0 <= zext_ln984_5_fu_196_p1(12 - 1 downto 0);
            else 
                line_buff_1_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            line_buff_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_ce, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_ce)))) then 
            line_buff_1_ce0 <= ap_const_logic_1;
        else 
            line_buff_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_2_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1, zext_ln984_6_fu_206_p1, ap_block_pp0_stage2, zext_ln984_10_fu_245_p1, ap_block_pp0_stage3, zext_ln984_14_fu_282_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                line_buff_2_address0 <= zext_ln984_14_fu_282_p1(12 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                line_buff_2_address0 <= zext_ln984_10_fu_245_p1(12 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                line_buff_2_address0 <= zext_ln984_6_fu_206_p1(12 - 1 downto 0);
            else 
                line_buff_2_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            line_buff_2_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_ce, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_ce)))) then 
            line_buff_2_ce0 <= ap_const_logic_1;
        else 
            line_buff_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln984_1_fu_161_p0 <= mul_ln984_1_fu_161_p00(3 - 1 downto 0);
    mul_ln984_1_fu_161_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(line_buff_1_offset),12));
    mul_ln984_1_fu_161_p1 <= ap_const_lv12_1A2(10 - 1 downto 0);
    mul_ln984_2_fu_171_p0 <= mul_ln984_2_fu_171_p00(3 - 1 downto 0);
    mul_ln984_2_fu_171_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(line_buff_0_offset),12));
    mul_ln984_2_fu_171_p1 <= ap_const_lv12_1A2(10 - 1 downto 0);
    mul_ln984_fu_151_p0 <= mul_ln984_fu_151_p00(3 - 1 downto 0);
    mul_ln984_fu_151_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(line_buff_2_offset),12));
    mul_ln984_fu_151_p1 <= ap_const_lv12_1A2(10 - 1 downto 0);
    zext_ln984_10_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln984_5_fu_240_p2),64));
    zext_ln984_11_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln262_1_fu_250_p2),12));
    zext_ln984_12_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln984_6_reg_400),64));
    zext_ln984_13_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln984_7_reg_405),64));
    zext_ln984_14_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln984_8_reg_410),64));
    zext_ln984_3_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_port_reg_conv_count),12));
    zext_ln984_4_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln984_fu_181_p2),64));
    zext_ln984_5_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln984_1_fu_191_p2),64));
    zext_ln984_6_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln984_2_fu_201_p2),64));
    zext_ln984_7_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln262_reg_375),12));
    zext_ln984_8_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln984_3_fu_220_p2),64));
    zext_ln984_9_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln984_4_fu_230_p2),64));
end behav;
