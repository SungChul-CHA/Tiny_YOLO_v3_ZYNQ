-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yolo_upsamp_top is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inStream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    inStream_TVALID : IN STD_LOGIC;
    inStream_TREADY : OUT STD_LOGIC;
    inStream_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    inStream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    outStream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    outStream_TVALID : OUT STD_LOGIC;
    outStream_TREADY : IN STD_LOGIC;
    outStream_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    outStream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of yolo_upsamp_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "yolo_upsamp_top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=5445,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=2,HLS_SYN_FF=997,HLS_SYN_LUT=1520,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_D : STD_LOGIC_VECTOR (6 downto 0) := "0001101";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv13_1520 : STD_LOGIC_VECTOR (12 downto 0) := "1010100100000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv10_1A0 : STD_LOGIC_VECTOR (9 downto 0) := "0110100000";
    constant ap_const_lv9_D0 : STD_LOGIC_VECTOR (8 downto 0) := "011010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal inStream_V_data_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal inStream_V_data_0_vld_in : STD_LOGIC;
    signal inStream_V_data_0_vld_out : STD_LOGIC;
    signal inStream_V_data_0_ack_in : STD_LOGIC;
    signal inStream_V_data_0_ack_out : STD_LOGIC;
    signal inStream_V_data_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal inStream_V_data_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal inStream_V_data_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_data_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_data_0_sel : STD_LOGIC;
    signal inStream_V_data_0_load_A : STD_LOGIC;
    signal inStream_V_data_0_load_B : STD_LOGIC;
    signal inStream_V_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_data_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_keep_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_keep_V_0_vld_in : STD_LOGIC;
    signal inStream_V_keep_V_0_vld_out : STD_LOGIC;
    signal inStream_V_keep_V_0_ack_in : STD_LOGIC;
    signal inStream_V_keep_V_0_ack_out : STD_LOGIC;
    signal inStream_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_keep_V_0_sel : STD_LOGIC;
    signal inStream_V_keep_V_0_load_A : STD_LOGIC;
    signal inStream_V_keep_V_0_load_B : STD_LOGIC;
    signal inStream_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_strb_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_strb_V_0_vld_in : STD_LOGIC;
    signal inStream_V_strb_V_0_vld_out : STD_LOGIC;
    signal inStream_V_strb_V_0_ack_in : STD_LOGIC;
    signal inStream_V_strb_V_0_ack_out : STD_LOGIC;
    signal inStream_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_strb_V_0_sel : STD_LOGIC;
    signal inStream_V_strb_V_0_load_A : STD_LOGIC;
    signal inStream_V_strb_V_0_load_B : STD_LOGIC;
    signal inStream_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_user_V_0_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_vld_in : STD_LOGIC;
    signal inStream_V_user_V_0_vld_out : STD_LOGIC;
    signal inStream_V_user_V_0_ack_in : STD_LOGIC;
    signal inStream_V_user_V_0_ack_out : STD_LOGIC;
    signal inStream_V_user_V_0_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_user_V_0_sel : STD_LOGIC;
    signal inStream_V_user_V_0_load_A : STD_LOGIC;
    signal inStream_V_user_V_0_load_B : STD_LOGIC;
    signal inStream_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_id_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_V_id_V_0_vld_in : STD_LOGIC;
    signal inStream_V_id_V_0_vld_out : STD_LOGIC;
    signal inStream_V_id_V_0_ack_in : STD_LOGIC;
    signal inStream_V_id_V_0_ack_out : STD_LOGIC;
    signal inStream_V_id_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_V_id_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_id_V_0_sel : STD_LOGIC;
    signal inStream_V_id_V_0_load_A : STD_LOGIC;
    signal inStream_V_id_V_0_load_B : STD_LOGIC;
    signal inStream_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_dest_V_0_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_vld_in : STD_LOGIC;
    signal inStream_V_dest_V_0_vld_out : STD_LOGIC;
    signal inStream_V_dest_V_0_ack_in : STD_LOGIC;
    signal inStream_V_dest_V_0_ack_out : STD_LOGIC;
    signal inStream_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_dest_V_0_sel : STD_LOGIC;
    signal inStream_V_dest_V_0_load_A : STD_LOGIC;
    signal inStream_V_dest_V_0_load_B : STD_LOGIC;
    signal inStream_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal outStream_V_data_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal outStream_V_data_1_vld_in : STD_LOGIC;
    signal outStream_V_data_1_vld_out : STD_LOGIC;
    signal outStream_V_data_1_ack_in : STD_LOGIC;
    signal outStream_V_data_1_ack_out : STD_LOGIC;
    signal outStream_V_data_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal outStream_V_data_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal outStream_V_data_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_data_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_data_1_sel : STD_LOGIC;
    signal outStream_V_data_1_load_A : STD_LOGIC;
    signal outStream_V_data_1_load_B : STD_LOGIC;
    signal outStream_V_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_data_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_keep_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_keep_V_1_vld_in : STD_LOGIC;
    signal outStream_V_keep_V_1_vld_out : STD_LOGIC;
    signal outStream_V_keep_V_1_ack_in : STD_LOGIC;
    signal outStream_V_keep_V_1_ack_out : STD_LOGIC;
    signal outStream_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_keep_V_1_sel : STD_LOGIC;
    signal outStream_V_keep_V_1_load_A : STD_LOGIC;
    signal outStream_V_keep_V_1_load_B : STD_LOGIC;
    signal outStream_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_strb_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_strb_V_1_vld_in : STD_LOGIC;
    signal outStream_V_strb_V_1_vld_out : STD_LOGIC;
    signal outStream_V_strb_V_1_ack_in : STD_LOGIC;
    signal outStream_V_strb_V_1_ack_out : STD_LOGIC;
    signal outStream_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_strb_V_1_sel : STD_LOGIC;
    signal outStream_V_strb_V_1_load_A : STD_LOGIC;
    signal outStream_V_strb_V_1_load_B : STD_LOGIC;
    signal outStream_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_user_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_vld_in : STD_LOGIC;
    signal outStream_V_user_V_1_vld_out : STD_LOGIC;
    signal outStream_V_user_V_1_ack_in : STD_LOGIC;
    signal outStream_V_user_V_1_ack_out : STD_LOGIC;
    signal outStream_V_user_V_1_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_user_V_1_sel : STD_LOGIC;
    signal outStream_V_user_V_1_load_A : STD_LOGIC;
    signal outStream_V_user_V_1_load_B : STD_LOGIC;
    signal outStream_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_vld_in : STD_LOGIC;
    signal outStream_V_last_V_1_vld_out : STD_LOGIC;
    signal outStream_V_last_V_1_ack_in : STD_LOGIC;
    signal outStream_V_last_V_1_ack_out : STD_LOGIC;
    signal outStream_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_last_V_1_sel : STD_LOGIC;
    signal outStream_V_last_V_1_load_A : STD_LOGIC;
    signal outStream_V_last_V_1_load_B : STD_LOGIC;
    signal outStream_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_vld_in : STD_LOGIC;
    signal outStream_V_id_V_1_vld_out : STD_LOGIC;
    signal outStream_V_id_V_1_ack_in : STD_LOGIC;
    signal outStream_V_id_V_1_ack_out : STD_LOGIC;
    signal outStream_V_id_V_1_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_id_V_1_sel : STD_LOGIC;
    signal outStream_V_id_V_1_load_A : STD_LOGIC;
    signal outStream_V_id_V_1_load_B : STD_LOGIC;
    signal outStream_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_dest_V_1_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_vld_in : STD_LOGIC;
    signal outStream_V_dest_V_1_vld_out : STD_LOGIC;
    signal outStream_V_dest_V_1_ack_in : STD_LOGIC;
    signal outStream_V_dest_V_1_ack_out : STD_LOGIC;
    signal outStream_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_dest_V_1_sel : STD_LOGIC;
    signal outStream_V_dest_V_1_load_A : STD_LOGIC;
    signal outStream_V_dest_V_1_load_B : STD_LOGIC;
    signal outStream_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal inStream_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln15_reg_1308 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_reg_1308_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_1_reg_1389 : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal icmp_ln15_reg_1308_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal icmp_ln15_reg_1308_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten136_reg_387 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvar_flatten72_reg_398 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten27_reg_409 : STD_LOGIC_VECTOR (8 downto 0);
    signal row_idx_0_reg_420 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_stride_0_reg_431 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_assign_reg_442 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_453 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_stride_0_reg_464 : STD_LOGIC_VECTOR (1 downto 0);
    signal input_ch_idx_0_reg_475 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln9_fu_526_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln627_fu_532_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln10_fu_544_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln627_1_fu_550_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln11_fu_562_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln627_2_fu_568_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln12_fu_580_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln627_3_fu_586_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln12_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_predicate_op171_read_state8 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_io : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state10_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln15_fu_604_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln17_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_1317 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_reg_1326 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1337 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_10_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_10_reg_1342 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln17_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln17_reg_1351 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_fu_646_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln17_5_fu_660_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln15_fu_785_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal select_ln17_4_fu_876_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln52_4_fu_921_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln52_4_reg_1377 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln21_fu_972_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln21_reg_1383 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln21_1_fu_990_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_1_reg_1389_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_3_fu_1012_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal curr_output_last_V_fu_1038_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_output_last_V_reg_1398 : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_output_last_V_reg_1398_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal input_ch_idx_fu_1044_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln21_4_fu_1056_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal curr_input_data_sub_s_fu_1091_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_1_fu_1194_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter1_state7 : STD_LOGIC;
    signal line_buff_group_0_va_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal line_buff_group_0_va_ce0 : STD_LOGIC;
    signal line_buff_group_0_va_we0 : STD_LOGIC;
    signal line_buff_group_0_va_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_0_va_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_1_va_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal line_buff_group_1_va_ce0 : STD_LOGIC;
    signal line_buff_group_1_va_we0 : STD_LOGIC;
    signal line_buff_group_1_va_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_1_va_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_2_va_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal line_buff_group_2_va_ce0 : STD_LOGIC;
    signal line_buff_group_2_va_we0 : STD_LOGIC;
    signal line_buff_group_2_va_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_2_va_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_3_va_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal line_buff_group_3_va_ce0 : STD_LOGIC;
    signal line_buff_group_3_va_we0 : STD_LOGIC;
    signal line_buff_group_3_va_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_3_va_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln9_reg_299 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln9_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_310 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_ln10_reg_321 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln10_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul153_reg_332 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_ln11_reg_343 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln11_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul155_reg_354 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_ln12_reg_365 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_mul157_reg_376 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_col_assign_phi_fu_446_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_tmp_data_sub_data_0_s_phi_fu_489_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_data_sub_data_0_s_reg_486 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_data_sub_data_0_s_reg_486 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter2_tmp_data_sub_data_0_s_reg_486 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter3_tmp_data_sub_data_0_s_reg_486 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_tmp_data_sub_data_1_s_phi_fu_499_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_data_sub_data_1_s_reg_496 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_data_sub_data_1_s_reg_496 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter2_tmp_data_sub_data_1_s_reg_496 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter3_tmp_data_sub_data_1_s_reg_496 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_tmp_data_sub_data_2_s_phi_fu_509_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_data_sub_data_2_s_reg_506 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_data_sub_data_2_s_reg_506 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter2_tmp_data_sub_data_2_s_reg_506 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter3_tmp_data_sub_data_2_s_reg_506 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_curr_output_data_sub_3_phi_fu_519_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_curr_output_data_sub_3_reg_516 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_curr_output_data_sub_3_reg_516 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter2_curr_output_data_sub_3_reg_516 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter3_curr_output_data_sub_3_reg_516 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln203_1_fu_1132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln203_fu_1167_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_dest_V_fu_160 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_keep_V_fu_164 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_strb_V_fu_168 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_fu_172 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_id_V_fu_176 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln19_1_fu_640_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln17_1_fu_654_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln52_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_1_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln21_fu_690_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln17_fu_674_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_idx_fu_706_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln52_3_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_5_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_2_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_fu_712_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_stride_fu_792_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln17_1_fu_805_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_3_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_1_fu_725_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_6_fu_816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_11_fu_822_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_4_fu_737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln17_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_5_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln17_1_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_6_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_7_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_8_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_9_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln17_fu_798_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln17_3_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_fu_889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_1_fu_894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_idx_fu_883_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln52_7_fu_907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln17_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln17_1_fu_809_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln17_3_fu_851_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln17_1_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_1_fu_937_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln17_2_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_2_fu_899_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln52_13_fu_949_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln21_fu_961_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln21_1_fu_967_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_stride_fu_955_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln21_1_fu_980_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_1_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_5_fu_929_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_8_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_12_fu_943_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_2_fu_1004_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_4_fu_1020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_1_fu_1026_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_3_fu_913_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_2_fu_1032_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln17_2_fu_828_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln21_1_fu_1050_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1207_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1216_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1207_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1207_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1207_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln52_fu_1064_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1216_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1216_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1216_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_state11 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1207_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1216_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_condition_1185 : BOOLEAN;

    component yolo_upsamp_top_mac_muladd_5ns_4ns_4ns_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component yolo_upsamp_top_mac_muladd_4ns_5ns_4ns_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component yolo_upsamp_top_line_buff_group_0_va IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component yolo_upsamp_top_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    yolo_upsamp_top_CTRL_BUS_s_axi_U : component yolo_upsamp_top_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    line_buff_group_0_va_U : component yolo_upsamp_top_line_buff_group_0_va
    generic map (
        DataWidth => 16,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buff_group_0_va_address0,
        ce0 => line_buff_group_0_va_ce0,
        we0 => line_buff_group_0_va_we0,
        d0 => line_buff_group_0_va_d0,
        q0 => line_buff_group_0_va_q0);

    line_buff_group_1_va_U : component yolo_upsamp_top_line_buff_group_0_va
    generic map (
        DataWidth => 16,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buff_group_1_va_address0,
        ce0 => line_buff_group_1_va_ce0,
        we0 => line_buff_group_1_va_we0,
        d0 => line_buff_group_1_va_d0,
        q0 => line_buff_group_1_va_q0);

    line_buff_group_2_va_U : component yolo_upsamp_top_line_buff_group_0_va
    generic map (
        DataWidth => 16,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buff_group_2_va_address0,
        ce0 => line_buff_group_2_va_ce0,
        we0 => line_buff_group_2_va_we0,
        d0 => line_buff_group_2_va_d0,
        q0 => line_buff_group_2_va_q0);

    line_buff_group_3_va_U : component yolo_upsamp_top_line_buff_group_0_va
    generic map (
        DataWidth => 16,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buff_group_3_va_address0,
        ce0 => line_buff_group_3_va_ce0,
        we0 => line_buff_group_3_va_we0,
        d0 => line_buff_group_3_va_d0,
        q0 => line_buff_group_3_va_q0);

    yolo_upsamp_top_mac_muladd_5ns_4ns_4ns_8_1_1_U1 : component yolo_upsamp_top_mac_muladd_5ns_4ns_4ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_1207_p0,
        din1 => grp_fu_1207_p1,
        din2 => grp_fu_1207_p2,
        dout => grp_fu_1207_p3);

    yolo_upsamp_top_mac_muladd_4ns_5ns_4ns_8_1_1_U2 : component yolo_upsamp_top_mac_muladd_4ns_5ns_4ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_1216_p0,
        din1 => grp_fu_1216_p1,
        din2 => grp_fu_1216_p2,
        dout => grp_fu_1216_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((icmp_ln15_fu_598_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln12_fu_592_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state7)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((icmp_ln12_fu_592_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_data_0_ack_out = ap_const_logic_1) and (inStream_V_data_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_data_0_sel_rd <= not(inStream_V_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_data_0_ack_in = ap_const_logic_1) and (inStream_V_data_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_data_0_sel_wr <= not(inStream_V_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_data_0_state = ap_const_lv2_2) and (inStream_V_data_0_vld_in = ap_const_logic_0)) or ((inStream_V_data_0_state = ap_const_lv2_3) and (inStream_V_data_0_vld_in = ap_const_logic_0) and (inStream_V_data_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_data_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_data_0_state = ap_const_lv2_1) and (inStream_V_data_0_ack_out = ap_const_logic_0)) or ((inStream_V_data_0_state = ap_const_lv2_3) and (inStream_V_data_0_ack_out = ap_const_logic_0) and (inStream_V_data_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_data_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_data_0_vld_in = ap_const_logic_0) and (inStream_V_data_0_ack_out = ap_const_logic_1))) and not(((inStream_V_data_0_ack_out = ap_const_logic_0) and (inStream_V_data_0_vld_in = ap_const_logic_1))) and (inStream_V_data_0_state = ap_const_lv2_3)) or ((inStream_V_data_0_state = ap_const_lv2_1) and (inStream_V_data_0_ack_out = ap_const_logic_1)) or ((inStream_V_data_0_state = ap_const_lv2_2) and (inStream_V_data_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_data_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_dest_V_0_ack_out = ap_const_logic_1) and (inStream_V_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_dest_V_0_sel_rd <= not(inStream_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_dest_V_0_ack_in = ap_const_logic_1) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_dest_V_0_sel_wr <= not(inStream_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_dest_V_0_state = ap_const_lv2_2) and (inStream_V_dest_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_dest_V_0_state = ap_const_lv2_3) and (inStream_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_dest_V_0_state = ap_const_lv2_1) and (inStream_V_dest_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_dest_V_0_state = ap_const_lv2_3) and (inStream_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1))) and (inStream_V_dest_V_0_state = ap_const_lv2_3)) or ((inStream_V_dest_V_0_state = ap_const_lv2_1) and (inStream_V_dest_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_dest_V_0_state = ap_const_lv2_2) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_id_V_0_ack_out = ap_const_logic_1) and (inStream_V_id_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_id_V_0_sel_rd <= not(inStream_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_id_V_0_ack_in = ap_const_logic_1) and (inStream_V_id_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_id_V_0_sel_wr <= not(inStream_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_id_V_0_state = ap_const_lv2_2) and (inStream_V_id_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_id_V_0_state = ap_const_lv2_3) and (inStream_V_id_V_0_vld_in = ap_const_logic_0) and (inStream_V_id_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_id_V_0_state = ap_const_lv2_1) and (inStream_V_id_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_id_V_0_state = ap_const_lv2_3) and (inStream_V_id_V_0_ack_out = ap_const_logic_0) and (inStream_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_id_V_0_vld_in = ap_const_logic_0) and (inStream_V_id_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_id_V_0_ack_out = ap_const_logic_0) and (inStream_V_id_V_0_vld_in = ap_const_logic_1))) and (inStream_V_id_V_0_state = ap_const_lv2_3)) or ((inStream_V_id_V_0_state = ap_const_lv2_1) and (inStream_V_id_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_id_V_0_state = ap_const_lv2_2) and (inStream_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_keep_V_0_ack_out = ap_const_logic_1) and (inStream_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_keep_V_0_sel_rd <= not(inStream_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_keep_V_0_ack_in = ap_const_logic_1) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_keep_V_0_sel_wr <= not(inStream_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_keep_V_0_state = ap_const_lv2_2) and (inStream_V_keep_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_keep_V_0_state = ap_const_lv2_3) and (inStream_V_keep_V_0_vld_in = ap_const_logic_0) and (inStream_V_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_keep_V_0_state = ap_const_lv2_1) and (inStream_V_keep_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_keep_V_0_state = ap_const_lv2_3) and (inStream_V_keep_V_0_ack_out = ap_const_logic_0) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_keep_V_0_vld_in = ap_const_logic_0) and (inStream_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_keep_V_0_ack_out = ap_const_logic_0) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1))) and (inStream_V_keep_V_0_state = ap_const_lv2_3)) or ((inStream_V_keep_V_0_state = ap_const_lv2_1) and (inStream_V_keep_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_keep_V_0_state = ap_const_lv2_2) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_strb_V_0_ack_out = ap_const_logic_1) and (inStream_V_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_strb_V_0_sel_rd <= not(inStream_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_strb_V_0_ack_in = ap_const_logic_1) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_strb_V_0_sel_wr <= not(inStream_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_strb_V_0_state = ap_const_lv2_2) and (inStream_V_strb_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_strb_V_0_state = ap_const_lv2_3) and (inStream_V_strb_V_0_vld_in = ap_const_logic_0) and (inStream_V_strb_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_strb_V_0_state = ap_const_lv2_1) and (inStream_V_strb_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_strb_V_0_state = ap_const_lv2_3) and (inStream_V_strb_V_0_ack_out = ap_const_logic_0) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_strb_V_0_vld_in = ap_const_logic_0) and (inStream_V_strb_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_strb_V_0_ack_out = ap_const_logic_0) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1))) and (inStream_V_strb_V_0_state = ap_const_lv2_3)) or ((inStream_V_strb_V_0_state = ap_const_lv2_1) and (inStream_V_strb_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_strb_V_0_state = ap_const_lv2_2) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_user_V_0_ack_out = ap_const_logic_1) and (inStream_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_user_V_0_sel_rd <= not(inStream_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_user_V_0_ack_in = ap_const_logic_1) and (inStream_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_user_V_0_sel_wr <= not(inStream_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_user_V_0_state = ap_const_lv2_2) and (inStream_V_user_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_user_V_0_state = ap_const_lv2_3) and (inStream_V_user_V_0_vld_in = ap_const_logic_0) and (inStream_V_user_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_user_V_0_state = ap_const_lv2_1) and (inStream_V_user_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_user_V_0_state = ap_const_lv2_3) and (inStream_V_user_V_0_ack_out = ap_const_logic_0) and (inStream_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_user_V_0_vld_in = ap_const_logic_0) and (inStream_V_user_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_user_V_0_ack_out = ap_const_logic_0) and (inStream_V_user_V_0_vld_in = ap_const_logic_1))) and (inStream_V_user_V_0_state = ap_const_lv2_3)) or ((inStream_V_user_V_0_state = ap_const_lv2_1) and (inStream_V_user_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_user_V_0_state = ap_const_lv2_2) and (inStream_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_data_1_ack_out = ap_const_logic_1) and (outStream_V_data_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_data_1_sel_rd <= not(outStream_V_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_data_1_ack_in = ap_const_logic_1) and (outStream_V_data_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_data_1_sel_wr <= not(outStream_V_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_data_1_state = ap_const_lv2_2) and (outStream_V_data_1_vld_in = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_V_data_1_vld_in = ap_const_logic_0) and (outStream_V_data_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_data_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_data_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_data_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_data_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_data_1_vld_in = ap_const_logic_0) and (outStream_V_data_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_data_1_vld_in = ap_const_logic_1))) and (outStream_V_data_1_state = ap_const_lv2_3)) or ((outStream_V_data_1_state = ap_const_lv2_1) and (outStream_V_data_1_ack_out = ap_const_logic_1)) or ((outStream_V_data_1_state = ap_const_lv2_2) and (outStream_V_data_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_data_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_dest_V_1_ack_out = ap_const_logic_1) and (outStream_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_dest_V_1_sel_rd <= not(outStream_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_dest_V_1_ack_in = ap_const_logic_1) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_dest_V_1_sel_wr <= not(outStream_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_dest_V_1_state = ap_const_lv2_2) and (outStream_V_dest_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_V_dest_V_1_vld_in = ap_const_logic_0) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_dest_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_dest_V_1_vld_in = ap_const_logic_0) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1))) and (outStream_V_dest_V_1_state = ap_const_lv2_3)) or ((outStream_V_dest_V_1_state = ap_const_lv2_1) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_dest_V_1_state = ap_const_lv2_2) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_id_V_1_ack_out = ap_const_logic_1) and (outStream_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_id_V_1_sel_rd <= not(outStream_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_id_V_1_ack_in = ap_const_logic_1) and (outStream_V_id_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_id_V_1_sel_wr <= not(outStream_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_id_V_1_state = ap_const_lv2_2) and (outStream_V_id_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_V_id_V_1_vld_in = ap_const_logic_0) and (outStream_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_id_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_id_V_1_vld_in = ap_const_logic_0) and (outStream_V_id_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_id_V_1_vld_in = ap_const_logic_1))) and (outStream_V_id_V_1_state = ap_const_lv2_3)) or ((outStream_V_id_V_1_state = ap_const_lv2_1) and (outStream_V_id_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_id_V_1_state = ap_const_lv2_2) and (outStream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_keep_V_1_ack_out = ap_const_logic_1) and (outStream_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_keep_V_1_sel_rd <= not(outStream_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_keep_V_1_ack_in = ap_const_logic_1) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_keep_V_1_sel_wr <= not(outStream_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_keep_V_1_state = ap_const_lv2_2) and (outStream_V_keep_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_V_keep_V_1_vld_in = ap_const_logic_0) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_keep_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_keep_V_1_vld_in = ap_const_logic_0) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1))) and (outStream_V_keep_V_1_state = ap_const_lv2_3)) or ((outStream_V_keep_V_1_state = ap_const_lv2_1) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_keep_V_1_state = ap_const_lv2_2) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_last_V_1_ack_out = ap_const_logic_1) and (outStream_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_last_V_1_sel_rd <= not(outStream_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_last_V_1_ack_in = ap_const_logic_1) and (outStream_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_last_V_1_sel_wr <= not(outStream_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_last_V_1_state = ap_const_lv2_2) and (outStream_V_last_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_V_last_V_1_vld_in = ap_const_logic_0) and (outStream_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_last_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_last_V_1_vld_in = ap_const_logic_0) and (outStream_V_last_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_last_V_1_vld_in = ap_const_logic_1))) and (outStream_V_last_V_1_state = ap_const_lv2_3)) or ((outStream_V_last_V_1_state = ap_const_lv2_1) and (outStream_V_last_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_last_V_1_state = ap_const_lv2_2) and (outStream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_strb_V_1_ack_out = ap_const_logic_1) and (outStream_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_strb_V_1_sel_rd <= not(outStream_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_strb_V_1_ack_in = ap_const_logic_1) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_strb_V_1_sel_wr <= not(outStream_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_strb_V_1_state = ap_const_lv2_2) and (outStream_V_strb_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_V_strb_V_1_vld_in = ap_const_logic_0) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_strb_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_strb_V_1_vld_in = ap_const_logic_0) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1))) and (outStream_V_strb_V_1_state = ap_const_lv2_3)) or ((outStream_V_strb_V_1_state = ap_const_lv2_1) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_strb_V_1_state = ap_const_lv2_2) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_user_V_1_ack_out = ap_const_logic_1) and (outStream_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_user_V_1_sel_rd <= not(outStream_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_user_V_1_ack_in = ap_const_logic_1) and (outStream_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_user_V_1_sel_wr <= not(outStream_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_user_V_1_state = ap_const_lv2_2) and (outStream_V_user_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_V_user_V_1_vld_in = ap_const_logic_0) and (outStream_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_user_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_user_V_1_vld_in = ap_const_logic_0) and (outStream_V_user_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_user_V_1_vld_in = ap_const_logic_1))) and (outStream_V_user_V_1_state = ap_const_lv2_3)) or ((outStream_V_user_V_1_state = ap_const_lv2_1) and (outStream_V_user_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_user_V_1_state = ap_const_lv2_2) and (outStream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter3_curr_output_data_sub_3_reg_516_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if (((select_ln21_1_reg_1389 = ap_const_lv1_0) and (icmp_ln15_reg_1308_pp0_iter1_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter3_curr_output_data_sub_3_reg_516 <= inStream_V_data_0_data_out(63 downto 48);
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter3_curr_output_data_sub_3_reg_516 <= ap_phi_reg_pp0_iter2_curr_output_data_sub_3_reg_516;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter3_tmp_data_sub_data_0_s_reg_486_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if (((select_ln21_1_reg_1389 = ap_const_lv1_0) and (icmp_ln15_reg_1308_pp0_iter1_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter3_tmp_data_sub_data_0_s_reg_486 <= curr_input_data_sub_s_fu_1091_p1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter3_tmp_data_sub_data_0_s_reg_486 <= ap_phi_reg_pp0_iter2_tmp_data_sub_data_0_s_reg_486;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter3_tmp_data_sub_data_1_s_reg_496_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if (((select_ln21_1_reg_1389 = ap_const_lv1_0) and (icmp_ln15_reg_1308_pp0_iter1_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter3_tmp_data_sub_data_1_s_reg_496 <= inStream_V_data_0_data_out(31 downto 16);
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter3_tmp_data_sub_data_1_s_reg_496 <= ap_phi_reg_pp0_iter2_tmp_data_sub_data_1_s_reg_496;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter3_tmp_data_sub_data_2_s_reg_506_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if (((select_ln21_1_reg_1389 = ap_const_lv1_0) and (icmp_ln15_reg_1308_pp0_iter1_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter3_tmp_data_sub_data_2_s_reg_506 <= inStream_V_data_0_data_out(47 downto 32);
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter3_tmp_data_sub_data_2_s_reg_506 <= ap_phi_reg_pp0_iter2_tmp_data_sub_data_2_s_reg_506;
                end if;
            end if; 
        end if;
    end process;

    col_assign_reg_442_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_592_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                col_assign_reg_442 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_1308_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                col_assign_reg_442 <= select_ln52_4_reg_1377;
            end if; 
        end if;
    end process;

    col_stride_0_reg_464_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_592_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                col_stride_0_reg_464 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_1308 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                col_stride_0_reg_464 <= select_ln21_3_fu_1012_p3;
            end if; 
        end if;
    end process;

    indvar_flatten136_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_592_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                indvar_flatten136_reg_387 <= ap_const_lv13_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_fu_598_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten136_reg_387 <= add_ln15_fu_604_p2;
            end if; 
        end if;
    end process;

    indvar_flatten27_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_592_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                indvar_flatten27_reg_409 <= ap_const_lv9_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_fu_598_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten27_reg_409 <= select_ln19_fu_646_p3;
            end if; 
        end if;
    end process;

    indvar_flatten72_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_592_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                indvar_flatten72_reg_398 <= ap_const_lv10_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_fu_598_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten72_reg_398 <= select_ln17_5_fu_660_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_453_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_592_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                indvar_flatten_reg_453 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_1308 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_453 <= select_ln21_4_fu_1056_p3;
            end if; 
        end if;
    end process;

    input_ch_idx_0_reg_475_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_592_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                input_ch_idx_0_reg_475 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_1308 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                input_ch_idx_0_reg_475 <= input_ch_idx_fu_1044_p2;
            end if; 
        end if;
    end process;

    phi_ln10_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_538_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln10_reg_321 <= ap_const_lv3_0;
            elsif (((icmp_ln10_fu_556_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln10_reg_321 <= add_ln10_fu_544_p2;
            end if; 
        end if;
    end process;

    phi_ln11_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_556_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln11_reg_343 <= ap_const_lv3_0;
            elsif (((icmp_ln11_fu_574_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_ln11_reg_343 <= add_ln11_fu_562_p2;
            end if; 
        end if;
    end process;

    phi_ln12_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_ln12_reg_365 <= ap_const_lv3_0;
            elsif (((icmp_ln12_fu_592_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_ln12_reg_365 <= add_ln12_fu_580_p2;
            end if; 
        end if;
    end process;

    phi_ln9_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_538_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln9_reg_299 <= add_ln9_fu_526_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_ln9_reg_299 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    phi_mul153_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_538_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul153_reg_332 <= ap_const_lv7_0;
            elsif (((icmp_ln10_fu_556_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul153_reg_332 <= add_ln627_1_fu_550_p2;
            end if; 
        end if;
    end process;

    phi_mul155_reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_556_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul155_reg_354 <= ap_const_lv7_0;
            elsif (((icmp_ln11_fu_574_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul155_reg_354 <= add_ln627_2_fu_568_p2;
            end if; 
        end if;
    end process;

    phi_mul157_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul157_reg_376 <= ap_const_lv7_0;
            elsif (((icmp_ln12_fu_592_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_mul157_reg_376 <= add_ln627_3_fu_586_p2;
            end if; 
        end if;
    end process;

    phi_mul_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_538_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_310 <= add_ln627_fu_532_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_310 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    row_idx_0_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_592_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                row_idx_0_reg_420 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_1308 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                row_idx_0_reg_420 <= select_ln15_fu_785_p3;
            end if; 
        end if;
    end process;

    row_stride_0_reg_431_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_592_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                row_stride_0_reg_431 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_1308 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                row_stride_0_reg_431 <= select_ln17_4_fu_876_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_fu_598_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln52_10_reg_1342 <= and_ln52_10_fu_628_p2;
                icmp_ln17_reg_1317 <= icmp_ln17_fu_610_p2;
                icmp_ln19_reg_1337 <= icmp_ln19_fu_622_p2;
                or_ln17_reg_1351 <= or_ln17_fu_634_p2;
                xor_ln52_reg_1326 <= xor_ln52_fu_616_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter1_curr_output_data_sub_3_reg_516 <= ap_phi_reg_pp0_iter0_curr_output_data_sub_3_reg_516;
                ap_phi_reg_pp0_iter1_tmp_data_sub_data_0_s_reg_486 <= ap_phi_reg_pp0_iter0_tmp_data_sub_data_0_s_reg_486;
                ap_phi_reg_pp0_iter1_tmp_data_sub_data_1_s_reg_496 <= ap_phi_reg_pp0_iter0_tmp_data_sub_data_1_s_reg_496;
                ap_phi_reg_pp0_iter1_tmp_data_sub_data_2_s_reg_506 <= ap_phi_reg_pp0_iter0_tmp_data_sub_data_2_s_reg_506;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter2_curr_output_data_sub_3_reg_516 <= ap_phi_reg_pp0_iter1_curr_output_data_sub_3_reg_516;
                ap_phi_reg_pp0_iter2_tmp_data_sub_data_0_s_reg_486 <= ap_phi_reg_pp0_iter1_tmp_data_sub_data_0_s_reg_486;
                ap_phi_reg_pp0_iter2_tmp_data_sub_data_1_s_reg_496 <= ap_phi_reg_pp0_iter1_tmp_data_sub_data_1_s_reg_496;
                ap_phi_reg_pp0_iter2_tmp_data_sub_data_2_s_reg_506 <= ap_phi_reg_pp0_iter1_tmp_data_sub_data_2_s_reg_506;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_1308 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                curr_output_last_V_reg_1398 <= curr_output_last_V_fu_1038_p2;
                select_ln21_1_reg_1389 <= select_ln21_1_fu_990_p3;
                select_ln21_reg_1383 <= select_ln21_fu_972_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                curr_output_last_V_reg_1398_pp0_iter2_reg <= curr_output_last_V_reg_1398;
                icmp_ln15_reg_1308_pp0_iter2_reg <= icmp_ln15_reg_1308_pp0_iter1_reg;
                icmp_ln15_reg_1308_pp0_iter3_reg <= icmp_ln15_reg_1308_pp0_iter2_reg;
                select_ln21_1_reg_1389_pp0_iter2_reg <= select_ln21_1_reg_1389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln15_reg_1308 <= icmp_ln15_fu_598_p2;
                icmp_ln15_reg_1308_pp0_iter1_reg <= icmp_ln15_reg_1308;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_data_0_load_A = ap_const_logic_1)) then
                inStream_V_data_0_payload_A <= inStream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_data_0_load_B = ap_const_logic_1)) then
                inStream_V_data_0_payload_B <= inStream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_dest_V_0_load_A = ap_const_logic_1)) then
                inStream_V_dest_V_0_payload_A <= inStream_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_dest_V_0_load_B = ap_const_logic_1)) then
                inStream_V_dest_V_0_payload_B <= inStream_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_id_V_0_load_A = ap_const_logic_1)) then
                inStream_V_id_V_0_payload_A <= inStream_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_id_V_0_load_B = ap_const_logic_1)) then
                inStream_V_id_V_0_payload_B <= inStream_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_keep_V_0_load_A = ap_const_logic_1)) then
                inStream_V_keep_V_0_payload_A <= inStream_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_keep_V_0_load_B = ap_const_logic_1)) then
                inStream_V_keep_V_0_payload_B <= inStream_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_strb_V_0_load_A = ap_const_logic_1)) then
                inStream_V_strb_V_0_payload_A <= inStream_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_strb_V_0_load_B = ap_const_logic_1)) then
                inStream_V_strb_V_0_payload_B <= inStream_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_user_V_0_load_A = ap_const_logic_1)) then
                inStream_V_user_V_0_payload_A <= inStream_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_user_V_0_load_B = ap_const_logic_1)) then
                inStream_V_user_V_0_payload_B <= inStream_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_data_1_load_A = ap_const_logic_1)) then
                outStream_V_data_1_payload_A <= tmp_data_1_fu_1194_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_data_1_load_B = ap_const_logic_1)) then
                outStream_V_data_1_payload_B <= tmp_data_1_fu_1194_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_dest_V_1_load_A = ap_const_logic_1)) then
                outStream_V_dest_V_1_payload_A <= tmp_dest_V_fu_160;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_dest_V_1_load_B = ap_const_logic_1)) then
                outStream_V_dest_V_1_payload_B <= tmp_dest_V_fu_160;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_id_V_1_load_A = ap_const_logic_1)) then
                outStream_V_id_V_1_payload_A <= tmp_id_V_fu_176;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_id_V_1_load_B = ap_const_logic_1)) then
                outStream_V_id_V_1_payload_B <= tmp_id_V_fu_176;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_keep_V_1_load_A = ap_const_logic_1)) then
                outStream_V_keep_V_1_payload_A <= tmp_keep_V_fu_164;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_keep_V_1_load_B = ap_const_logic_1)) then
                outStream_V_keep_V_1_payload_B <= tmp_keep_V_fu_164;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_last_V_1_load_A = ap_const_logic_1)) then
                outStream_V_last_V_1_payload_A <= curr_output_last_V_reg_1398_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_last_V_1_load_B = ap_const_logic_1)) then
                outStream_V_last_V_1_payload_B <= curr_output_last_V_reg_1398_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_strb_V_1_load_A = ap_const_logic_1)) then
                outStream_V_strb_V_1_payload_A <= tmp_strb_V_fu_168;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_strb_V_1_load_B = ap_const_logic_1)) then
                outStream_V_strb_V_1_payload_B <= tmp_strb_V_fu_168;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_user_V_1_load_A = ap_const_logic_1)) then
                outStream_V_user_V_1_payload_A <= tmp_user_V_fu_172;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_user_V_1_load_B = ap_const_logic_1)) then
                outStream_V_user_V_1_payload_B <= tmp_user_V_fu_172;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_1308 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                select_ln52_4_reg_1377 <= select_ln52_4_fu_921_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln21_1_reg_1389 = ap_const_lv1_0) and (icmp_ln15_reg_1308_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                tmp_dest_V_fu_160 <= inStream_V_dest_V_0_data_out;
                tmp_id_V_fu_176 <= inStream_V_id_V_0_data_out;
                tmp_keep_V_fu_164 <= inStream_V_keep_V_0_data_out;
                tmp_strb_V_fu_168 <= inStream_V_strb_V_0_data_out;
                tmp_user_V_fu_172 <= inStream_V_user_V_0_data_out;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, outStream_TREADY, outStream_V_data_1_state, outStream_V_keep_V_1_state, outStream_V_strb_V_1_state, outStream_V_user_V_1_state, outStream_V_last_V_1_state, outStream_V_id_V_1_state, outStream_V_dest_V_1_state, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln12_fu_592_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln9_fu_538_p2, icmp_ln10_fu_556_p2, icmp_ln11_fu_574_p2, ap_CS_fsm_state11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln9_fu_538_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln10_fu_556_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln11_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln12_fu_592_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                if ((not(((outStream_V_dest_V_1_state = ap_const_lv2_1) or (outStream_V_id_V_1_state = ap_const_lv2_1) or (outStream_V_last_V_1_state = ap_const_lv2_1) or (outStream_V_user_V_1_state = ap_const_lv2_1) or (outStream_V_strb_V_1_state = ap_const_lv2_1) or (outStream_V_keep_V_1_state = ap_const_lv2_1) or (outStream_V_data_1_state = ap_const_lv2_1) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln10_fu_544_p2 <= std_logic_vector(unsigned(phi_ln10_reg_321) + unsigned(ap_const_lv3_1));
    add_ln11_fu_562_p2 <= std_logic_vector(unsigned(phi_ln11_reg_343) + unsigned(ap_const_lv3_1));
    add_ln12_fu_580_p2 <= std_logic_vector(unsigned(phi_ln12_reg_365) + unsigned(ap_const_lv3_1));
    add_ln15_fu_604_p2 <= std_logic_vector(unsigned(ap_const_lv13_1) + unsigned(indvar_flatten136_reg_387));
    add_ln17_1_fu_654_p2 <= std_logic_vector(unsigned(indvar_flatten72_reg_398) + unsigned(ap_const_lv10_1));
    add_ln19_1_fu_640_p2 <= std_logic_vector(unsigned(indvar_flatten27_reg_409) + unsigned(ap_const_lv9_1));
    add_ln21_1_fu_1050_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_453) + unsigned(ap_const_lv6_1));
    add_ln627_1_fu_550_p2 <= std_logic_vector(unsigned(phi_mul153_reg_332) + unsigned(ap_const_lv7_D));
    add_ln627_2_fu_568_p2 <= std_logic_vector(unsigned(phi_mul155_reg_354) + unsigned(ap_const_lv7_D));
    add_ln627_3_fu_586_p2 <= std_logic_vector(unsigned(phi_mul157_reg_376) + unsigned(ap_const_lv7_D));
    add_ln627_fu_532_p2 <= std_logic_vector(unsigned(phi_mul_reg_310) + unsigned(ap_const_lv7_D));
    add_ln9_fu_526_p2 <= std_logic_vector(unsigned(phi_ln9_reg_299) + unsigned(ap_const_lv3_1));
    and_ln17_1_fu_858_p2 <= (or_ln17_1_fu_840_p2 and and_ln52_7_fu_758_p2);
    and_ln17_2_fu_864_p2 <= (or_ln17_1_fu_840_p2 and and_ln52_8_fu_769_p2);
    and_ln17_3_fu_870_p2 <= (or_ln17_1_fu_840_p2 and and_ln52_9_fu_780_p2);
    and_ln17_fu_845_p2 <= (or_ln17_1_fu_840_p2 and and_ln52_5_fu_748_p2);
    and_ln52_10_fu_628_p2 <= (xor_ln52_fu_616_p2 and icmp_ln19_fu_622_p2);
    and_ln52_11_fu_822_p2 <= (select_ln52_1_fu_725_p3 and icmp_ln52_6_fu_816_p2);
    and_ln52_12_fu_943_p2 <= (xor_ln52_1_fu_937_p2 and and_ln17_1_fu_858_p2);
    and_ln52_13_fu_949_p2 <= (xor_ln52_1_fu_937_p2 and and_ln17_2_fu_864_p2);
    and_ln52_1_fu_1026_p2 <= (select_ln21_2_fu_1004_p3 and icmp_ln52_4_fu_1020_p2);
    and_ln52_2_fu_1032_p2 <= (select_ln52_3_fu_913_p3 and and_ln52_1_fu_1026_p2);
    and_ln52_3_fu_732_p2 <= (xor_ln52_reg_1326 and trunc_ln17_fu_674_p1);
    and_ln52_4_fu_737_p2 <= (xor_ln52_reg_1326 and and_ln52_fu_684_p2);
    and_ln52_5_fu_748_p2 <= (xor_ln52_reg_1326 and icmp_ln52_5_fu_742_p2);
    and_ln52_6_fu_753_p2 <= (xor_ln52_reg_1326 and or_ln26_fu_694_p2);
    and_ln52_7_fu_758_p2 <= (xor_ln52_reg_1326 and icmp_ln52_2_fu_700_p2);
    and_ln52_8_fu_769_p2 <= (xor_ln52_reg_1326 and icmp_ln23_fu_763_p2);
    and_ln52_9_fu_780_p2 <= (xor_ln52_reg_1326 and icmp_ln21_fu_774_p2);
    and_ln52_fu_684_p2 <= (icmp_ln52_fu_668_p2 and icmp_ln52_1_fu_678_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(6);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(inStream_V_data_0_vld_out, ap_enable_reg_pp0_iter2, ap_predicate_op171_read_state8)
    begin
                ap_block_pp0_stage0_01001 <= ((inStream_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op171_read_state8 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(inStream_V_data_0_vld_out, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_predicate_op171_read_state8, ap_block_state9_io, ap_block_state10_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state10_io) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((inStream_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op171_read_state8 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(inStream_V_data_0_vld_out, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_predicate_op171_read_state8, ap_block_state9_io, ap_block_state10_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state10_io) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((inStream_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op171_read_state8 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_state10_io_assign_proc : process(outStream_V_data_1_ack_in, icmp_ln15_reg_1308_pp0_iter3_reg)
    begin
                ap_block_state10_io <= ((icmp_ln15_reg_1308_pp0_iter3_reg = ap_const_lv1_0) and (outStream_V_data_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_assign_proc : process(outStream_TREADY, outStream_V_data_1_state, outStream_V_keep_V_1_state, outStream_V_strb_V_1_state, outStream_V_user_V_1_state, outStream_V_last_V_1_state, outStream_V_id_V_1_state, outStream_V_dest_V_1_state)
    begin
                ap_block_state11 <= ((outStream_V_dest_V_1_state = ap_const_lv2_1) or (outStream_V_id_V_1_state = ap_const_lv2_1) or (outStream_V_last_V_1_state = ap_const_lv2_1) or (outStream_V_user_V_1_state = ap_const_lv2_1) or (outStream_V_strb_V_1_state = ap_const_lv2_1) or (outStream_V_keep_V_1_state = ap_const_lv2_1) or (outStream_V_data_1_state = ap_const_lv2_1) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)));
    end process;

        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage0_iter2_assign_proc : process(inStream_V_data_0_vld_out, ap_predicate_op171_read_state8)
    begin
                ap_block_state8_pp0_stage0_iter2 <= ((inStream_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op171_read_state8 = ap_const_boolean_1));
    end process;


    ap_block_state9_io_assign_proc : process(outStream_V_data_1_ack_in, icmp_ln15_reg_1308_pp0_iter2_reg)
    begin
                ap_block_state9_io <= ((icmp_ln15_reg_1308_pp0_iter2_reg = ap_const_lv1_0) and (outStream_V_data_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state9_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1185_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln15_reg_1308_pp0_iter1_reg)
    begin
                ap_condition_1185 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln15_reg_1308_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_condition_pp0_exit_iter1_state7_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter1_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(outStream_TREADY, outStream_V_data_1_state, outStream_V_keep_V_1_state, outStream_V_strb_V_1_state, outStream_V_user_V_1_state, outStream_V_last_V_1_state, outStream_V_id_V_1_state, outStream_V_dest_V_1_state, ap_CS_fsm_state11)
    begin
        if ((not(((outStream_V_dest_V_1_state = ap_const_lv2_1) or (outStream_V_id_V_1_state = ap_const_lv2_1) or (outStream_V_last_V_1_state = ap_const_lv2_1) or (outStream_V_user_V_1_state = ap_const_lv2_1) or (outStream_V_strb_V_1_state = ap_const_lv2_1) or (outStream_V_keep_V_1_state = ap_const_lv2_1) or (outStream_V_data_1_state = ap_const_lv2_1) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_col_assign_phi_fu_446_p4_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln15_reg_1308_pp0_iter1_reg, col_assign_reg_442, select_ln52_4_reg_1377)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln15_reg_1308_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_col_assign_phi_fu_446_p4 <= select_ln52_4_reg_1377;
        else 
            ap_phi_mux_col_assign_phi_fu_446_p4 <= col_assign_reg_442;
        end if; 
    end process;


    ap_phi_mux_curr_output_data_sub_3_phi_fu_519_p4_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln15_reg_1308_pp0_iter2_reg, select_ln21_1_reg_1389_pp0_iter2_reg, line_buff_group_3_va_q0, ap_phi_reg_pp0_iter3_curr_output_data_sub_3_reg_516)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (select_ln21_1_reg_1389_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln15_reg_1308_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_phi_mux_curr_output_data_sub_3_phi_fu_519_p4 <= line_buff_group_3_va_q0;
        else 
            ap_phi_mux_curr_output_data_sub_3_phi_fu_519_p4 <= ap_phi_reg_pp0_iter3_curr_output_data_sub_3_reg_516;
        end if; 
    end process;


    ap_phi_mux_tmp_data_sub_data_0_s_phi_fu_489_p4_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln15_reg_1308_pp0_iter2_reg, select_ln21_1_reg_1389_pp0_iter2_reg, line_buff_group_0_va_q0, ap_phi_reg_pp0_iter3_tmp_data_sub_data_0_s_reg_486)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (select_ln21_1_reg_1389_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln15_reg_1308_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_phi_mux_tmp_data_sub_data_0_s_phi_fu_489_p4 <= line_buff_group_0_va_q0;
        else 
            ap_phi_mux_tmp_data_sub_data_0_s_phi_fu_489_p4 <= ap_phi_reg_pp0_iter3_tmp_data_sub_data_0_s_reg_486;
        end if; 
    end process;


    ap_phi_mux_tmp_data_sub_data_1_s_phi_fu_499_p4_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln15_reg_1308_pp0_iter2_reg, select_ln21_1_reg_1389_pp0_iter2_reg, line_buff_group_1_va_q0, ap_phi_reg_pp0_iter3_tmp_data_sub_data_1_s_reg_496)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (select_ln21_1_reg_1389_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln15_reg_1308_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_phi_mux_tmp_data_sub_data_1_s_phi_fu_499_p4 <= line_buff_group_1_va_q0;
        else 
            ap_phi_mux_tmp_data_sub_data_1_s_phi_fu_499_p4 <= ap_phi_reg_pp0_iter3_tmp_data_sub_data_1_s_reg_496;
        end if; 
    end process;


    ap_phi_mux_tmp_data_sub_data_2_s_phi_fu_509_p4_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln15_reg_1308_pp0_iter2_reg, select_ln21_1_reg_1389_pp0_iter2_reg, line_buff_group_2_va_q0, ap_phi_reg_pp0_iter3_tmp_data_sub_data_2_s_reg_506)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (select_ln21_1_reg_1389_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln15_reg_1308_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_phi_mux_tmp_data_sub_data_2_s_phi_fu_509_p4 <= line_buff_group_2_va_q0;
        else 
            ap_phi_mux_tmp_data_sub_data_2_s_phi_fu_509_p4 <= ap_phi_reg_pp0_iter3_tmp_data_sub_data_2_s_reg_506;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_curr_output_data_sub_3_reg_516 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_tmp_data_sub_data_0_s_reg_486 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_tmp_data_sub_data_1_s_reg_496 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_tmp_data_sub_data_2_s_reg_506 <= "XXXXXXXXXXXXXXXX";

    ap_predicate_op171_read_state8_assign_proc : process(icmp_ln15_reg_1308_pp0_iter1_reg, select_ln21_1_reg_1389)
    begin
                ap_predicate_op171_read_state8 <= ((select_ln21_1_reg_1389 = ap_const_lv1_0) and (icmp_ln15_reg_1308_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(outStream_TREADY, outStream_V_data_1_state, outStream_V_keep_V_1_state, outStream_V_strb_V_1_state, outStream_V_user_V_1_state, outStream_V_last_V_1_state, outStream_V_id_V_1_state, outStream_V_dest_V_1_state, ap_CS_fsm_state11)
    begin
        if ((not(((outStream_V_dest_V_1_state = ap_const_lv2_1) or (outStream_V_id_V_1_state = ap_const_lv2_1) or (outStream_V_last_V_1_state = ap_const_lv2_1) or (outStream_V_user_V_1_state = ap_const_lv2_1) or (outStream_V_strb_V_1_state = ap_const_lv2_1) or (outStream_V_keep_V_1_state = ap_const_lv2_1) or (outStream_V_data_1_state = ap_const_lv2_1) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    col_idx_fu_883_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln17_fu_798_p3));
    col_stride_fu_955_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln52_2_fu_899_p3));
    curr_input_data_sub_s_fu_1091_p1 <= inStream_V_data_0_data_out(16 - 1 downto 0);
    curr_output_last_V_fu_1038_p2 <= (select_ln17_2_fu_828_p3 and and_ln52_2_fu_1032_p2);
    grp_fu_1207_p0 <= ap_const_lv8_D(5 - 1 downto 0);
    grp_fu_1207_p1 <= grp_fu_1207_p10(4 - 1 downto 0);
    grp_fu_1207_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_reg_1383),8));
    grp_fu_1207_p2 <= zext_ln52_fu_1064_p1(4 - 1 downto 0);
    grp_fu_1216_p0 <= grp_fu_1216_p00(4 - 1 downto 0);
    grp_fu_1216_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_reg_1383),8));
    grp_fu_1216_p1 <= ap_const_lv8_D(5 - 1 downto 0);
    grp_fu_1216_p2 <= zext_ln52_fu_1064_p1(4 - 1 downto 0);
    icmp_ln10_fu_556_p2 <= "1" when (phi_ln10_reg_321 = ap_const_lv3_7) else "0";
    icmp_ln11_fu_574_p2 <= "1" when (phi_ln11_reg_343 = ap_const_lv3_7) else "0";
    icmp_ln12_fu_592_p2 <= "1" when (phi_ln12_reg_365 = ap_const_lv3_7) else "0";
    icmp_ln15_fu_598_p2 <= "1" when (indvar_flatten136_reg_387 = ap_const_lv13_1520) else "0";
    icmp_ln17_fu_610_p2 <= "1" when (indvar_flatten72_reg_398 = ap_const_lv10_1A0) else "0";
    icmp_ln19_fu_622_p2 <= "1" when (indvar_flatten27_reg_409 = ap_const_lv9_D0) else "0";
    icmp_ln21_fu_774_p2 <= "1" when (indvar_flatten_reg_453 = ap_const_lv6_10) else "0";
    icmp_ln23_fu_763_p2 <= "1" when (input_ch_idx_0_reg_475 = ap_const_lv4_8) else "0";
    icmp_ln52_1_fu_678_p2 <= "1" when (row_stride_0_reg_431 = ap_const_lv2_1) else "0";
    icmp_ln52_2_fu_700_p2 <= "1" when (col_stride_0_reg_464 = ap_const_lv2_1) else "0";
    icmp_ln52_3_fu_719_p2 <= "1" when (row_idx_fu_706_p2 = ap_const_lv4_C) else "0";
    icmp_ln52_4_fu_1020_p2 <= "1" when (select_ln21_fu_972_p3 = ap_const_lv4_7) else "0";
    icmp_ln52_5_fu_742_p2 <= "1" when (ap_phi_mux_col_assign_phi_fu_446_p4 = ap_const_lv4_C) else "0";
    icmp_ln52_6_fu_816_p2 <= "1" when (select_ln52_fu_712_p3 = ap_const_lv2_0) else "0";
    icmp_ln52_7_fu_907_p2 <= "1" when (col_idx_fu_883_p2 = ap_const_lv4_C) else "0";
    icmp_ln52_8_fu_998_p2 <= "1" when (select_ln52_2_fu_899_p3 = ap_const_lv2_0) else "0";
    icmp_ln52_fu_668_p2 <= "1" when (row_idx_0_reg_420 = ap_const_lv4_C) else "0";
    icmp_ln9_fu_538_p2 <= "1" when (phi_ln9_reg_299 = ap_const_lv3_7) else "0";

    inStream_TDATA_blk_n_assign_proc : process(inStream_V_data_0_state, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln15_reg_1308_pp0_iter1_reg, select_ln21_1_reg_1389)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (select_ln21_1_reg_1389 = ap_const_lv1_0) and (icmp_ln15_reg_1308_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            inStream_TDATA_blk_n <= inStream_V_data_0_state(0);
        else 
            inStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inStream_TREADY <= inStream_V_dest_V_0_state(1);
    inStream_V_data_0_ack_in <= inStream_V_data_0_state(1);

    inStream_V_data_0_ack_out_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op171_read_state8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op171_read_state8 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            inStream_V_data_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_data_0_data_out_assign_proc : process(inStream_V_data_0_payload_A, inStream_V_data_0_payload_B, inStream_V_data_0_sel)
    begin
        if ((inStream_V_data_0_sel = ap_const_logic_1)) then 
            inStream_V_data_0_data_out <= inStream_V_data_0_payload_B;
        else 
            inStream_V_data_0_data_out <= inStream_V_data_0_payload_A;
        end if; 
    end process;

    inStream_V_data_0_load_A <= (inStream_V_data_0_state_cmp_full and not(inStream_V_data_0_sel_wr));
    inStream_V_data_0_load_B <= (inStream_V_data_0_state_cmp_full and inStream_V_data_0_sel_wr);
    inStream_V_data_0_sel <= inStream_V_data_0_sel_rd;
    inStream_V_data_0_state_cmp_full <= '0' when (inStream_V_data_0_state = ap_const_lv2_1) else '1';
    inStream_V_data_0_vld_in <= inStream_TVALID;
    inStream_V_data_0_vld_out <= inStream_V_data_0_state(0);
    inStream_V_dest_V_0_ack_in <= inStream_V_dest_V_0_state(1);

    inStream_V_dest_V_0_ack_out_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op171_read_state8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op171_read_state8 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            inStream_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_dest_V_0_data_out_assign_proc : process(inStream_V_dest_V_0_payload_A, inStream_V_dest_V_0_payload_B, inStream_V_dest_V_0_sel)
    begin
        if ((inStream_V_dest_V_0_sel = ap_const_logic_1)) then 
            inStream_V_dest_V_0_data_out <= inStream_V_dest_V_0_payload_B;
        else 
            inStream_V_dest_V_0_data_out <= inStream_V_dest_V_0_payload_A;
        end if; 
    end process;

    inStream_V_dest_V_0_load_A <= (inStream_V_dest_V_0_state_cmp_full and not(inStream_V_dest_V_0_sel_wr));
    inStream_V_dest_V_0_load_B <= (inStream_V_dest_V_0_state_cmp_full and inStream_V_dest_V_0_sel_wr);
    inStream_V_dest_V_0_sel <= inStream_V_dest_V_0_sel_rd;
    inStream_V_dest_V_0_state_cmp_full <= '0' when (inStream_V_dest_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_dest_V_0_vld_in <= inStream_TVALID;
    inStream_V_dest_V_0_vld_out <= inStream_V_dest_V_0_state(0);
    inStream_V_id_V_0_ack_in <= inStream_V_id_V_0_state(1);

    inStream_V_id_V_0_ack_out_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op171_read_state8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op171_read_state8 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            inStream_V_id_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_id_V_0_data_out_assign_proc : process(inStream_V_id_V_0_payload_A, inStream_V_id_V_0_payload_B, inStream_V_id_V_0_sel)
    begin
        if ((inStream_V_id_V_0_sel = ap_const_logic_1)) then 
            inStream_V_id_V_0_data_out <= inStream_V_id_V_0_payload_B;
        else 
            inStream_V_id_V_0_data_out <= inStream_V_id_V_0_payload_A;
        end if; 
    end process;

    inStream_V_id_V_0_load_A <= (inStream_V_id_V_0_state_cmp_full and not(inStream_V_id_V_0_sel_wr));
    inStream_V_id_V_0_load_B <= (inStream_V_id_V_0_state_cmp_full and inStream_V_id_V_0_sel_wr);
    inStream_V_id_V_0_sel <= inStream_V_id_V_0_sel_rd;
    inStream_V_id_V_0_state_cmp_full <= '0' when (inStream_V_id_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_id_V_0_vld_in <= inStream_TVALID;
    inStream_V_id_V_0_vld_out <= inStream_V_id_V_0_state(0);
    inStream_V_keep_V_0_ack_in <= inStream_V_keep_V_0_state(1);

    inStream_V_keep_V_0_ack_out_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op171_read_state8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op171_read_state8 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            inStream_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_keep_V_0_data_out_assign_proc : process(inStream_V_keep_V_0_payload_A, inStream_V_keep_V_0_payload_B, inStream_V_keep_V_0_sel)
    begin
        if ((inStream_V_keep_V_0_sel = ap_const_logic_1)) then 
            inStream_V_keep_V_0_data_out <= inStream_V_keep_V_0_payload_B;
        else 
            inStream_V_keep_V_0_data_out <= inStream_V_keep_V_0_payload_A;
        end if; 
    end process;

    inStream_V_keep_V_0_load_A <= (inStream_V_keep_V_0_state_cmp_full and not(inStream_V_keep_V_0_sel_wr));
    inStream_V_keep_V_0_load_B <= (inStream_V_keep_V_0_state_cmp_full and inStream_V_keep_V_0_sel_wr);
    inStream_V_keep_V_0_sel <= inStream_V_keep_V_0_sel_rd;
    inStream_V_keep_V_0_state_cmp_full <= '0' when (inStream_V_keep_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_keep_V_0_vld_in <= inStream_TVALID;
    inStream_V_keep_V_0_vld_out <= inStream_V_keep_V_0_state(0);
    inStream_V_strb_V_0_ack_in <= inStream_V_strb_V_0_state(1);

    inStream_V_strb_V_0_ack_out_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op171_read_state8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op171_read_state8 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            inStream_V_strb_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_strb_V_0_data_out_assign_proc : process(inStream_V_strb_V_0_payload_A, inStream_V_strb_V_0_payload_B, inStream_V_strb_V_0_sel)
    begin
        if ((inStream_V_strb_V_0_sel = ap_const_logic_1)) then 
            inStream_V_strb_V_0_data_out <= inStream_V_strb_V_0_payload_B;
        else 
            inStream_V_strb_V_0_data_out <= inStream_V_strb_V_0_payload_A;
        end if; 
    end process;

    inStream_V_strb_V_0_load_A <= (inStream_V_strb_V_0_state_cmp_full and not(inStream_V_strb_V_0_sel_wr));
    inStream_V_strb_V_0_load_B <= (inStream_V_strb_V_0_state_cmp_full and inStream_V_strb_V_0_sel_wr);
    inStream_V_strb_V_0_sel <= inStream_V_strb_V_0_sel_rd;
    inStream_V_strb_V_0_state_cmp_full <= '0' when (inStream_V_strb_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_strb_V_0_vld_in <= inStream_TVALID;
    inStream_V_strb_V_0_vld_out <= inStream_V_strb_V_0_state(0);
    inStream_V_user_V_0_ack_in <= inStream_V_user_V_0_state(1);

    inStream_V_user_V_0_ack_out_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op171_read_state8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op171_read_state8 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            inStream_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_user_V_0_data_out_assign_proc : process(inStream_V_user_V_0_payload_A, inStream_V_user_V_0_payload_B, inStream_V_user_V_0_sel)
    begin
        if ((inStream_V_user_V_0_sel = ap_const_logic_1)) then 
            inStream_V_user_V_0_data_out <= inStream_V_user_V_0_payload_B;
        else 
            inStream_V_user_V_0_data_out <= inStream_V_user_V_0_payload_A;
        end if; 
    end process;

    inStream_V_user_V_0_load_A <= (inStream_V_user_V_0_state_cmp_full and not(inStream_V_user_V_0_sel_wr));
    inStream_V_user_V_0_load_B <= (inStream_V_user_V_0_state_cmp_full and inStream_V_user_V_0_sel_wr);
    inStream_V_user_V_0_sel <= inStream_V_user_V_0_sel_rd;
    inStream_V_user_V_0_state_cmp_full <= '0' when (inStream_V_user_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_user_V_0_vld_in <= inStream_TVALID;
    inStream_V_user_V_0_vld_out <= inStream_V_user_V_0_state(0);
    input_ch_idx_fu_1044_p2 <= std_logic_vector(unsigned(select_ln21_fu_972_p3) + unsigned(ap_const_lv4_1));

    line_buff_group_0_va_address0_assign_proc : process(select_ln21_1_reg_1389, sext_ln203_1_fu_1132_p1, sext_ln203_fu_1167_p1, ap_condition_1185)
    begin
        if ((ap_const_boolean_1 = ap_condition_1185)) then
            if ((select_ln21_1_reg_1389 = ap_const_lv1_1)) then 
                line_buff_group_0_va_address0 <= sext_ln203_fu_1167_p1(7 - 1 downto 0);
            elsif ((select_ln21_1_reg_1389 = ap_const_lv1_0)) then 
                line_buff_group_0_va_address0 <= sext_ln203_1_fu_1132_p1(7 - 1 downto 0);
            else 
                line_buff_group_0_va_address0 <= "XXXXXXX";
            end if;
        else 
            line_buff_group_0_va_address0 <= "XXXXXXX";
        end if; 
    end process;


    line_buff_group_0_va_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln15_reg_1308_pp0_iter1_reg, select_ln21_1_reg_1389, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln21_1_reg_1389 = ap_const_lv1_1) and (icmp_ln15_reg_1308_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln21_1_reg_1389 = ap_const_lv1_0) and (icmp_ln15_reg_1308_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            line_buff_group_0_va_ce0 <= ap_const_logic_1;
        else 
            line_buff_group_0_va_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buff_group_0_va_d0 <= inStream_V_data_0_data_out(16 - 1 downto 0);

    line_buff_group_0_va_we0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln15_reg_1308_pp0_iter1_reg, select_ln21_1_reg_1389, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln21_1_reg_1389 = ap_const_lv1_0) and (icmp_ln15_reg_1308_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buff_group_0_va_we0 <= ap_const_logic_1;
        else 
            line_buff_group_0_va_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_1_va_address0_assign_proc : process(select_ln21_1_reg_1389, sext_ln203_1_fu_1132_p1, sext_ln203_fu_1167_p1, ap_condition_1185)
    begin
        if ((ap_const_boolean_1 = ap_condition_1185)) then
            if ((select_ln21_1_reg_1389 = ap_const_lv1_1)) then 
                line_buff_group_1_va_address0 <= sext_ln203_fu_1167_p1(7 - 1 downto 0);
            elsif ((select_ln21_1_reg_1389 = ap_const_lv1_0)) then 
                line_buff_group_1_va_address0 <= sext_ln203_1_fu_1132_p1(7 - 1 downto 0);
            else 
                line_buff_group_1_va_address0 <= "XXXXXXX";
            end if;
        else 
            line_buff_group_1_va_address0 <= "XXXXXXX";
        end if; 
    end process;


    line_buff_group_1_va_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln15_reg_1308_pp0_iter1_reg, select_ln21_1_reg_1389, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln21_1_reg_1389 = ap_const_lv1_1) and (icmp_ln15_reg_1308_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln21_1_reg_1389 = ap_const_lv1_0) and (icmp_ln15_reg_1308_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            line_buff_group_1_va_ce0 <= ap_const_logic_1;
        else 
            line_buff_group_1_va_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buff_group_1_va_d0 <= inStream_V_data_0_data_out(31 downto 16);

    line_buff_group_1_va_we0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln15_reg_1308_pp0_iter1_reg, select_ln21_1_reg_1389, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln21_1_reg_1389 = ap_const_lv1_0) and (icmp_ln15_reg_1308_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buff_group_1_va_we0 <= ap_const_logic_1;
        else 
            line_buff_group_1_va_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_2_va_address0_assign_proc : process(select_ln21_1_reg_1389, sext_ln203_1_fu_1132_p1, sext_ln203_fu_1167_p1, ap_condition_1185)
    begin
        if ((ap_const_boolean_1 = ap_condition_1185)) then
            if ((select_ln21_1_reg_1389 = ap_const_lv1_1)) then 
                line_buff_group_2_va_address0 <= sext_ln203_fu_1167_p1(7 - 1 downto 0);
            elsif ((select_ln21_1_reg_1389 = ap_const_lv1_0)) then 
                line_buff_group_2_va_address0 <= sext_ln203_1_fu_1132_p1(7 - 1 downto 0);
            else 
                line_buff_group_2_va_address0 <= "XXXXXXX";
            end if;
        else 
            line_buff_group_2_va_address0 <= "XXXXXXX";
        end if; 
    end process;


    line_buff_group_2_va_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln15_reg_1308_pp0_iter1_reg, select_ln21_1_reg_1389, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln21_1_reg_1389 = ap_const_lv1_1) and (icmp_ln15_reg_1308_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln21_1_reg_1389 = ap_const_lv1_0) and (icmp_ln15_reg_1308_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            line_buff_group_2_va_ce0 <= ap_const_logic_1;
        else 
            line_buff_group_2_va_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buff_group_2_va_d0 <= inStream_V_data_0_data_out(47 downto 32);

    line_buff_group_2_va_we0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln15_reg_1308_pp0_iter1_reg, select_ln21_1_reg_1389, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln21_1_reg_1389 = ap_const_lv1_0) and (icmp_ln15_reg_1308_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buff_group_2_va_we0 <= ap_const_logic_1;
        else 
            line_buff_group_2_va_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_3_va_address0_assign_proc : process(select_ln21_1_reg_1389, sext_ln203_1_fu_1132_p1, sext_ln203_fu_1167_p1, ap_condition_1185)
    begin
        if ((ap_const_boolean_1 = ap_condition_1185)) then
            if ((select_ln21_1_reg_1389 = ap_const_lv1_1)) then 
                line_buff_group_3_va_address0 <= sext_ln203_fu_1167_p1(7 - 1 downto 0);
            elsif ((select_ln21_1_reg_1389 = ap_const_lv1_0)) then 
                line_buff_group_3_va_address0 <= sext_ln203_1_fu_1132_p1(7 - 1 downto 0);
            else 
                line_buff_group_3_va_address0 <= "XXXXXXX";
            end if;
        else 
            line_buff_group_3_va_address0 <= "XXXXXXX";
        end if; 
    end process;


    line_buff_group_3_va_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln15_reg_1308_pp0_iter1_reg, select_ln21_1_reg_1389, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln21_1_reg_1389 = ap_const_lv1_1) and (icmp_ln15_reg_1308_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln21_1_reg_1389 = ap_const_lv1_0) and (icmp_ln15_reg_1308_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            line_buff_group_3_va_ce0 <= ap_const_logic_1;
        else 
            line_buff_group_3_va_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buff_group_3_va_d0 <= inStream_V_data_0_data_out(63 downto 48);

    line_buff_group_3_va_we0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln15_reg_1308_pp0_iter1_reg, select_ln21_1_reg_1389, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln21_1_reg_1389 = ap_const_lv1_0) and (icmp_ln15_reg_1308_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buff_group_3_va_we0 <= ap_const_logic_1;
        else 
            line_buff_group_3_va_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln17_1_fu_840_p2 <= (xor_ln17_fu_835_p2 or icmp_ln17_reg_1317);
    or_ln17_fu_634_p2 <= (icmp_ln17_fu_610_p2 or and_ln52_10_fu_628_p2);
    or_ln21_1_fu_967_p2 <= (or_ln21_fu_961_p2 or or_ln17_reg_1351);
    or_ln21_fu_961_p2 <= (and_ln52_13_fu_949_p2 or and_ln17_3_fu_870_p2);
    or_ln26_1_fu_984_p2 <= (trunc_ln21_1_fu_980_p1 or select_ln17_1_fu_809_p3);
    or_ln26_fu_694_p2 <= (trunc_ln21_fu_690_p1 or trunc_ln17_fu_674_p1);
    or_ln52_1_fu_894_p2 <= (or_ln52_fu_889_p2 or icmp_ln17_reg_1317);
    or_ln52_fu_889_p2 <= (and_ln52_10_reg_1342 or and_ln17_3_fu_870_p2);
    outStream_TDATA <= outStream_V_data_1_data_out;

    outStream_TDATA_blk_n_assign_proc : process(outStream_V_data_1_state, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln15_reg_1308_pp0_iter2_reg, ap_enable_reg_pp0_iter4, icmp_ln15_reg_1308_pp0_iter3_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln15_reg_1308_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln15_reg_1308_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            outStream_TDATA_blk_n <= outStream_V_data_1_state(1);
        else 
            outStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_TDEST <= outStream_V_dest_V_1_data_out;
    outStream_TID <= outStream_V_id_V_1_data_out;
    outStream_TKEEP <= outStream_V_keep_V_1_data_out;
    outStream_TLAST <= outStream_V_last_V_1_data_out;
    outStream_TSTRB <= outStream_V_strb_V_1_data_out;
    outStream_TUSER <= outStream_V_user_V_1_data_out;
    outStream_TVALID <= outStream_V_dest_V_1_state(0);
    outStream_V_data_1_ack_in <= outStream_V_data_1_state(1);
    outStream_V_data_1_ack_out <= outStream_TREADY;

    outStream_V_data_1_data_out_assign_proc : process(outStream_V_data_1_payload_A, outStream_V_data_1_payload_B, outStream_V_data_1_sel)
    begin
        if ((outStream_V_data_1_sel = ap_const_logic_1)) then 
            outStream_V_data_1_data_out <= outStream_V_data_1_payload_B;
        else 
            outStream_V_data_1_data_out <= outStream_V_data_1_payload_A;
        end if; 
    end process;

    outStream_V_data_1_load_A <= (outStream_V_data_1_state_cmp_full and not(outStream_V_data_1_sel_wr));
    outStream_V_data_1_load_B <= (outStream_V_data_1_state_cmp_full and outStream_V_data_1_sel_wr);
    outStream_V_data_1_sel <= outStream_V_data_1_sel_rd;
    outStream_V_data_1_state_cmp_full <= '0' when (outStream_V_data_1_state = ap_const_lv2_1) else '1';

    outStream_V_data_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln15_reg_1308_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_1308_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            outStream_V_data_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_data_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_data_1_vld_out <= outStream_V_data_1_state(0);
    outStream_V_dest_V_1_ack_in <= outStream_V_dest_V_1_state(1);
    outStream_V_dest_V_1_ack_out <= outStream_TREADY;

    outStream_V_dest_V_1_data_out_assign_proc : process(outStream_V_dest_V_1_payload_A, outStream_V_dest_V_1_payload_B, outStream_V_dest_V_1_sel)
    begin
        if ((outStream_V_dest_V_1_sel = ap_const_logic_1)) then 
            outStream_V_dest_V_1_data_out <= outStream_V_dest_V_1_payload_B;
        else 
            outStream_V_dest_V_1_data_out <= outStream_V_dest_V_1_payload_A;
        end if; 
    end process;

    outStream_V_dest_V_1_load_A <= (outStream_V_dest_V_1_state_cmp_full and not(outStream_V_dest_V_1_sel_wr));
    outStream_V_dest_V_1_load_B <= (outStream_V_dest_V_1_state_cmp_full and outStream_V_dest_V_1_sel_wr);
    outStream_V_dest_V_1_sel <= outStream_V_dest_V_1_sel_rd;
    outStream_V_dest_V_1_state_cmp_full <= '0' when (outStream_V_dest_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_dest_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln15_reg_1308_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_1308_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            outStream_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_dest_V_1_vld_out <= outStream_V_dest_V_1_state(0);
    outStream_V_id_V_1_ack_in <= outStream_V_id_V_1_state(1);
    outStream_V_id_V_1_ack_out <= outStream_TREADY;

    outStream_V_id_V_1_data_out_assign_proc : process(outStream_V_id_V_1_payload_A, outStream_V_id_V_1_payload_B, outStream_V_id_V_1_sel)
    begin
        if ((outStream_V_id_V_1_sel = ap_const_logic_1)) then 
            outStream_V_id_V_1_data_out <= outStream_V_id_V_1_payload_B;
        else 
            outStream_V_id_V_1_data_out <= outStream_V_id_V_1_payload_A;
        end if; 
    end process;

    outStream_V_id_V_1_load_A <= (outStream_V_id_V_1_state_cmp_full and not(outStream_V_id_V_1_sel_wr));
    outStream_V_id_V_1_load_B <= (outStream_V_id_V_1_state_cmp_full and outStream_V_id_V_1_sel_wr);
    outStream_V_id_V_1_sel <= outStream_V_id_V_1_sel_rd;
    outStream_V_id_V_1_state_cmp_full <= '0' when (outStream_V_id_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_id_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln15_reg_1308_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_1308_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            outStream_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_id_V_1_vld_out <= outStream_V_id_V_1_state(0);
    outStream_V_keep_V_1_ack_in <= outStream_V_keep_V_1_state(1);
    outStream_V_keep_V_1_ack_out <= outStream_TREADY;

    outStream_V_keep_V_1_data_out_assign_proc : process(outStream_V_keep_V_1_payload_A, outStream_V_keep_V_1_payload_B, outStream_V_keep_V_1_sel)
    begin
        if ((outStream_V_keep_V_1_sel = ap_const_logic_1)) then 
            outStream_V_keep_V_1_data_out <= outStream_V_keep_V_1_payload_B;
        else 
            outStream_V_keep_V_1_data_out <= outStream_V_keep_V_1_payload_A;
        end if; 
    end process;

    outStream_V_keep_V_1_load_A <= (outStream_V_keep_V_1_state_cmp_full and not(outStream_V_keep_V_1_sel_wr));
    outStream_V_keep_V_1_load_B <= (outStream_V_keep_V_1_state_cmp_full and outStream_V_keep_V_1_sel_wr);
    outStream_V_keep_V_1_sel <= outStream_V_keep_V_1_sel_rd;
    outStream_V_keep_V_1_state_cmp_full <= '0' when (outStream_V_keep_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_keep_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln15_reg_1308_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_1308_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            outStream_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_keep_V_1_vld_out <= outStream_V_keep_V_1_state(0);
    outStream_V_last_V_1_ack_in <= outStream_V_last_V_1_state(1);
    outStream_V_last_V_1_ack_out <= outStream_TREADY;

    outStream_V_last_V_1_data_out_assign_proc : process(outStream_V_last_V_1_payload_A, outStream_V_last_V_1_payload_B, outStream_V_last_V_1_sel)
    begin
        if ((outStream_V_last_V_1_sel = ap_const_logic_1)) then 
            outStream_V_last_V_1_data_out <= outStream_V_last_V_1_payload_B;
        else 
            outStream_V_last_V_1_data_out <= outStream_V_last_V_1_payload_A;
        end if; 
    end process;

    outStream_V_last_V_1_load_A <= (outStream_V_last_V_1_state_cmp_full and not(outStream_V_last_V_1_sel_wr));
    outStream_V_last_V_1_load_B <= (outStream_V_last_V_1_state_cmp_full and outStream_V_last_V_1_sel_wr);
    outStream_V_last_V_1_sel <= outStream_V_last_V_1_sel_rd;
    outStream_V_last_V_1_state_cmp_full <= '0' when (outStream_V_last_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_last_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln15_reg_1308_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_1308_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            outStream_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_last_V_1_vld_out <= outStream_V_last_V_1_state(0);
    outStream_V_strb_V_1_ack_in <= outStream_V_strb_V_1_state(1);
    outStream_V_strb_V_1_ack_out <= outStream_TREADY;

    outStream_V_strb_V_1_data_out_assign_proc : process(outStream_V_strb_V_1_payload_A, outStream_V_strb_V_1_payload_B, outStream_V_strb_V_1_sel)
    begin
        if ((outStream_V_strb_V_1_sel = ap_const_logic_1)) then 
            outStream_V_strb_V_1_data_out <= outStream_V_strb_V_1_payload_B;
        else 
            outStream_V_strb_V_1_data_out <= outStream_V_strb_V_1_payload_A;
        end if; 
    end process;

    outStream_V_strb_V_1_load_A <= (outStream_V_strb_V_1_state_cmp_full and not(outStream_V_strb_V_1_sel_wr));
    outStream_V_strb_V_1_load_B <= (outStream_V_strb_V_1_state_cmp_full and outStream_V_strb_V_1_sel_wr);
    outStream_V_strb_V_1_sel <= outStream_V_strb_V_1_sel_rd;
    outStream_V_strb_V_1_state_cmp_full <= '0' when (outStream_V_strb_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_strb_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln15_reg_1308_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_1308_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            outStream_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_strb_V_1_vld_out <= outStream_V_strb_V_1_state(0);
    outStream_V_user_V_1_ack_in <= outStream_V_user_V_1_state(1);
    outStream_V_user_V_1_ack_out <= outStream_TREADY;

    outStream_V_user_V_1_data_out_assign_proc : process(outStream_V_user_V_1_payload_A, outStream_V_user_V_1_payload_B, outStream_V_user_V_1_sel)
    begin
        if ((outStream_V_user_V_1_sel = ap_const_logic_1)) then 
            outStream_V_user_V_1_data_out <= outStream_V_user_V_1_payload_B;
        else 
            outStream_V_user_V_1_data_out <= outStream_V_user_V_1_payload_A;
        end if; 
    end process;

    outStream_V_user_V_1_load_A <= (outStream_V_user_V_1_state_cmp_full and not(outStream_V_user_V_1_sel_wr));
    outStream_V_user_V_1_load_B <= (outStream_V_user_V_1_state_cmp_full and outStream_V_user_V_1_sel_wr);
    outStream_V_user_V_1_sel <= outStream_V_user_V_1_sel_rd;
    outStream_V_user_V_1_state_cmp_full <= '0' when (outStream_V_user_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_user_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln15_reg_1308_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_1308_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            outStream_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_user_V_1_vld_out <= outStream_V_user_V_1_state(0);
    row_idx_fu_706_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(row_idx_0_reg_420));
    row_stride_fu_792_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln52_fu_712_p3));
    select_ln15_fu_785_p3 <= 
        row_idx_fu_706_p2 when (icmp_ln17_reg_1317(0) = '1') else 
        row_idx_0_reg_420;
    select_ln17_1_fu_809_p3 <= 
        trunc_ln17_1_fu_805_p1 when (and_ln52_10_reg_1342(0) = '1') else 
        and_ln52_3_fu_732_p2;
    select_ln17_2_fu_828_p3 <= 
        and_ln52_11_fu_822_p2 when (and_ln52_10_reg_1342(0) = '1') else 
        and_ln52_4_fu_737_p2;
    select_ln17_3_fu_851_p3 <= 
        trunc_ln17_1_fu_805_p1 when (and_ln52_10_reg_1342(0) = '1') else 
        and_ln52_6_fu_753_p2;
    select_ln17_4_fu_876_p3 <= 
        row_stride_fu_792_p2 when (and_ln52_10_reg_1342(0) = '1') else 
        select_ln52_fu_712_p3;
    select_ln17_5_fu_660_p3 <= 
        ap_const_lv10_1 when (icmp_ln17_fu_610_p2(0) = '1') else 
        add_ln17_1_fu_654_p2;
    select_ln17_fu_798_p3 <= 
        ap_const_lv4_0 when (or_ln17_reg_1351(0) = '1') else 
        ap_phi_mux_col_assign_phi_fu_446_p4;
    select_ln19_fu_646_p3 <= 
        ap_const_lv9_1 when (or_ln17_fu_634_p2(0) = '1') else 
        add_ln19_1_fu_640_p2;
    select_ln21_1_fu_990_p3 <= 
        or_ln26_1_fu_984_p2 when (and_ln52_13_fu_949_p2(0) = '1') else 
        select_ln52_5_fu_929_p3;
    select_ln21_2_fu_1004_p3 <= 
        icmp_ln52_8_fu_998_p2 when (and_ln52_13_fu_949_p2(0) = '1') else 
        and_ln52_12_fu_943_p2;
    select_ln21_3_fu_1012_p3 <= 
        col_stride_fu_955_p2 when (and_ln52_13_fu_949_p2(0) = '1') else 
        select_ln52_2_fu_899_p3;
    select_ln21_4_fu_1056_p3 <= 
        ap_const_lv6_1 when (or_ln52_1_fu_894_p2(0) = '1') else 
        add_ln21_1_fu_1050_p2;
    select_ln21_fu_972_p3 <= 
        ap_const_lv4_0 when (or_ln21_1_fu_967_p2(0) = '1') else 
        input_ch_idx_0_reg_475;
    select_ln52_1_fu_725_p3 <= 
        icmp_ln52_3_fu_719_p2 when (icmp_ln17_reg_1317(0) = '1') else 
        icmp_ln52_fu_668_p2;
    select_ln52_2_fu_899_p3 <= 
        ap_const_lv2_0 when (or_ln52_1_fu_894_p2(0) = '1') else 
        col_stride_0_reg_464;
    select_ln52_3_fu_913_p3 <= 
        icmp_ln52_7_fu_907_p2 when (and_ln17_3_fu_870_p2(0) = '1') else 
        and_ln17_fu_845_p2;
    select_ln52_4_fu_921_p3 <= 
        col_idx_fu_883_p2 when (and_ln17_3_fu_870_p2(0) = '1') else 
        select_ln17_fu_798_p3;
    select_ln52_5_fu_929_p3 <= 
        select_ln17_1_fu_809_p3 when (and_ln17_3_fu_870_p2(0) = '1') else 
        select_ln17_3_fu_851_p3;
    select_ln52_fu_712_p3 <= 
        ap_const_lv2_0 when (icmp_ln17_reg_1317(0) = '1') else 
        row_stride_0_reg_431;
        sext_ln203_1_fu_1132_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1207_p3),64));

        sext_ln203_fu_1167_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1216_p3),64));

    tmp_data_1_fu_1194_p5 <= (((ap_phi_mux_curr_output_data_sub_3_phi_fu_519_p4 & ap_phi_mux_tmp_data_sub_data_2_s_phi_fu_509_p4) & ap_phi_mux_tmp_data_sub_data_1_s_phi_fu_499_p4) & ap_phi_mux_tmp_data_sub_data_0_s_phi_fu_489_p4);
    trunc_ln17_1_fu_805_p1 <= row_stride_fu_792_p2(1 - 1 downto 0);
    trunc_ln17_fu_674_p1 <= row_stride_0_reg_431(1 - 1 downto 0);
    trunc_ln21_1_fu_980_p1 <= col_stride_fu_955_p2(1 - 1 downto 0);
    trunc_ln21_fu_690_p1 <= col_stride_0_reg_464(1 - 1 downto 0);
    xor_ln17_fu_835_p2 <= (icmp_ln19_reg_1337 xor ap_const_lv1_1);
    xor_ln52_1_fu_937_p2 <= (ap_const_lv1_1 xor and_ln17_3_fu_870_p2);
    xor_ln52_fu_616_p2 <= (icmp_ln17_fu_610_p2 xor ap_const_lv1_1);
    zext_ln52_fu_1064_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln52_4_reg_1377),8));
end behav;
