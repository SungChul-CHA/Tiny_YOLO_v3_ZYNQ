// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="yolo_upsamp_top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=5445,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=2,HLS_SYN_FF=997,HLS_SYN_LUT=1520,HLS_VERSION=2019_1}" *)

module yolo_upsamp_top (
        ap_clk,
        ap_rst_n,
        inStream_TDATA,
        inStream_TVALID,
        inStream_TREADY,
        inStream_TKEEP,
        inStream_TSTRB,
        inStream_TUSER,
        inStream_TLAST,
        inStream_TID,
        inStream_TDEST,
        outStream_TDATA,
        outStream_TVALID,
        outStream_TREADY,
        outStream_TKEEP,
        outStream_TSTRB,
        outStream_TUSER,
        outStream_TLAST,
        outStream_TID,
        outStream_TDEST,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_pp0_stage0 = 7'd32;
parameter    ap_ST_fsm_state11 = 7'd64;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [63:0] inStream_TDATA;
input   inStream_TVALID;
output   inStream_TREADY;
input  [7:0] inStream_TKEEP;
input  [7:0] inStream_TSTRB;
input  [1:0] inStream_TUSER;
input  [0:0] inStream_TLAST;
input  [4:0] inStream_TID;
input  [5:0] inStream_TDEST;
output  [63:0] outStream_TDATA;
output   outStream_TVALID;
input   outStream_TREADY;
output  [7:0] outStream_TKEEP;
output  [7:0] outStream_TSTRB;
output  [1:0] outStream_TUSER;
output  [0:0] outStream_TLAST;
output  [4:0] outStream_TID;
output  [5:0] outStream_TDEST;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [63:0] inStream_V_data_0_data_out;
wire    inStream_V_data_0_vld_in;
wire    inStream_V_data_0_vld_out;
wire    inStream_V_data_0_ack_in;
reg    inStream_V_data_0_ack_out;
reg   [63:0] inStream_V_data_0_payload_A;
reg   [63:0] inStream_V_data_0_payload_B;
reg    inStream_V_data_0_sel_rd;
reg    inStream_V_data_0_sel_wr;
wire    inStream_V_data_0_sel;
wire    inStream_V_data_0_load_A;
wire    inStream_V_data_0_load_B;
reg   [1:0] inStream_V_data_0_state;
wire    inStream_V_data_0_state_cmp_full;
reg   [7:0] inStream_V_keep_V_0_data_out;
wire    inStream_V_keep_V_0_vld_in;
wire    inStream_V_keep_V_0_vld_out;
wire    inStream_V_keep_V_0_ack_in;
reg    inStream_V_keep_V_0_ack_out;
reg   [7:0] inStream_V_keep_V_0_payload_A;
reg   [7:0] inStream_V_keep_V_0_payload_B;
reg    inStream_V_keep_V_0_sel_rd;
reg    inStream_V_keep_V_0_sel_wr;
wire    inStream_V_keep_V_0_sel;
wire    inStream_V_keep_V_0_load_A;
wire    inStream_V_keep_V_0_load_B;
reg   [1:0] inStream_V_keep_V_0_state;
wire    inStream_V_keep_V_0_state_cmp_full;
reg   [7:0] inStream_V_strb_V_0_data_out;
wire    inStream_V_strb_V_0_vld_in;
wire    inStream_V_strb_V_0_vld_out;
wire    inStream_V_strb_V_0_ack_in;
reg    inStream_V_strb_V_0_ack_out;
reg   [7:0] inStream_V_strb_V_0_payload_A;
reg   [7:0] inStream_V_strb_V_0_payload_B;
reg    inStream_V_strb_V_0_sel_rd;
reg    inStream_V_strb_V_0_sel_wr;
wire    inStream_V_strb_V_0_sel;
wire    inStream_V_strb_V_0_load_A;
wire    inStream_V_strb_V_0_load_B;
reg   [1:0] inStream_V_strb_V_0_state;
wire    inStream_V_strb_V_0_state_cmp_full;
reg   [1:0] inStream_V_user_V_0_data_out;
wire    inStream_V_user_V_0_vld_in;
wire    inStream_V_user_V_0_vld_out;
wire    inStream_V_user_V_0_ack_in;
reg    inStream_V_user_V_0_ack_out;
reg   [1:0] inStream_V_user_V_0_payload_A;
reg   [1:0] inStream_V_user_V_0_payload_B;
reg    inStream_V_user_V_0_sel_rd;
reg    inStream_V_user_V_0_sel_wr;
wire    inStream_V_user_V_0_sel;
wire    inStream_V_user_V_0_load_A;
wire    inStream_V_user_V_0_load_B;
reg   [1:0] inStream_V_user_V_0_state;
wire    inStream_V_user_V_0_state_cmp_full;
reg   [4:0] inStream_V_id_V_0_data_out;
wire    inStream_V_id_V_0_vld_in;
wire    inStream_V_id_V_0_vld_out;
wire    inStream_V_id_V_0_ack_in;
reg    inStream_V_id_V_0_ack_out;
reg   [4:0] inStream_V_id_V_0_payload_A;
reg   [4:0] inStream_V_id_V_0_payload_B;
reg    inStream_V_id_V_0_sel_rd;
reg    inStream_V_id_V_0_sel_wr;
wire    inStream_V_id_V_0_sel;
wire    inStream_V_id_V_0_load_A;
wire    inStream_V_id_V_0_load_B;
reg   [1:0] inStream_V_id_V_0_state;
wire    inStream_V_id_V_0_state_cmp_full;
reg   [5:0] inStream_V_dest_V_0_data_out;
wire    inStream_V_dest_V_0_vld_in;
wire    inStream_V_dest_V_0_vld_out;
wire    inStream_V_dest_V_0_ack_in;
reg    inStream_V_dest_V_0_ack_out;
reg   [5:0] inStream_V_dest_V_0_payload_A;
reg   [5:0] inStream_V_dest_V_0_payload_B;
reg    inStream_V_dest_V_0_sel_rd;
reg    inStream_V_dest_V_0_sel_wr;
wire    inStream_V_dest_V_0_sel;
wire    inStream_V_dest_V_0_load_A;
wire    inStream_V_dest_V_0_load_B;
reg   [1:0] inStream_V_dest_V_0_state;
wire    inStream_V_dest_V_0_state_cmp_full;
reg   [63:0] outStream_V_data_1_data_out;
reg    outStream_V_data_1_vld_in;
wire    outStream_V_data_1_vld_out;
wire    outStream_V_data_1_ack_in;
wire    outStream_V_data_1_ack_out;
reg   [63:0] outStream_V_data_1_payload_A;
reg   [63:0] outStream_V_data_1_payload_B;
reg    outStream_V_data_1_sel_rd;
reg    outStream_V_data_1_sel_wr;
wire    outStream_V_data_1_sel;
wire    outStream_V_data_1_load_A;
wire    outStream_V_data_1_load_B;
reg   [1:0] outStream_V_data_1_state;
wire    outStream_V_data_1_state_cmp_full;
reg   [7:0] outStream_V_keep_V_1_data_out;
reg    outStream_V_keep_V_1_vld_in;
wire    outStream_V_keep_V_1_vld_out;
wire    outStream_V_keep_V_1_ack_in;
wire    outStream_V_keep_V_1_ack_out;
reg   [7:0] outStream_V_keep_V_1_payload_A;
reg   [7:0] outStream_V_keep_V_1_payload_B;
reg    outStream_V_keep_V_1_sel_rd;
reg    outStream_V_keep_V_1_sel_wr;
wire    outStream_V_keep_V_1_sel;
wire    outStream_V_keep_V_1_load_A;
wire    outStream_V_keep_V_1_load_B;
reg   [1:0] outStream_V_keep_V_1_state;
wire    outStream_V_keep_V_1_state_cmp_full;
reg   [7:0] outStream_V_strb_V_1_data_out;
reg    outStream_V_strb_V_1_vld_in;
wire    outStream_V_strb_V_1_vld_out;
wire    outStream_V_strb_V_1_ack_in;
wire    outStream_V_strb_V_1_ack_out;
reg   [7:0] outStream_V_strb_V_1_payload_A;
reg   [7:0] outStream_V_strb_V_1_payload_B;
reg    outStream_V_strb_V_1_sel_rd;
reg    outStream_V_strb_V_1_sel_wr;
wire    outStream_V_strb_V_1_sel;
wire    outStream_V_strb_V_1_load_A;
wire    outStream_V_strb_V_1_load_B;
reg   [1:0] outStream_V_strb_V_1_state;
wire    outStream_V_strb_V_1_state_cmp_full;
reg   [1:0] outStream_V_user_V_1_data_out;
reg    outStream_V_user_V_1_vld_in;
wire    outStream_V_user_V_1_vld_out;
wire    outStream_V_user_V_1_ack_in;
wire    outStream_V_user_V_1_ack_out;
reg   [1:0] outStream_V_user_V_1_payload_A;
reg   [1:0] outStream_V_user_V_1_payload_B;
reg    outStream_V_user_V_1_sel_rd;
reg    outStream_V_user_V_1_sel_wr;
wire    outStream_V_user_V_1_sel;
wire    outStream_V_user_V_1_load_A;
wire    outStream_V_user_V_1_load_B;
reg   [1:0] outStream_V_user_V_1_state;
wire    outStream_V_user_V_1_state_cmp_full;
reg   [0:0] outStream_V_last_V_1_data_out;
reg    outStream_V_last_V_1_vld_in;
wire    outStream_V_last_V_1_vld_out;
wire    outStream_V_last_V_1_ack_in;
wire    outStream_V_last_V_1_ack_out;
reg   [0:0] outStream_V_last_V_1_payload_A;
reg   [0:0] outStream_V_last_V_1_payload_B;
reg    outStream_V_last_V_1_sel_rd;
reg    outStream_V_last_V_1_sel_wr;
wire    outStream_V_last_V_1_sel;
wire    outStream_V_last_V_1_load_A;
wire    outStream_V_last_V_1_load_B;
reg   [1:0] outStream_V_last_V_1_state;
wire    outStream_V_last_V_1_state_cmp_full;
reg   [4:0] outStream_V_id_V_1_data_out;
reg    outStream_V_id_V_1_vld_in;
wire    outStream_V_id_V_1_vld_out;
wire    outStream_V_id_V_1_ack_in;
wire    outStream_V_id_V_1_ack_out;
reg   [4:0] outStream_V_id_V_1_payload_A;
reg   [4:0] outStream_V_id_V_1_payload_B;
reg    outStream_V_id_V_1_sel_rd;
reg    outStream_V_id_V_1_sel_wr;
wire    outStream_V_id_V_1_sel;
wire    outStream_V_id_V_1_load_A;
wire    outStream_V_id_V_1_load_B;
reg   [1:0] outStream_V_id_V_1_state;
wire    outStream_V_id_V_1_state_cmp_full;
reg   [5:0] outStream_V_dest_V_1_data_out;
reg    outStream_V_dest_V_1_vld_in;
wire    outStream_V_dest_V_1_vld_out;
wire    outStream_V_dest_V_1_ack_in;
wire    outStream_V_dest_V_1_ack_out;
reg   [5:0] outStream_V_dest_V_1_payload_A;
reg   [5:0] outStream_V_dest_V_1_payload_B;
reg    outStream_V_dest_V_1_sel_rd;
reg    outStream_V_dest_V_1_sel_wr;
wire    outStream_V_dest_V_1_sel;
wire    outStream_V_dest_V_1_load_A;
wire    outStream_V_dest_V_1_load_B;
reg   [1:0] outStream_V_dest_V_1_state;
wire    outStream_V_dest_V_1_state_cmp_full;
reg    inStream_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln15_reg_1308;
reg   [0:0] icmp_ln15_reg_1308_pp0_iter1_reg;
reg   [0:0] select_ln21_1_reg_1389;
reg    outStream_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln15_reg_1308_pp0_iter2_reg;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln15_reg_1308_pp0_iter3_reg;
reg   [12:0] indvar_flatten136_reg_387;
reg   [9:0] indvar_flatten72_reg_398;
reg   [8:0] indvar_flatten27_reg_409;
reg   [3:0] row_idx_0_reg_420;
reg   [1:0] row_stride_0_reg_431;
reg   [3:0] col_assign_reg_442;
reg   [5:0] indvar_flatten_reg_453;
reg   [1:0] col_stride_0_reg_464;
reg   [3:0] input_ch_idx_0_reg_475;
wire   [2:0] add_ln9_fu_526_p2;
wire    ap_CS_fsm_state2;
wire   [6:0] add_ln627_fu_532_p2;
wire   [2:0] add_ln10_fu_544_p2;
wire    ap_CS_fsm_state3;
wire   [6:0] add_ln627_1_fu_550_p2;
wire   [2:0] add_ln11_fu_562_p2;
wire    ap_CS_fsm_state4;
wire   [6:0] add_ln627_2_fu_568_p2;
wire   [2:0] add_ln12_fu_580_p2;
wire    ap_CS_fsm_state5;
wire   [6:0] add_ln627_3_fu_586_p2;
wire   [0:0] icmp_ln12_fu_592_p2;
wire   [0:0] icmp_ln15_fu_598_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state6_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
reg    ap_predicate_op171_read_state8;
reg    ap_block_state8_pp0_stage0_iter2;
wire    ap_block_state9_pp0_stage0_iter3;
reg    ap_block_state9_io;
wire    ap_block_state10_pp0_stage0_iter4;
reg    ap_block_state10_io;
reg    ap_block_pp0_stage0_11001;
wire   [12:0] add_ln15_fu_604_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln17_fu_610_p2;
reg   [0:0] icmp_ln17_reg_1317;
wire   [0:0] xor_ln52_fu_616_p2;
reg   [0:0] xor_ln52_reg_1326;
wire   [0:0] icmp_ln19_fu_622_p2;
reg   [0:0] icmp_ln19_reg_1337;
wire   [0:0] and_ln52_10_fu_628_p2;
reg   [0:0] and_ln52_10_reg_1342;
wire   [0:0] or_ln17_fu_634_p2;
reg   [0:0] or_ln17_reg_1351;
wire   [8:0] select_ln19_fu_646_p3;
wire   [9:0] select_ln17_5_fu_660_p3;
wire   [3:0] select_ln15_fu_785_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [1:0] select_ln17_4_fu_876_p3;
wire   [3:0] select_ln52_4_fu_921_p3;
reg   [3:0] select_ln52_4_reg_1377;
wire   [3:0] select_ln21_fu_972_p3;
reg   [3:0] select_ln21_reg_1383;
wire   [0:0] select_ln21_1_fu_990_p3;
reg   [0:0] select_ln21_1_reg_1389_pp0_iter2_reg;
wire   [1:0] select_ln21_3_fu_1012_p3;
wire   [0:0] curr_output_last_V_fu_1038_p2;
reg   [0:0] curr_output_last_V_reg_1398;
reg   [0:0] curr_output_last_V_reg_1398_pp0_iter2_reg;
wire   [3:0] input_ch_idx_fu_1044_p2;
wire   [5:0] select_ln21_4_fu_1056_p3;
wire   [15:0] curr_input_data_sub_s_fu_1091_p1;
wire   [63:0] tmp_data_1_fu_1194_p5;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter1_state7;
reg   [6:0] line_buff_group_0_va_address0;
reg    line_buff_group_0_va_ce0;
reg    line_buff_group_0_va_we0;
wire   [15:0] line_buff_group_0_va_d0;
wire   [15:0] line_buff_group_0_va_q0;
reg   [6:0] line_buff_group_1_va_address0;
reg    line_buff_group_1_va_ce0;
reg    line_buff_group_1_va_we0;
wire   [15:0] line_buff_group_1_va_d0;
wire   [15:0] line_buff_group_1_va_q0;
reg   [6:0] line_buff_group_2_va_address0;
reg    line_buff_group_2_va_ce0;
reg    line_buff_group_2_va_we0;
wire   [15:0] line_buff_group_2_va_d0;
wire   [15:0] line_buff_group_2_va_q0;
reg   [6:0] line_buff_group_3_va_address0;
reg    line_buff_group_3_va_ce0;
reg    line_buff_group_3_va_we0;
wire   [15:0] line_buff_group_3_va_d0;
wire   [15:0] line_buff_group_3_va_q0;
reg   [2:0] phi_ln9_reg_299;
wire   [0:0] icmp_ln9_fu_538_p2;
reg   [6:0] phi_mul_reg_310;
reg   [2:0] phi_ln10_reg_321;
wire   [0:0] icmp_ln10_fu_556_p2;
reg   [6:0] phi_mul153_reg_332;
reg   [2:0] phi_ln11_reg_343;
wire   [0:0] icmp_ln11_fu_574_p2;
reg   [6:0] phi_mul155_reg_354;
reg   [2:0] phi_ln12_reg_365;
reg   [6:0] phi_mul157_reg_376;
reg   [3:0] ap_phi_mux_col_assign_phi_fu_446_p4;
reg   [15:0] ap_phi_mux_tmp_data_sub_data_0_s_phi_fu_489_p4;
wire   [15:0] ap_phi_reg_pp0_iter0_tmp_data_sub_data_0_s_reg_486;
reg   [15:0] ap_phi_reg_pp0_iter1_tmp_data_sub_data_0_s_reg_486;
reg   [15:0] ap_phi_reg_pp0_iter2_tmp_data_sub_data_0_s_reg_486;
reg   [15:0] ap_phi_reg_pp0_iter3_tmp_data_sub_data_0_s_reg_486;
reg   [15:0] ap_phi_mux_tmp_data_sub_data_1_s_phi_fu_499_p4;
wire   [15:0] ap_phi_reg_pp0_iter0_tmp_data_sub_data_1_s_reg_496;
reg   [15:0] ap_phi_reg_pp0_iter1_tmp_data_sub_data_1_s_reg_496;
reg   [15:0] ap_phi_reg_pp0_iter2_tmp_data_sub_data_1_s_reg_496;
reg   [15:0] ap_phi_reg_pp0_iter3_tmp_data_sub_data_1_s_reg_496;
reg   [15:0] ap_phi_mux_tmp_data_sub_data_2_s_phi_fu_509_p4;
wire   [15:0] ap_phi_reg_pp0_iter0_tmp_data_sub_data_2_s_reg_506;
reg   [15:0] ap_phi_reg_pp0_iter1_tmp_data_sub_data_2_s_reg_506;
reg   [15:0] ap_phi_reg_pp0_iter2_tmp_data_sub_data_2_s_reg_506;
reg   [15:0] ap_phi_reg_pp0_iter3_tmp_data_sub_data_2_s_reg_506;
reg   [15:0] ap_phi_mux_curr_output_data_sub_3_phi_fu_519_p4;
wire   [15:0] ap_phi_reg_pp0_iter0_curr_output_data_sub_3_reg_516;
reg   [15:0] ap_phi_reg_pp0_iter1_curr_output_data_sub_3_reg_516;
reg   [15:0] ap_phi_reg_pp0_iter2_curr_output_data_sub_3_reg_516;
reg   [15:0] ap_phi_reg_pp0_iter3_curr_output_data_sub_3_reg_516;
wire  signed [63:0] sext_ln203_1_fu_1132_p1;
wire  signed [63:0] sext_ln203_fu_1167_p1;
reg   [5:0] tmp_dest_V_fu_160;
reg   [7:0] tmp_keep_V_fu_164;
reg   [7:0] tmp_strb_V_fu_168;
reg   [1:0] tmp_user_V_fu_172;
reg   [4:0] tmp_id_V_fu_176;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] add_ln19_1_fu_640_p2;
wire   [9:0] add_ln17_1_fu_654_p2;
wire   [0:0] icmp_ln52_fu_668_p2;
wire   [0:0] icmp_ln52_1_fu_678_p2;
wire   [0:0] trunc_ln21_fu_690_p1;
wire   [0:0] trunc_ln17_fu_674_p1;
wire   [3:0] row_idx_fu_706_p2;
wire   [0:0] icmp_ln52_3_fu_719_p2;
wire   [0:0] and_ln52_fu_684_p2;
wire   [0:0] icmp_ln52_5_fu_742_p2;
wire   [0:0] or_ln26_fu_694_p2;
wire   [0:0] icmp_ln52_2_fu_700_p2;
wire   [0:0] icmp_ln23_fu_763_p2;
wire   [0:0] icmp_ln21_fu_774_p2;
wire   [1:0] select_ln52_fu_712_p3;
wire   [1:0] row_stride_fu_792_p2;
wire   [0:0] trunc_ln17_1_fu_805_p1;
wire   [0:0] and_ln52_3_fu_732_p2;
wire   [0:0] select_ln52_1_fu_725_p3;
wire   [0:0] icmp_ln52_6_fu_816_p2;
wire   [0:0] and_ln52_11_fu_822_p2;
wire   [0:0] and_ln52_4_fu_737_p2;
wire   [0:0] xor_ln17_fu_835_p2;
wire   [0:0] and_ln52_5_fu_748_p2;
wire   [0:0] or_ln17_1_fu_840_p2;
wire   [0:0] and_ln52_6_fu_753_p2;
wire   [0:0] and_ln52_7_fu_758_p2;
wire   [0:0] and_ln52_8_fu_769_p2;
wire   [0:0] and_ln52_9_fu_780_p2;
wire   [3:0] select_ln17_fu_798_p3;
wire   [0:0] and_ln17_3_fu_870_p2;
wire   [0:0] or_ln52_fu_889_p2;
wire   [0:0] or_ln52_1_fu_894_p2;
wire   [3:0] col_idx_fu_883_p2;
wire   [0:0] icmp_ln52_7_fu_907_p2;
wire   [0:0] and_ln17_fu_845_p2;
wire   [0:0] select_ln17_1_fu_809_p3;
wire   [0:0] select_ln17_3_fu_851_p3;
wire   [0:0] and_ln17_1_fu_858_p2;
wire   [0:0] xor_ln52_1_fu_937_p2;
wire   [0:0] and_ln17_2_fu_864_p2;
wire   [1:0] select_ln52_2_fu_899_p3;
wire   [0:0] and_ln52_13_fu_949_p2;
wire   [0:0] or_ln21_fu_961_p2;
wire   [0:0] or_ln21_1_fu_967_p2;
wire   [1:0] col_stride_fu_955_p2;
wire   [0:0] trunc_ln21_1_fu_980_p1;
wire   [0:0] or_ln26_1_fu_984_p2;
wire   [0:0] select_ln52_5_fu_929_p3;
wire   [0:0] icmp_ln52_8_fu_998_p2;
wire   [0:0] and_ln52_12_fu_943_p2;
wire   [0:0] select_ln21_2_fu_1004_p3;
wire   [0:0] icmp_ln52_4_fu_1020_p2;
wire   [0:0] and_ln52_1_fu_1026_p2;
wire   [0:0] select_ln52_3_fu_913_p3;
wire   [0:0] and_ln52_2_fu_1032_p2;
wire   [0:0] select_ln17_2_fu_828_p3;
wire   [5:0] add_ln21_1_fu_1050_p2;
wire   [7:0] grp_fu_1207_p3;
wire   [7:0] grp_fu_1216_p3;
wire   [4:0] grp_fu_1207_p0;
wire   [3:0] grp_fu_1207_p1;
wire   [3:0] grp_fu_1207_p2;
wire   [7:0] zext_ln52_fu_1064_p1;
wire   [3:0] grp_fu_1216_p0;
wire   [4:0] grp_fu_1216_p1;
wire   [3:0] grp_fu_1216_p2;
wire    ap_CS_fsm_state11;
reg    ap_block_state11;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [7:0] grp_fu_1207_p10;
wire   [7:0] grp_fu_1216_p00;
reg    ap_condition_1185;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 inStream_V_data_0_sel_rd = 1'b0;
#0 inStream_V_data_0_sel_wr = 1'b0;
#0 inStream_V_data_0_state = 2'd0;
#0 inStream_V_keep_V_0_sel_rd = 1'b0;
#0 inStream_V_keep_V_0_sel_wr = 1'b0;
#0 inStream_V_keep_V_0_state = 2'd0;
#0 inStream_V_strb_V_0_sel_rd = 1'b0;
#0 inStream_V_strb_V_0_sel_wr = 1'b0;
#0 inStream_V_strb_V_0_state = 2'd0;
#0 inStream_V_user_V_0_sel_rd = 1'b0;
#0 inStream_V_user_V_0_sel_wr = 1'b0;
#0 inStream_V_user_V_0_state = 2'd0;
#0 inStream_V_id_V_0_sel_rd = 1'b0;
#0 inStream_V_id_V_0_sel_wr = 1'b0;
#0 inStream_V_id_V_0_state = 2'd0;
#0 inStream_V_dest_V_0_sel_rd = 1'b0;
#0 inStream_V_dest_V_0_sel_wr = 1'b0;
#0 inStream_V_dest_V_0_state = 2'd0;
#0 outStream_V_data_1_sel_rd = 1'b0;
#0 outStream_V_data_1_sel_wr = 1'b0;
#0 outStream_V_data_1_state = 2'd0;
#0 outStream_V_keep_V_1_sel_rd = 1'b0;
#0 outStream_V_keep_V_1_sel_wr = 1'b0;
#0 outStream_V_keep_V_1_state = 2'd0;
#0 outStream_V_strb_V_1_sel_rd = 1'b0;
#0 outStream_V_strb_V_1_sel_wr = 1'b0;
#0 outStream_V_strb_V_1_state = 2'd0;
#0 outStream_V_user_V_1_sel_rd = 1'b0;
#0 outStream_V_user_V_1_sel_wr = 1'b0;
#0 outStream_V_user_V_1_state = 2'd0;
#0 outStream_V_last_V_1_sel_rd = 1'b0;
#0 outStream_V_last_V_1_sel_wr = 1'b0;
#0 outStream_V_last_V_1_state = 2'd0;
#0 outStream_V_id_V_1_sel_rd = 1'b0;
#0 outStream_V_id_V_1_sel_wr = 1'b0;
#0 outStream_V_id_V_1_state = 2'd0;
#0 outStream_V_dest_V_1_sel_rd = 1'b0;
#0 outStream_V_dest_V_1_sel_wr = 1'b0;
#0 outStream_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

yolo_upsamp_top_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
yolo_upsamp_top_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

yolo_upsamp_top_line_buff_group_0_va #(
    .DataWidth( 16 ),
    .AddressRange( 104 ),
    .AddressWidth( 7 ))
line_buff_group_0_va_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buff_group_0_va_address0),
    .ce0(line_buff_group_0_va_ce0),
    .we0(line_buff_group_0_va_we0),
    .d0(line_buff_group_0_va_d0),
    .q0(line_buff_group_0_va_q0)
);

yolo_upsamp_top_line_buff_group_0_va #(
    .DataWidth( 16 ),
    .AddressRange( 104 ),
    .AddressWidth( 7 ))
line_buff_group_1_va_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buff_group_1_va_address0),
    .ce0(line_buff_group_1_va_ce0),
    .we0(line_buff_group_1_va_we0),
    .d0(line_buff_group_1_va_d0),
    .q0(line_buff_group_1_va_q0)
);

yolo_upsamp_top_line_buff_group_0_va #(
    .DataWidth( 16 ),
    .AddressRange( 104 ),
    .AddressWidth( 7 ))
line_buff_group_2_va_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buff_group_2_va_address0),
    .ce0(line_buff_group_2_va_ce0),
    .we0(line_buff_group_2_va_we0),
    .d0(line_buff_group_2_va_d0),
    .q0(line_buff_group_2_va_q0)
);

yolo_upsamp_top_line_buff_group_0_va #(
    .DataWidth( 16 ),
    .AddressRange( 104 ),
    .AddressWidth( 7 ))
line_buff_group_3_va_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buff_group_3_va_address0),
    .ce0(line_buff_group_3_va_ce0),
    .we0(line_buff_group_3_va_we0),
    .d0(line_buff_group_3_va_d0),
    .q0(line_buff_group_3_va_q0)
);

yolo_upsamp_top_mac_muladd_5ns_4ns_4ns_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
yolo_upsamp_top_mac_muladd_5ns_4ns_4ns_8_1_1_U1(
    .din0(grp_fu_1207_p0),
    .din1(grp_fu_1207_p1),
    .din2(grp_fu_1207_p2),
    .dout(grp_fu_1207_p3)
);

yolo_upsamp_top_mac_muladd_4ns_5ns_4ns_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
yolo_upsamp_top_mac_muladd_4ns_5ns_4ns_8_1_1_U2(
    .din0(grp_fu_1216_p0),
    .din1(grp_fu_1216_p1),
    .din2(grp_fu_1216_p2),
    .dout(grp_fu_1216_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((icmp_ln15_fu_598_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln12_fu_592_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state7)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((icmp_ln12_fu_592_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_data_0_ack_out == 1'b1) & (inStream_V_data_0_vld_out == 1'b1))) begin
            inStream_V_data_0_sel_rd <= ~inStream_V_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_data_0_ack_in == 1'b1) & (inStream_V_data_0_vld_in == 1'b1))) begin
            inStream_V_data_0_sel_wr <= ~inStream_V_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_data_0_state == 2'd2) & (inStream_V_data_0_vld_in == 1'b0)) | ((inStream_V_data_0_state == 2'd3) & (inStream_V_data_0_vld_in == 1'b0) & (inStream_V_data_0_ack_out == 1'b1)))) begin
            inStream_V_data_0_state <= 2'd2;
        end else if ((((inStream_V_data_0_state == 2'd1) & (inStream_V_data_0_ack_out == 1'b0)) | ((inStream_V_data_0_state == 2'd3) & (inStream_V_data_0_ack_out == 1'b0) & (inStream_V_data_0_vld_in == 1'b1)))) begin
            inStream_V_data_0_state <= 2'd1;
        end else if (((~((inStream_V_data_0_vld_in == 1'b0) & (inStream_V_data_0_ack_out == 1'b1)) & ~((inStream_V_data_0_ack_out == 1'b0) & (inStream_V_data_0_vld_in == 1'b1)) & (inStream_V_data_0_state == 2'd3)) | ((inStream_V_data_0_state == 2'd1) & (inStream_V_data_0_ack_out == 1'b1)) | ((inStream_V_data_0_state == 2'd2) & (inStream_V_data_0_vld_in == 1'b1)))) begin
            inStream_V_data_0_state <= 2'd3;
        end else begin
            inStream_V_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_out == 1'b1) & (inStream_V_dest_V_0_vld_out == 1'b1))) begin
            inStream_V_dest_V_0_sel_rd <= ~inStream_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_in == 1'b1) & (inStream_V_dest_V_0_vld_in == 1'b1))) begin
            inStream_V_dest_V_0_sel_wr <= ~inStream_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_dest_V_0_state == 2'd2) & (inStream_V_dest_V_0_vld_in == 1'b0)) | ((inStream_V_dest_V_0_state == 2'd3) & (inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd2;
        end else if ((((inStream_V_dest_V_0_state == 2'd1) & (inStream_V_dest_V_0_ack_out == 1'b0)) | ((inStream_V_dest_V_0_state == 2'd3) & (inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd1;
        end else if (((~((inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1)) & ~((inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1)) & (inStream_V_dest_V_0_state == 2'd3)) | ((inStream_V_dest_V_0_state == 2'd1) & (inStream_V_dest_V_0_ack_out == 1'b1)) | ((inStream_V_dest_V_0_state == 2'd2) & (inStream_V_dest_V_0_vld_in == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd3;
        end else begin
            inStream_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_id_V_0_ack_out == 1'b1) & (inStream_V_id_V_0_vld_out == 1'b1))) begin
            inStream_V_id_V_0_sel_rd <= ~inStream_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_id_V_0_ack_in == 1'b1) & (inStream_V_id_V_0_vld_in == 1'b1))) begin
            inStream_V_id_V_0_sel_wr <= ~inStream_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_id_V_0_state == 2'd2) & (inStream_V_id_V_0_vld_in == 1'b0)) | ((inStream_V_id_V_0_state == 2'd3) & (inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_ack_out == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd2;
        end else if ((((inStream_V_id_V_0_state == 2'd1) & (inStream_V_id_V_0_ack_out == 1'b0)) | ((inStream_V_id_V_0_state == 2'd3) & (inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_vld_in == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd1;
        end else if (((~((inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_ack_out == 1'b1)) & ~((inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_vld_in == 1'b1)) & (inStream_V_id_V_0_state == 2'd3)) | ((inStream_V_id_V_0_state == 2'd1) & (inStream_V_id_V_0_ack_out == 1'b1)) | ((inStream_V_id_V_0_state == 2'd2) & (inStream_V_id_V_0_vld_in == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd3;
        end else begin
            inStream_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_ack_out == 1'b1) & (inStream_V_keep_V_0_vld_out == 1'b1))) begin
            inStream_V_keep_V_0_sel_rd <= ~inStream_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_ack_in == 1'b1) & (inStream_V_keep_V_0_vld_in == 1'b1))) begin
            inStream_V_keep_V_0_sel_wr <= ~inStream_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_keep_V_0_state == 2'd2) & (inStream_V_keep_V_0_vld_in == 1'b0)) | ((inStream_V_keep_V_0_state == 2'd3) & (inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd2;
        end else if ((((inStream_V_keep_V_0_state == 2'd1) & (inStream_V_keep_V_0_ack_out == 1'b0)) | ((inStream_V_keep_V_0_state == 2'd3) & (inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd1;
        end else if (((~((inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1)) & ~((inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1)) & (inStream_V_keep_V_0_state == 2'd3)) | ((inStream_V_keep_V_0_state == 2'd1) & (inStream_V_keep_V_0_ack_out == 1'b1)) | ((inStream_V_keep_V_0_state == 2'd2) & (inStream_V_keep_V_0_vld_in == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd3;
        end else begin
            inStream_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_out == 1'b1) & (inStream_V_strb_V_0_vld_out == 1'b1))) begin
            inStream_V_strb_V_0_sel_rd <= ~inStream_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_in == 1'b1) & (inStream_V_strb_V_0_vld_in == 1'b1))) begin
            inStream_V_strb_V_0_sel_wr <= ~inStream_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_strb_V_0_state == 2'd2) & (inStream_V_strb_V_0_vld_in == 1'b0)) | ((inStream_V_strb_V_0_state == 2'd3) & (inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd2;
        end else if ((((inStream_V_strb_V_0_state == 2'd1) & (inStream_V_strb_V_0_ack_out == 1'b0)) | ((inStream_V_strb_V_0_state == 2'd3) & (inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd1;
        end else if (((~((inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1)) & ~((inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1)) & (inStream_V_strb_V_0_state == 2'd3)) | ((inStream_V_strb_V_0_state == 2'd1) & (inStream_V_strb_V_0_ack_out == 1'b1)) | ((inStream_V_strb_V_0_state == 2'd2) & (inStream_V_strb_V_0_vld_in == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd3;
        end else begin
            inStream_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_out == 1'b1) & (inStream_V_user_V_0_vld_out == 1'b1))) begin
            inStream_V_user_V_0_sel_rd <= ~inStream_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_in == 1'b1) & (inStream_V_user_V_0_vld_in == 1'b1))) begin
            inStream_V_user_V_0_sel_wr <= ~inStream_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_user_V_0_state == 2'd2) & (inStream_V_user_V_0_vld_in == 1'b0)) | ((inStream_V_user_V_0_state == 2'd3) & (inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd2;
        end else if ((((inStream_V_user_V_0_state == 2'd1) & (inStream_V_user_V_0_ack_out == 1'b0)) | ((inStream_V_user_V_0_state == 2'd3) & (inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd1;
        end else if (((~((inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1)) & ~((inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1)) & (inStream_V_user_V_0_state == 2'd3)) | ((inStream_V_user_V_0_state == 2'd1) & (inStream_V_user_V_0_ack_out == 1'b1)) | ((inStream_V_user_V_0_state == 2'd2) & (inStream_V_user_V_0_vld_in == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd3;
        end else begin
            inStream_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_data_1_ack_out == 1'b1) & (outStream_V_data_1_vld_out == 1'b1))) begin
            outStream_V_data_1_sel_rd <= ~outStream_V_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_data_1_ack_in == 1'b1) & (outStream_V_data_1_vld_in == 1'b1))) begin
            outStream_V_data_1_sel_wr <= ~outStream_V_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_data_1_state == 2'd2) & (outStream_V_data_1_vld_in == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_V_data_1_vld_in == 1'b0) & (outStream_V_data_1_ack_out == 1'b1)))) begin
            outStream_V_data_1_state <= 2'd2;
        end else if ((((outStream_V_data_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_data_1_vld_in == 1'b1)))) begin
            outStream_V_data_1_state <= 2'd1;
        end else if (((~((outStream_V_data_1_vld_in == 1'b0) & (outStream_V_data_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_data_1_vld_in == 1'b1)) & (outStream_V_data_1_state == 2'd3)) | ((outStream_V_data_1_state == 2'd1) & (outStream_V_data_1_ack_out == 1'b1)) | ((outStream_V_data_1_state == 2'd2) & (outStream_V_data_1_vld_in == 1'b1)))) begin
            outStream_V_data_1_state <= 2'd3;
        end else begin
            outStream_V_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_out == 1'b1) & (outStream_V_dest_V_1_vld_out == 1'b1))) begin
            outStream_V_dest_V_1_sel_rd <= ~outStream_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_in == 1'b1) & (outStream_V_dest_V_1_vld_in == 1'b1))) begin
            outStream_V_dest_V_1_sel_wr <= ~outStream_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_dest_V_1_state == 2'd2) & (outStream_V_dest_V_1_vld_in == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd2;
        end else if ((((outStream_V_dest_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd1;
        end else if (((~((outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)) & (outStream_V_dest_V_1_state == 2'd3)) | ((outStream_V_dest_V_1_state == 2'd1) & (outStream_V_dest_V_1_ack_out == 1'b1)) | ((outStream_V_dest_V_1_state == 2'd2) & (outStream_V_dest_V_1_vld_in == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd3;
        end else begin
            outStream_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_out == 1'b1) & (outStream_V_id_V_1_vld_out == 1'b1))) begin
            outStream_V_id_V_1_sel_rd <= ~outStream_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_in == 1'b1) & (outStream_V_id_V_1_vld_in == 1'b1))) begin
            outStream_V_id_V_1_sel_wr <= ~outStream_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_id_V_1_state == 2'd2) & (outStream_V_id_V_1_vld_in == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd2;
        end else if ((((outStream_V_id_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd1;
        end else if (((~((outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)) & (outStream_V_id_V_1_state == 2'd3)) | ((outStream_V_id_V_1_state == 2'd1) & (outStream_V_id_V_1_ack_out == 1'b1)) | ((outStream_V_id_V_1_state == 2'd2) & (outStream_V_id_V_1_vld_in == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd3;
        end else begin
            outStream_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_out == 1'b1) & (outStream_V_keep_V_1_vld_out == 1'b1))) begin
            outStream_V_keep_V_1_sel_rd <= ~outStream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_in == 1'b1) & (outStream_V_keep_V_1_vld_in == 1'b1))) begin
            outStream_V_keep_V_1_sel_wr <= ~outStream_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_keep_V_1_state == 2'd2) & (outStream_V_keep_V_1_vld_in == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd2;
        end else if ((((outStream_V_keep_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd1;
        end else if (((~((outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)) & (outStream_V_keep_V_1_state == 2'd3)) | ((outStream_V_keep_V_1_state == 2'd1) & (outStream_V_keep_V_1_ack_out == 1'b1)) | ((outStream_V_keep_V_1_state == 2'd2) & (outStream_V_keep_V_1_vld_in == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd3;
        end else begin
            outStream_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_out == 1'b1) & (outStream_V_last_V_1_vld_out == 1'b1))) begin
            outStream_V_last_V_1_sel_rd <= ~outStream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_in == 1'b1) & (outStream_V_last_V_1_vld_in == 1'b1))) begin
            outStream_V_last_V_1_sel_wr <= ~outStream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_last_V_1_state == 2'd2) & (outStream_V_last_V_1_vld_in == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd2;
        end else if ((((outStream_V_last_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd1;
        end else if (((~((outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)) & (outStream_V_last_V_1_state == 2'd3)) | ((outStream_V_last_V_1_state == 2'd1) & (outStream_V_last_V_1_ack_out == 1'b1)) | ((outStream_V_last_V_1_state == 2'd2) & (outStream_V_last_V_1_vld_in == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd3;
        end else begin
            outStream_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_out == 1'b1) & (outStream_V_strb_V_1_vld_out == 1'b1))) begin
            outStream_V_strb_V_1_sel_rd <= ~outStream_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_in == 1'b1) & (outStream_V_strb_V_1_vld_in == 1'b1))) begin
            outStream_V_strb_V_1_sel_wr <= ~outStream_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_strb_V_1_state == 2'd2) & (outStream_V_strb_V_1_vld_in == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd2;
        end else if ((((outStream_V_strb_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd1;
        end else if (((~((outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)) & (outStream_V_strb_V_1_state == 2'd3)) | ((outStream_V_strb_V_1_state == 2'd1) & (outStream_V_strb_V_1_ack_out == 1'b1)) | ((outStream_V_strb_V_1_state == 2'd2) & (outStream_V_strb_V_1_vld_in == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd3;
        end else begin
            outStream_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_out == 1'b1) & (outStream_V_user_V_1_vld_out == 1'b1))) begin
            outStream_V_user_V_1_sel_rd <= ~outStream_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_in == 1'b1) & (outStream_V_user_V_1_vld_in == 1'b1))) begin
            outStream_V_user_V_1_sel_wr <= ~outStream_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_user_V_1_state == 2'd2) & (outStream_V_user_V_1_vld_in == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd2;
        end else if ((((outStream_V_user_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd1;
        end else if (((~((outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)) & (outStream_V_user_V_1_state == 2'd3)) | ((outStream_V_user_V_1_state == 2'd1) & (outStream_V_user_V_1_ack_out == 1'b1)) | ((outStream_V_user_V_1_state == 2'd2) & (outStream_V_user_V_1_vld_in == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd3;
        end else begin
            outStream_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((select_ln21_1_reg_1389 == 1'd0) & (icmp_ln15_reg_1308_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_curr_output_data_sub_3_reg_516 <= {{inStream_V_data_0_data_out[63:48]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_curr_output_data_sub_3_reg_516 <= ap_phi_reg_pp0_iter2_curr_output_data_sub_3_reg_516;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((select_ln21_1_reg_1389 == 1'd0) & (icmp_ln15_reg_1308_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_tmp_data_sub_data_0_s_reg_486 <= curr_input_data_sub_s_fu_1091_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_tmp_data_sub_data_0_s_reg_486 <= ap_phi_reg_pp0_iter2_tmp_data_sub_data_0_s_reg_486;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((select_ln21_1_reg_1389 == 1'd0) & (icmp_ln15_reg_1308_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_tmp_data_sub_data_1_s_reg_496 <= {{inStream_V_data_0_data_out[31:16]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_tmp_data_sub_data_1_s_reg_496 <= ap_phi_reg_pp0_iter2_tmp_data_sub_data_1_s_reg_496;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((select_ln21_1_reg_1389 == 1'd0) & (icmp_ln15_reg_1308_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_tmp_data_sub_data_2_s_reg_506 <= {{inStream_V_data_0_data_out[47:32]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_tmp_data_sub_data_2_s_reg_506 <= ap_phi_reg_pp0_iter2_tmp_data_sub_data_2_s_reg_506;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_592_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        col_assign_reg_442 <= 4'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln15_reg_1308_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        col_assign_reg_442 <= select_ln52_4_reg_1377;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_592_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        col_stride_0_reg_464 <= 2'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln15_reg_1308 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        col_stride_0_reg_464 <= select_ln21_3_fu_1012_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_592_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        indvar_flatten136_reg_387 <= 13'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln15_fu_598_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten136_reg_387 <= add_ln15_fu_604_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_592_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        indvar_flatten27_reg_409 <= 9'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln15_fu_598_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten27_reg_409 <= select_ln19_fu_646_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_592_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        indvar_flatten72_reg_398 <= 10'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln15_fu_598_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten72_reg_398 <= select_ln17_5_fu_660_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_592_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        indvar_flatten_reg_453 <= 6'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln15_reg_1308 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_453 <= select_ln21_4_fu_1056_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_592_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        input_ch_idx_0_reg_475 <= 4'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln15_reg_1308 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        input_ch_idx_0_reg_475 <= input_ch_idx_fu_1044_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_538_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln10_reg_321 <= 3'd0;
    end else if (((icmp_ln10_fu_556_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln10_reg_321 <= add_ln10_fu_544_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_556_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln11_reg_343 <= 3'd0;
    end else if (((icmp_ln11_fu_574_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_ln11_reg_343 <= add_ln11_fu_562_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_ln12_reg_365 <= 3'd0;
    end else if (((icmp_ln12_fu_592_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_ln12_reg_365 <= add_ln12_fu_580_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_538_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln9_reg_299 <= add_ln9_fu_526_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln9_reg_299 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_538_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul153_reg_332 <= 7'd0;
    end else if (((icmp_ln10_fu_556_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul153_reg_332 <= add_ln627_1_fu_550_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_556_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul155_reg_354 <= 7'd0;
    end else if (((icmp_ln11_fu_574_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul155_reg_354 <= add_ln627_2_fu_568_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul157_reg_376 <= 7'd0;
    end else if (((icmp_ln12_fu_592_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_mul157_reg_376 <= add_ln627_3_fu_586_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_538_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_310 <= add_ln627_fu_532_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_310 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_592_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        row_idx_0_reg_420 <= 4'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln15_reg_1308 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        row_idx_0_reg_420 <= select_ln15_fu_785_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_592_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        row_stride_0_reg_431 <= 2'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln15_reg_1308 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        row_stride_0_reg_431 <= select_ln17_4_fu_876_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln15_fu_598_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln52_10_reg_1342 <= and_ln52_10_fu_628_p2;
        icmp_ln17_reg_1317 <= icmp_ln17_fu_610_p2;
        icmp_ln19_reg_1337 <= icmp_ln19_fu_622_p2;
        or_ln17_reg_1351 <= or_ln17_fu_634_p2;
        xor_ln52_reg_1326 <= xor_ln52_fu_616_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_curr_output_data_sub_3_reg_516 <= ap_phi_reg_pp0_iter0_curr_output_data_sub_3_reg_516;
        ap_phi_reg_pp0_iter1_tmp_data_sub_data_0_s_reg_486 <= ap_phi_reg_pp0_iter0_tmp_data_sub_data_0_s_reg_486;
        ap_phi_reg_pp0_iter1_tmp_data_sub_data_1_s_reg_496 <= ap_phi_reg_pp0_iter0_tmp_data_sub_data_1_s_reg_496;
        ap_phi_reg_pp0_iter1_tmp_data_sub_data_2_s_reg_506 <= ap_phi_reg_pp0_iter0_tmp_data_sub_data_2_s_reg_506;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter2_curr_output_data_sub_3_reg_516 <= ap_phi_reg_pp0_iter1_curr_output_data_sub_3_reg_516;
        ap_phi_reg_pp0_iter2_tmp_data_sub_data_0_s_reg_486 <= ap_phi_reg_pp0_iter1_tmp_data_sub_data_0_s_reg_486;
        ap_phi_reg_pp0_iter2_tmp_data_sub_data_1_s_reg_496 <= ap_phi_reg_pp0_iter1_tmp_data_sub_data_1_s_reg_496;
        ap_phi_reg_pp0_iter2_tmp_data_sub_data_2_s_reg_506 <= ap_phi_reg_pp0_iter1_tmp_data_sub_data_2_s_reg_506;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln15_reg_1308 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        curr_output_last_V_reg_1398 <= curr_output_last_V_fu_1038_p2;
        select_ln21_1_reg_1389 <= select_ln21_1_fu_990_p3;
        select_ln21_reg_1383 <= select_ln21_fu_972_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        curr_output_last_V_reg_1398_pp0_iter2_reg <= curr_output_last_V_reg_1398;
        icmp_ln15_reg_1308_pp0_iter2_reg <= icmp_ln15_reg_1308_pp0_iter1_reg;
        icmp_ln15_reg_1308_pp0_iter3_reg <= icmp_ln15_reg_1308_pp0_iter2_reg;
        select_ln21_1_reg_1389_pp0_iter2_reg <= select_ln21_1_reg_1389;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln15_reg_1308 <= icmp_ln15_fu_598_p2;
        icmp_ln15_reg_1308_pp0_iter1_reg <= icmp_ln15_reg_1308;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_0_load_A == 1'b1)) begin
        inStream_V_data_0_payload_A <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_0_load_B == 1'b1)) begin
        inStream_V_data_0_payload_B <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_A == 1'b1)) begin
        inStream_V_dest_V_0_payload_A <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_B == 1'b1)) begin
        inStream_V_dest_V_0_payload_B <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_id_V_0_load_A == 1'b1)) begin
        inStream_V_id_V_0_payload_A <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_id_V_0_load_B == 1'b1)) begin
        inStream_V_id_V_0_payload_B <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_A == 1'b1)) begin
        inStream_V_keep_V_0_payload_A <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_B == 1'b1)) begin
        inStream_V_keep_V_0_payload_B <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_A == 1'b1)) begin
        inStream_V_strb_V_0_payload_A <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_B == 1'b1)) begin
        inStream_V_strb_V_0_payload_B <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_A == 1'b1)) begin
        inStream_V_user_V_0_payload_A <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_B == 1'b1)) begin
        inStream_V_user_V_0_payload_B <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_1_load_A == 1'b1)) begin
        outStream_V_data_1_payload_A <= tmp_data_1_fu_1194_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_1_load_B == 1'b1)) begin
        outStream_V_data_1_payload_B <= tmp_data_1_fu_1194_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_A == 1'b1)) begin
        outStream_V_dest_V_1_payload_A <= tmp_dest_V_fu_160;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_B == 1'b1)) begin
        outStream_V_dest_V_1_payload_B <= tmp_dest_V_fu_160;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_A == 1'b1)) begin
        outStream_V_id_V_1_payload_A <= tmp_id_V_fu_176;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_B == 1'b1)) begin
        outStream_V_id_V_1_payload_B <= tmp_id_V_fu_176;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_A == 1'b1)) begin
        outStream_V_keep_V_1_payload_A <= tmp_keep_V_fu_164;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_B == 1'b1)) begin
        outStream_V_keep_V_1_payload_B <= tmp_keep_V_fu_164;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_A == 1'b1)) begin
        outStream_V_last_V_1_payload_A <= curr_output_last_V_reg_1398_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_B == 1'b1)) begin
        outStream_V_last_V_1_payload_B <= curr_output_last_V_reg_1398_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_A == 1'b1)) begin
        outStream_V_strb_V_1_payload_A <= tmp_strb_V_fu_168;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_B == 1'b1)) begin
        outStream_V_strb_V_1_payload_B <= tmp_strb_V_fu_168;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_A == 1'b1)) begin
        outStream_V_user_V_1_payload_A <= tmp_user_V_fu_172;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_B == 1'b1)) begin
        outStream_V_user_V_1_payload_B <= tmp_user_V_fu_172;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln15_reg_1308 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        select_ln52_4_reg_1377 <= select_ln52_4_fu_921_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln21_1_reg_1389 == 1'd0) & (icmp_ln15_reg_1308_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmp_dest_V_fu_160 <= inStream_V_dest_V_0_data_out;
        tmp_id_V_fu_176 <= inStream_V_id_V_0_data_out;
        tmp_keep_V_fu_164 <= inStream_V_keep_V_0_data_out;
        tmp_strb_V_fu_168 <= inStream_V_strb_V_0_data_out;
        tmp_user_V_fu_172 <= inStream_V_user_V_0_data_out;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state7 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | (outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln15_reg_1308_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_col_assign_phi_fu_446_p4 = select_ln52_4_reg_1377;
    end else begin
        ap_phi_mux_col_assign_phi_fu_446_p4 = col_assign_reg_442;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (select_ln21_1_reg_1389_pp0_iter2_reg == 1'd1) & (icmp_ln15_reg_1308_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_mux_curr_output_data_sub_3_phi_fu_519_p4 = line_buff_group_3_va_q0;
    end else begin
        ap_phi_mux_curr_output_data_sub_3_phi_fu_519_p4 = ap_phi_reg_pp0_iter3_curr_output_data_sub_3_reg_516;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (select_ln21_1_reg_1389_pp0_iter2_reg == 1'd1) & (icmp_ln15_reg_1308_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_mux_tmp_data_sub_data_0_s_phi_fu_489_p4 = line_buff_group_0_va_q0;
    end else begin
        ap_phi_mux_tmp_data_sub_data_0_s_phi_fu_489_p4 = ap_phi_reg_pp0_iter3_tmp_data_sub_data_0_s_reg_486;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (select_ln21_1_reg_1389_pp0_iter2_reg == 1'd1) & (icmp_ln15_reg_1308_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_mux_tmp_data_sub_data_1_s_phi_fu_499_p4 = line_buff_group_1_va_q0;
    end else begin
        ap_phi_mux_tmp_data_sub_data_1_s_phi_fu_499_p4 = ap_phi_reg_pp0_iter3_tmp_data_sub_data_1_s_reg_496;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (select_ln21_1_reg_1389_pp0_iter2_reg == 1'd1) & (icmp_ln15_reg_1308_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_mux_tmp_data_sub_data_2_s_phi_fu_509_p4 = line_buff_group_2_va_q0;
    end else begin
        ap_phi_mux_tmp_data_sub_data_2_s_phi_fu_509_p4 = ap_phi_reg_pp0_iter3_tmp_data_sub_data_2_s_reg_506;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | (outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (select_ln21_1_reg_1389 == 1'd0) & (icmp_ln15_reg_1308_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inStream_TDATA_blk_n = inStream_V_data_0_state[1'd0];
    end else begin
        inStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op171_read_state8 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inStream_V_data_0_ack_out = 1'b1;
    end else begin
        inStream_V_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_data_0_sel == 1'b1)) begin
        inStream_V_data_0_data_out = inStream_V_data_0_payload_B;
    end else begin
        inStream_V_data_0_data_out = inStream_V_data_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op171_read_state8 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inStream_V_dest_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_dest_V_0_sel == 1'b1)) begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_B;
    end else begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op171_read_state8 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inStream_V_id_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_id_V_0_sel == 1'b1)) begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_B;
    end else begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op171_read_state8 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inStream_V_keep_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_keep_V_0_sel == 1'b1)) begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_B;
    end else begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op171_read_state8 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inStream_V_strb_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_strb_V_0_sel == 1'b1)) begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_B;
    end else begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op171_read_state8 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inStream_V_user_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_user_V_0_sel == 1'b1)) begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_B;
    end else begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1185)) begin
        if ((select_ln21_1_reg_1389 == 1'd1)) begin
            line_buff_group_0_va_address0 = sext_ln203_fu_1167_p1;
        end else if ((select_ln21_1_reg_1389 == 1'd0)) begin
            line_buff_group_0_va_address0 = sext_ln203_1_fu_1132_p1;
        end else begin
            line_buff_group_0_va_address0 = 'bx;
        end
    end else begin
        line_buff_group_0_va_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (select_ln21_1_reg_1389 == 1'd1) & (icmp_ln15_reg_1308_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (select_ln21_1_reg_1389 == 1'd0) & (icmp_ln15_reg_1308_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        line_buff_group_0_va_ce0 = 1'b1;
    end else begin
        line_buff_group_0_va_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln21_1_reg_1389 == 1'd0) & (icmp_ln15_reg_1308_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buff_group_0_va_we0 = 1'b1;
    end else begin
        line_buff_group_0_va_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1185)) begin
        if ((select_ln21_1_reg_1389 == 1'd1)) begin
            line_buff_group_1_va_address0 = sext_ln203_fu_1167_p1;
        end else if ((select_ln21_1_reg_1389 == 1'd0)) begin
            line_buff_group_1_va_address0 = sext_ln203_1_fu_1132_p1;
        end else begin
            line_buff_group_1_va_address0 = 'bx;
        end
    end else begin
        line_buff_group_1_va_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (select_ln21_1_reg_1389 == 1'd1) & (icmp_ln15_reg_1308_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (select_ln21_1_reg_1389 == 1'd0) & (icmp_ln15_reg_1308_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        line_buff_group_1_va_ce0 = 1'b1;
    end else begin
        line_buff_group_1_va_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln21_1_reg_1389 == 1'd0) & (icmp_ln15_reg_1308_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buff_group_1_va_we0 = 1'b1;
    end else begin
        line_buff_group_1_va_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1185)) begin
        if ((select_ln21_1_reg_1389 == 1'd1)) begin
            line_buff_group_2_va_address0 = sext_ln203_fu_1167_p1;
        end else if ((select_ln21_1_reg_1389 == 1'd0)) begin
            line_buff_group_2_va_address0 = sext_ln203_1_fu_1132_p1;
        end else begin
            line_buff_group_2_va_address0 = 'bx;
        end
    end else begin
        line_buff_group_2_va_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (select_ln21_1_reg_1389 == 1'd1) & (icmp_ln15_reg_1308_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (select_ln21_1_reg_1389 == 1'd0) & (icmp_ln15_reg_1308_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        line_buff_group_2_va_ce0 = 1'b1;
    end else begin
        line_buff_group_2_va_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln21_1_reg_1389 == 1'd0) & (icmp_ln15_reg_1308_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buff_group_2_va_we0 = 1'b1;
    end else begin
        line_buff_group_2_va_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1185)) begin
        if ((select_ln21_1_reg_1389 == 1'd1)) begin
            line_buff_group_3_va_address0 = sext_ln203_fu_1167_p1;
        end else if ((select_ln21_1_reg_1389 == 1'd0)) begin
            line_buff_group_3_va_address0 = sext_ln203_1_fu_1132_p1;
        end else begin
            line_buff_group_3_va_address0 = 'bx;
        end
    end else begin
        line_buff_group_3_va_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (select_ln21_1_reg_1389 == 1'd1) & (icmp_ln15_reg_1308_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (select_ln21_1_reg_1389 == 1'd0) & (icmp_ln15_reg_1308_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        line_buff_group_3_va_ce0 = 1'b1;
    end else begin
        line_buff_group_3_va_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln21_1_reg_1389 == 1'd0) & (icmp_ln15_reg_1308_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buff_group_3_va_we0 = 1'b1;
    end else begin
        line_buff_group_3_va_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (icmp_ln15_reg_1308_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (icmp_ln15_reg_1308_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        outStream_TDATA_blk_n = outStream_V_data_1_state[1'd1];
    end else begin
        outStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((outStream_V_data_1_sel == 1'b1)) begin
        outStream_V_data_1_data_out = outStream_V_data_1_payload_B;
    end else begin
        outStream_V_data_1_data_out = outStream_V_data_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln15_reg_1308_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        outStream_V_data_1_vld_in = 1'b1;
    end else begin
        outStream_V_data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_dest_V_1_sel == 1'b1)) begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_B;
    end else begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln15_reg_1308_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        outStream_V_dest_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_id_V_1_sel == 1'b1)) begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_B;
    end else begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln15_reg_1308_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        outStream_V_id_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_keep_V_1_sel == 1'b1)) begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_B;
    end else begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln15_reg_1308_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        outStream_V_keep_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_last_V_1_sel == 1'b1)) begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_B;
    end else begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln15_reg_1308_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        outStream_V_last_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_strb_V_1_sel == 1'b1)) begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_B;
    end else begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln15_reg_1308_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        outStream_V_strb_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_user_V_1_sel == 1'b1)) begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_B;
    end else begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln15_reg_1308_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        outStream_V_user_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln9_fu_538_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln10_fu_556_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln11_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln12_fu_592_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)) | ((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            if ((~((outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | (outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_544_p2 = (phi_ln10_reg_321 + 3'd1);

assign add_ln11_fu_562_p2 = (phi_ln11_reg_343 + 3'd1);

assign add_ln12_fu_580_p2 = (phi_ln12_reg_365 + 3'd1);

assign add_ln15_fu_604_p2 = (13'd1 + indvar_flatten136_reg_387);

assign add_ln17_1_fu_654_p2 = (indvar_flatten72_reg_398 + 10'd1);

assign add_ln19_1_fu_640_p2 = (indvar_flatten27_reg_409 + 9'd1);

assign add_ln21_1_fu_1050_p2 = (indvar_flatten_reg_453 + 6'd1);

assign add_ln627_1_fu_550_p2 = (phi_mul153_reg_332 + 7'd13);

assign add_ln627_2_fu_568_p2 = (phi_mul155_reg_354 + 7'd13);

assign add_ln627_3_fu_586_p2 = (phi_mul157_reg_376 + 7'd13);

assign add_ln627_fu_532_p2 = (phi_mul_reg_310 + 7'd13);

assign add_ln9_fu_526_p2 = (phi_ln9_reg_299 + 3'd1);

assign and_ln17_1_fu_858_p2 = (or_ln17_1_fu_840_p2 & and_ln52_7_fu_758_p2);

assign and_ln17_2_fu_864_p2 = (or_ln17_1_fu_840_p2 & and_ln52_8_fu_769_p2);

assign and_ln17_3_fu_870_p2 = (or_ln17_1_fu_840_p2 & and_ln52_9_fu_780_p2);

assign and_ln17_fu_845_p2 = (or_ln17_1_fu_840_p2 & and_ln52_5_fu_748_p2);

assign and_ln52_10_fu_628_p2 = (xor_ln52_fu_616_p2 & icmp_ln19_fu_622_p2);

assign and_ln52_11_fu_822_p2 = (select_ln52_1_fu_725_p3 & icmp_ln52_6_fu_816_p2);

assign and_ln52_12_fu_943_p2 = (xor_ln52_1_fu_937_p2 & and_ln17_1_fu_858_p2);

assign and_ln52_13_fu_949_p2 = (xor_ln52_1_fu_937_p2 & and_ln17_2_fu_864_p2);

assign and_ln52_1_fu_1026_p2 = (select_ln21_2_fu_1004_p3 & icmp_ln52_4_fu_1020_p2);

assign and_ln52_2_fu_1032_p2 = (select_ln52_3_fu_913_p3 & and_ln52_1_fu_1026_p2);

assign and_ln52_3_fu_732_p2 = (xor_ln52_reg_1326 & trunc_ln17_fu_674_p1);

assign and_ln52_4_fu_737_p2 = (xor_ln52_reg_1326 & and_ln52_fu_684_p2);

assign and_ln52_5_fu_748_p2 = (xor_ln52_reg_1326 & icmp_ln52_5_fu_742_p2);

assign and_ln52_6_fu_753_p2 = (xor_ln52_reg_1326 & or_ln26_fu_694_p2);

assign and_ln52_7_fu_758_p2 = (xor_ln52_reg_1326 & icmp_ln52_2_fu_700_p2);

assign and_ln52_8_fu_769_p2 = (xor_ln52_reg_1326 & icmp_ln23_fu_763_p2);

assign and_ln52_9_fu_780_p2 = (xor_ln52_reg_1326 & icmp_ln21_fu_774_p2);

assign and_ln52_fu_684_p2 = (icmp_ln52_fu_668_p2 & icmp_ln52_1_fu_678_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((inStream_V_data_0_vld_out == 1'b0) & (ap_predicate_op171_read_state8 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((inStream_V_data_0_vld_out == 1'b0) & (ap_predicate_op171_read_state8 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((inStream_V_data_0_vld_out == 1'b0) & (ap_predicate_op171_read_state8 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_state10_io = ((icmp_ln15_reg_1308_pp0_iter3_reg == 1'd0) & (outStream_V_data_1_ack_in == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11 = ((outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | (outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0)));
end

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter2 = ((inStream_V_data_0_vld_out == 1'b0) & (ap_predicate_op171_read_state8 == 1'b1));
end

always @ (*) begin
    ap_block_state9_io = ((icmp_ln15_reg_1308_pp0_iter2_reg == 1'd0) & (outStream_V_data_1_ack_in == 1'b0));
end

assign ap_block_state9_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1185 = ((1'b0 == ap_block_pp0_stage0) & (icmp_ln15_reg_1308_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_curr_output_data_sub_3_reg_516 = 'bx;

assign ap_phi_reg_pp0_iter0_tmp_data_sub_data_0_s_reg_486 = 'bx;

assign ap_phi_reg_pp0_iter0_tmp_data_sub_data_1_s_reg_496 = 'bx;

assign ap_phi_reg_pp0_iter0_tmp_data_sub_data_2_s_reg_506 = 'bx;

always @ (*) begin
    ap_predicate_op171_read_state8 = ((select_ln21_1_reg_1389 == 1'd0) & (icmp_ln15_reg_1308_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign col_idx_fu_883_p2 = (4'd1 + select_ln17_fu_798_p3);

assign col_stride_fu_955_p2 = (2'd1 + select_ln52_2_fu_899_p3);

assign curr_input_data_sub_s_fu_1091_p1 = inStream_V_data_0_data_out[15:0];

assign curr_output_last_V_fu_1038_p2 = (select_ln17_2_fu_828_p3 & and_ln52_2_fu_1032_p2);

assign grp_fu_1207_p0 = 8'd13;

assign grp_fu_1207_p1 = grp_fu_1207_p10;

assign grp_fu_1207_p10 = select_ln21_reg_1383;

assign grp_fu_1207_p2 = zext_ln52_fu_1064_p1;

assign grp_fu_1216_p0 = grp_fu_1216_p00;

assign grp_fu_1216_p00 = select_ln21_reg_1383;

assign grp_fu_1216_p1 = 8'd13;

assign grp_fu_1216_p2 = zext_ln52_fu_1064_p1;

assign icmp_ln10_fu_556_p2 = ((phi_ln10_reg_321 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln11_fu_574_p2 = ((phi_ln11_reg_343 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_592_p2 = ((phi_ln12_reg_365 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_598_p2 = ((indvar_flatten136_reg_387 == 13'd5408) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_610_p2 = ((indvar_flatten72_reg_398 == 10'd416) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_622_p2 = ((indvar_flatten27_reg_409 == 9'd208) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_774_p2 = ((indvar_flatten_reg_453 == 6'd16) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_763_p2 = ((input_ch_idx_0_reg_475 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln52_1_fu_678_p2 = ((row_stride_0_reg_431 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln52_2_fu_700_p2 = ((col_stride_0_reg_464 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln52_3_fu_719_p2 = ((row_idx_fu_706_p2 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln52_4_fu_1020_p2 = ((select_ln21_fu_972_p3 == 4'd7) ? 1'b1 : 1'b0);

assign icmp_ln52_5_fu_742_p2 = ((ap_phi_mux_col_assign_phi_fu_446_p4 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln52_6_fu_816_p2 = ((select_ln52_fu_712_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_7_fu_907_p2 = ((col_idx_fu_883_p2 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln52_8_fu_998_p2 = ((select_ln52_2_fu_899_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_668_p2 = ((row_idx_0_reg_420 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_538_p2 = ((phi_ln9_reg_299 == 3'd7) ? 1'b1 : 1'b0);

assign inStream_TREADY = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_data_0_ack_in = inStream_V_data_0_state[1'd1];

assign inStream_V_data_0_load_A = (inStream_V_data_0_state_cmp_full & ~inStream_V_data_0_sel_wr);

assign inStream_V_data_0_load_B = (inStream_V_data_0_state_cmp_full & inStream_V_data_0_sel_wr);

assign inStream_V_data_0_sel = inStream_V_data_0_sel_rd;

assign inStream_V_data_0_state_cmp_full = ((inStream_V_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_data_0_vld_in = inStream_TVALID;

assign inStream_V_data_0_vld_out = inStream_V_data_0_state[1'd0];

assign inStream_V_dest_V_0_ack_in = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_dest_V_0_load_A = (inStream_V_dest_V_0_state_cmp_full & ~inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_load_B = (inStream_V_dest_V_0_state_cmp_full & inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_sel = inStream_V_dest_V_0_sel_rd;

assign inStream_V_dest_V_0_state_cmp_full = ((inStream_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_dest_V_0_vld_in = inStream_TVALID;

assign inStream_V_dest_V_0_vld_out = inStream_V_dest_V_0_state[1'd0];

assign inStream_V_id_V_0_ack_in = inStream_V_id_V_0_state[1'd1];

assign inStream_V_id_V_0_load_A = (inStream_V_id_V_0_state_cmp_full & ~inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_load_B = (inStream_V_id_V_0_state_cmp_full & inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_sel = inStream_V_id_V_0_sel_rd;

assign inStream_V_id_V_0_state_cmp_full = ((inStream_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_id_V_0_vld_in = inStream_TVALID;

assign inStream_V_id_V_0_vld_out = inStream_V_id_V_0_state[1'd0];

assign inStream_V_keep_V_0_ack_in = inStream_V_keep_V_0_state[1'd1];

assign inStream_V_keep_V_0_load_A = (inStream_V_keep_V_0_state_cmp_full & ~inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_load_B = (inStream_V_keep_V_0_state_cmp_full & inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_sel = inStream_V_keep_V_0_sel_rd;

assign inStream_V_keep_V_0_state_cmp_full = ((inStream_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_keep_V_0_vld_in = inStream_TVALID;

assign inStream_V_keep_V_0_vld_out = inStream_V_keep_V_0_state[1'd0];

assign inStream_V_strb_V_0_ack_in = inStream_V_strb_V_0_state[1'd1];

assign inStream_V_strb_V_0_load_A = (inStream_V_strb_V_0_state_cmp_full & ~inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_load_B = (inStream_V_strb_V_0_state_cmp_full & inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_sel = inStream_V_strb_V_0_sel_rd;

assign inStream_V_strb_V_0_state_cmp_full = ((inStream_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_strb_V_0_vld_in = inStream_TVALID;

assign inStream_V_strb_V_0_vld_out = inStream_V_strb_V_0_state[1'd0];

assign inStream_V_user_V_0_ack_in = inStream_V_user_V_0_state[1'd1];

assign inStream_V_user_V_0_load_A = (inStream_V_user_V_0_state_cmp_full & ~inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_load_B = (inStream_V_user_V_0_state_cmp_full & inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_sel = inStream_V_user_V_0_sel_rd;

assign inStream_V_user_V_0_state_cmp_full = ((inStream_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_user_V_0_vld_in = inStream_TVALID;

assign inStream_V_user_V_0_vld_out = inStream_V_user_V_0_state[1'd0];

assign input_ch_idx_fu_1044_p2 = (select_ln21_fu_972_p3 + 4'd1);

assign line_buff_group_0_va_d0 = inStream_V_data_0_data_out[15:0];

assign line_buff_group_1_va_d0 = {{inStream_V_data_0_data_out[31:16]}};

assign line_buff_group_2_va_d0 = {{inStream_V_data_0_data_out[47:32]}};

assign line_buff_group_3_va_d0 = {{inStream_V_data_0_data_out[63:48]}};

assign or_ln17_1_fu_840_p2 = (xor_ln17_fu_835_p2 | icmp_ln17_reg_1317);

assign or_ln17_fu_634_p2 = (icmp_ln17_fu_610_p2 | and_ln52_10_fu_628_p2);

assign or_ln21_1_fu_967_p2 = (or_ln21_fu_961_p2 | or_ln17_reg_1351);

assign or_ln21_fu_961_p2 = (and_ln52_13_fu_949_p2 | and_ln17_3_fu_870_p2);

assign or_ln26_1_fu_984_p2 = (trunc_ln21_1_fu_980_p1 | select_ln17_1_fu_809_p3);

assign or_ln26_fu_694_p2 = (trunc_ln21_fu_690_p1 | trunc_ln17_fu_674_p1);

assign or_ln52_1_fu_894_p2 = (or_ln52_fu_889_p2 | icmp_ln17_reg_1317);

assign or_ln52_fu_889_p2 = (and_ln52_10_reg_1342 | and_ln17_3_fu_870_p2);

assign outStream_TDATA = outStream_V_data_1_data_out;

assign outStream_TDEST = outStream_V_dest_V_1_data_out;

assign outStream_TID = outStream_V_id_V_1_data_out;

assign outStream_TKEEP = outStream_V_keep_V_1_data_out;

assign outStream_TLAST = outStream_V_last_V_1_data_out;

assign outStream_TSTRB = outStream_V_strb_V_1_data_out;

assign outStream_TUSER = outStream_V_user_V_1_data_out;

assign outStream_TVALID = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_data_1_ack_in = outStream_V_data_1_state[1'd1];

assign outStream_V_data_1_ack_out = outStream_TREADY;

assign outStream_V_data_1_load_A = (outStream_V_data_1_state_cmp_full & ~outStream_V_data_1_sel_wr);

assign outStream_V_data_1_load_B = (outStream_V_data_1_state_cmp_full & outStream_V_data_1_sel_wr);

assign outStream_V_data_1_sel = outStream_V_data_1_sel_rd;

assign outStream_V_data_1_state_cmp_full = ((outStream_V_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_data_1_vld_out = outStream_V_data_1_state[1'd0];

assign outStream_V_dest_V_1_ack_in = outStream_V_dest_V_1_state[1'd1];

assign outStream_V_dest_V_1_ack_out = outStream_TREADY;

assign outStream_V_dest_V_1_load_A = (outStream_V_dest_V_1_state_cmp_full & ~outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_load_B = (outStream_V_dest_V_1_state_cmp_full & outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_sel = outStream_V_dest_V_1_sel_rd;

assign outStream_V_dest_V_1_state_cmp_full = ((outStream_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_dest_V_1_vld_out = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_id_V_1_ack_in = outStream_V_id_V_1_state[1'd1];

assign outStream_V_id_V_1_ack_out = outStream_TREADY;

assign outStream_V_id_V_1_load_A = (outStream_V_id_V_1_state_cmp_full & ~outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_load_B = (outStream_V_id_V_1_state_cmp_full & outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_sel = outStream_V_id_V_1_sel_rd;

assign outStream_V_id_V_1_state_cmp_full = ((outStream_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_id_V_1_vld_out = outStream_V_id_V_1_state[1'd0];

assign outStream_V_keep_V_1_ack_in = outStream_V_keep_V_1_state[1'd1];

assign outStream_V_keep_V_1_ack_out = outStream_TREADY;

assign outStream_V_keep_V_1_load_A = (outStream_V_keep_V_1_state_cmp_full & ~outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_load_B = (outStream_V_keep_V_1_state_cmp_full & outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_sel = outStream_V_keep_V_1_sel_rd;

assign outStream_V_keep_V_1_state_cmp_full = ((outStream_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_keep_V_1_vld_out = outStream_V_keep_V_1_state[1'd0];

assign outStream_V_last_V_1_ack_in = outStream_V_last_V_1_state[1'd1];

assign outStream_V_last_V_1_ack_out = outStream_TREADY;

assign outStream_V_last_V_1_load_A = (outStream_V_last_V_1_state_cmp_full & ~outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_load_B = (outStream_V_last_V_1_state_cmp_full & outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_sel = outStream_V_last_V_1_sel_rd;

assign outStream_V_last_V_1_state_cmp_full = ((outStream_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_last_V_1_vld_out = outStream_V_last_V_1_state[1'd0];

assign outStream_V_strb_V_1_ack_in = outStream_V_strb_V_1_state[1'd1];

assign outStream_V_strb_V_1_ack_out = outStream_TREADY;

assign outStream_V_strb_V_1_load_A = (outStream_V_strb_V_1_state_cmp_full & ~outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_load_B = (outStream_V_strb_V_1_state_cmp_full & outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_sel = outStream_V_strb_V_1_sel_rd;

assign outStream_V_strb_V_1_state_cmp_full = ((outStream_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_strb_V_1_vld_out = outStream_V_strb_V_1_state[1'd0];

assign outStream_V_user_V_1_ack_in = outStream_V_user_V_1_state[1'd1];

assign outStream_V_user_V_1_ack_out = outStream_TREADY;

assign outStream_V_user_V_1_load_A = (outStream_V_user_V_1_state_cmp_full & ~outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_load_B = (outStream_V_user_V_1_state_cmp_full & outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_sel = outStream_V_user_V_1_sel_rd;

assign outStream_V_user_V_1_state_cmp_full = ((outStream_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_user_V_1_vld_out = outStream_V_user_V_1_state[1'd0];

assign row_idx_fu_706_p2 = (4'd1 + row_idx_0_reg_420);

assign row_stride_fu_792_p2 = (2'd1 + select_ln52_fu_712_p3);

assign select_ln15_fu_785_p3 = ((icmp_ln17_reg_1317[0:0] === 1'b1) ? row_idx_fu_706_p2 : row_idx_0_reg_420);

assign select_ln17_1_fu_809_p3 = ((and_ln52_10_reg_1342[0:0] === 1'b1) ? trunc_ln17_1_fu_805_p1 : and_ln52_3_fu_732_p2);

assign select_ln17_2_fu_828_p3 = ((and_ln52_10_reg_1342[0:0] === 1'b1) ? and_ln52_11_fu_822_p2 : and_ln52_4_fu_737_p2);

assign select_ln17_3_fu_851_p3 = ((and_ln52_10_reg_1342[0:0] === 1'b1) ? trunc_ln17_1_fu_805_p1 : and_ln52_6_fu_753_p2);

assign select_ln17_4_fu_876_p3 = ((and_ln52_10_reg_1342[0:0] === 1'b1) ? row_stride_fu_792_p2 : select_ln52_fu_712_p3);

assign select_ln17_5_fu_660_p3 = ((icmp_ln17_fu_610_p2[0:0] === 1'b1) ? 10'd1 : add_ln17_1_fu_654_p2);

assign select_ln17_fu_798_p3 = ((or_ln17_reg_1351[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_col_assign_phi_fu_446_p4);

assign select_ln19_fu_646_p3 = ((or_ln17_fu_634_p2[0:0] === 1'b1) ? 9'd1 : add_ln19_1_fu_640_p2);

assign select_ln21_1_fu_990_p3 = ((and_ln52_13_fu_949_p2[0:0] === 1'b1) ? or_ln26_1_fu_984_p2 : select_ln52_5_fu_929_p3);

assign select_ln21_2_fu_1004_p3 = ((and_ln52_13_fu_949_p2[0:0] === 1'b1) ? icmp_ln52_8_fu_998_p2 : and_ln52_12_fu_943_p2);

assign select_ln21_3_fu_1012_p3 = ((and_ln52_13_fu_949_p2[0:0] === 1'b1) ? col_stride_fu_955_p2 : select_ln52_2_fu_899_p3);

assign select_ln21_4_fu_1056_p3 = ((or_ln52_1_fu_894_p2[0:0] === 1'b1) ? 6'd1 : add_ln21_1_fu_1050_p2);

assign select_ln21_fu_972_p3 = ((or_ln21_1_fu_967_p2[0:0] === 1'b1) ? 4'd0 : input_ch_idx_0_reg_475);

assign select_ln52_1_fu_725_p3 = ((icmp_ln17_reg_1317[0:0] === 1'b1) ? icmp_ln52_3_fu_719_p2 : icmp_ln52_fu_668_p2);

assign select_ln52_2_fu_899_p3 = ((or_ln52_1_fu_894_p2[0:0] === 1'b1) ? 2'd0 : col_stride_0_reg_464);

assign select_ln52_3_fu_913_p3 = ((and_ln17_3_fu_870_p2[0:0] === 1'b1) ? icmp_ln52_7_fu_907_p2 : and_ln17_fu_845_p2);

assign select_ln52_4_fu_921_p3 = ((and_ln17_3_fu_870_p2[0:0] === 1'b1) ? col_idx_fu_883_p2 : select_ln17_fu_798_p3);

assign select_ln52_5_fu_929_p3 = ((and_ln17_3_fu_870_p2[0:0] === 1'b1) ? select_ln17_1_fu_809_p3 : select_ln17_3_fu_851_p3);

assign select_ln52_fu_712_p3 = ((icmp_ln17_reg_1317[0:0] === 1'b1) ? 2'd0 : row_stride_0_reg_431);

assign sext_ln203_1_fu_1132_p1 = $signed(grp_fu_1207_p3);

assign sext_ln203_fu_1167_p1 = $signed(grp_fu_1216_p3);

assign tmp_data_1_fu_1194_p5 = {{{{ap_phi_mux_curr_output_data_sub_3_phi_fu_519_p4}, {ap_phi_mux_tmp_data_sub_data_2_s_phi_fu_509_p4}}, {ap_phi_mux_tmp_data_sub_data_1_s_phi_fu_499_p4}}, {ap_phi_mux_tmp_data_sub_data_0_s_phi_fu_489_p4}};

assign trunc_ln17_1_fu_805_p1 = row_stride_fu_792_p2[0:0];

assign trunc_ln17_fu_674_p1 = row_stride_0_reg_431[0:0];

assign trunc_ln21_1_fu_980_p1 = col_stride_fu_955_p2[0:0];

assign trunc_ln21_fu_690_p1 = col_stride_0_reg_464[0:0];

assign xor_ln17_fu_835_p2 = (icmp_ln19_reg_1337 ^ 1'd1);

assign xor_ln52_1_fu_937_p2 = (1'd1 ^ and_ln17_3_fu_870_p2);

assign xor_ln52_fu_616_p2 = (icmp_ln17_fu_610_p2 ^ 1'd1);

assign zext_ln52_fu_1064_p1 = select_ln52_4_reg_1377;

endmodule //yolo_upsamp_top
