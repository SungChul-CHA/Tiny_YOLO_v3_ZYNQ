-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yolo_max_pool_top is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inStream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    inStream_TVALID : IN STD_LOGIC;
    inStream_TREADY : OUT STD_LOGIC;
    inStream_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    inStream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    outStream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    outStream_TVALID : OUT STD_LOGIC;
    outStream_TREADY : IN STD_LOGIC;
    outStream_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    outStream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of yolo_max_pool_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "yolo_max_pool_top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.118500,HLS_SYN_LAT=1384491,HLS_SYN_TPT=none,HLS_SYN_MEM=32,HLS_SYN_DSP=1,HLS_SYN_FF=2105,HLS_SYN_LUT=3422,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv12_1A2 : STD_LOGIC_VECTOR (11 downto 0) := "000110100010";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv26_1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_const_lv13_1A2 : STD_LOGIC_VECTOR (12 downto 0) := "0000110100010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal inStream_V_data_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal inStream_V_data_0_vld_in : STD_LOGIC;
    signal inStream_V_data_0_vld_out : STD_LOGIC;
    signal inStream_V_data_0_ack_in : STD_LOGIC;
    signal inStream_V_data_0_ack_out : STD_LOGIC;
    signal inStream_V_data_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal inStream_V_data_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal inStream_V_data_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_data_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_data_0_sel : STD_LOGIC;
    signal inStream_V_data_0_load_A : STD_LOGIC;
    signal inStream_V_data_0_load_B : STD_LOGIC;
    signal inStream_V_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_data_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_keep_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_keep_V_0_vld_in : STD_LOGIC;
    signal inStream_V_keep_V_0_vld_out : STD_LOGIC;
    signal inStream_V_keep_V_0_ack_in : STD_LOGIC;
    signal inStream_V_keep_V_0_ack_out : STD_LOGIC;
    signal inStream_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_keep_V_0_sel : STD_LOGIC;
    signal inStream_V_keep_V_0_load_A : STD_LOGIC;
    signal inStream_V_keep_V_0_load_B : STD_LOGIC;
    signal inStream_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_strb_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_strb_V_0_vld_in : STD_LOGIC;
    signal inStream_V_strb_V_0_vld_out : STD_LOGIC;
    signal inStream_V_strb_V_0_ack_in : STD_LOGIC;
    signal inStream_V_strb_V_0_ack_out : STD_LOGIC;
    signal inStream_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_strb_V_0_sel : STD_LOGIC;
    signal inStream_V_strb_V_0_load_A : STD_LOGIC;
    signal inStream_V_strb_V_0_load_B : STD_LOGIC;
    signal inStream_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_user_V_0_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_vld_in : STD_LOGIC;
    signal inStream_V_user_V_0_vld_out : STD_LOGIC;
    signal inStream_V_user_V_0_ack_in : STD_LOGIC;
    signal inStream_V_user_V_0_ack_out : STD_LOGIC;
    signal inStream_V_user_V_0_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_user_V_0_sel : STD_LOGIC;
    signal inStream_V_user_V_0_load_A : STD_LOGIC;
    signal inStream_V_user_V_0_load_B : STD_LOGIC;
    signal inStream_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_id_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_V_id_V_0_vld_in : STD_LOGIC;
    signal inStream_V_id_V_0_vld_out : STD_LOGIC;
    signal inStream_V_id_V_0_ack_in : STD_LOGIC;
    signal inStream_V_id_V_0_ack_out : STD_LOGIC;
    signal inStream_V_id_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_V_id_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_id_V_0_sel : STD_LOGIC;
    signal inStream_V_id_V_0_load_A : STD_LOGIC;
    signal inStream_V_id_V_0_load_B : STD_LOGIC;
    signal inStream_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_dest_V_0_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_vld_in : STD_LOGIC;
    signal inStream_V_dest_V_0_vld_out : STD_LOGIC;
    signal inStream_V_dest_V_0_ack_in : STD_LOGIC;
    signal inStream_V_dest_V_0_ack_out : STD_LOGIC;
    signal inStream_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_dest_V_0_sel : STD_LOGIC;
    signal inStream_V_dest_V_0_load_A : STD_LOGIC;
    signal inStream_V_dest_V_0_load_B : STD_LOGIC;
    signal inStream_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal outStream_V_data_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal outStream_V_data_1_vld_in : STD_LOGIC;
    signal outStream_V_data_1_vld_out : STD_LOGIC;
    signal outStream_V_data_1_ack_in : STD_LOGIC;
    signal outStream_V_data_1_ack_out : STD_LOGIC;
    signal outStream_V_data_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal outStream_V_data_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal outStream_V_data_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_data_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_data_1_sel : STD_LOGIC;
    signal outStream_V_data_1_load_A : STD_LOGIC;
    signal outStream_V_data_1_load_B : STD_LOGIC;
    signal outStream_V_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_data_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_keep_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_keep_V_1_vld_in : STD_LOGIC;
    signal outStream_V_keep_V_1_vld_out : STD_LOGIC;
    signal outStream_V_keep_V_1_ack_in : STD_LOGIC;
    signal outStream_V_keep_V_1_ack_out : STD_LOGIC;
    signal outStream_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_keep_V_1_sel : STD_LOGIC;
    signal outStream_V_keep_V_1_load_A : STD_LOGIC;
    signal outStream_V_keep_V_1_load_B : STD_LOGIC;
    signal outStream_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_strb_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_strb_V_1_vld_in : STD_LOGIC;
    signal outStream_V_strb_V_1_vld_out : STD_LOGIC;
    signal outStream_V_strb_V_1_ack_in : STD_LOGIC;
    signal outStream_V_strb_V_1_ack_out : STD_LOGIC;
    signal outStream_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_strb_V_1_sel : STD_LOGIC;
    signal outStream_V_strb_V_1_load_A : STD_LOGIC;
    signal outStream_V_strb_V_1_load_B : STD_LOGIC;
    signal outStream_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_user_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_vld_in : STD_LOGIC;
    signal outStream_V_user_V_1_vld_out : STD_LOGIC;
    signal outStream_V_user_V_1_ack_in : STD_LOGIC;
    signal outStream_V_user_V_1_ack_out : STD_LOGIC;
    signal outStream_V_user_V_1_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_user_V_1_sel : STD_LOGIC;
    signal outStream_V_user_V_1_load_A : STD_LOGIC;
    signal outStream_V_user_V_1_load_B : STD_LOGIC;
    signal outStream_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_vld_in : STD_LOGIC;
    signal outStream_V_last_V_1_vld_out : STD_LOGIC;
    signal outStream_V_last_V_1_ack_in : STD_LOGIC;
    signal outStream_V_last_V_1_ack_out : STD_LOGIC;
    signal outStream_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_last_V_1_sel : STD_LOGIC;
    signal outStream_V_last_V_1_load_A : STD_LOGIC;
    signal outStream_V_last_V_1_load_B : STD_LOGIC;
    signal outStream_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_vld_in : STD_LOGIC;
    signal outStream_V_id_V_1_vld_out : STD_LOGIC;
    signal outStream_V_id_V_1_ack_in : STD_LOGIC;
    signal outStream_V_id_V_1_ack_out : STD_LOGIC;
    signal outStream_V_id_V_1_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_id_V_1_sel : STD_LOGIC;
    signal outStream_V_id_V_1_load_A : STD_LOGIC;
    signal outStream_V_id_V_1_load_B : STD_LOGIC;
    signal outStream_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_dest_V_1_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_vld_in : STD_LOGIC;
    signal outStream_V_dest_V_1_vld_out : STD_LOGIC;
    signal outStream_V_dest_V_1_ack_in : STD_LOGIC;
    signal outStream_V_dest_V_1_ack_out : STD_LOGIC;
    signal outStream_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_dest_V_1_sel : STD_LOGIC;
    signal outStream_V_dest_V_1_load_A : STD_LOGIC;
    signal outStream_V_dest_V_1_load_B : STD_LOGIC;
    signal outStream_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal output_h_V : STD_LOGIC_VECTOR (8 downto 0);
    signal output_w_V : STD_LOGIC_VECTOR (8 downto 0);
    signal input_h_V : STD_LOGIC_VECTOR (8 downto 0);
    signal input_w_V : STD_LOGIC_VECTOR (8 downto 0);
    signal input_fold_ch_V : STD_LOGIC_VECTOR (3 downto 0);
    signal stride_V : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln27_reg_2469 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_2469_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_32_reg_2696 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ln112_write_output_fu_778_outStream_TDATA_blk_n : STD_LOGIC;
    signal outStream_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal select_ln1598_33_reg_2700 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_33_reg_2700_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten308_reg_624 : STD_LOGIC_VECTOR (25 downto 0);
    signal i_op_assign_reg_636 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten180_reg_648 : STD_LOGIC_VECTOR (16 downto 0);
    signal indvar_flatten79_reg_660 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_op_assign_2_reg_672 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_reg_684 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_op_assign_4_reg_696 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_op_assign_1_reg_708 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_op_assign_3_reg_719 : STD_LOGIC_VECTOR (1 downto 0);
    signal line_buff_group_0_va_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_806 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_state9_pp0_stage1_iter0 : BOOLEAN;
    signal ap_predicate_op320_read_state11 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal select_ln1598_33_reg_2700_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal line_buff_group_0_va_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state8_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln1598_33_reg_2700_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal line_buff_group_1_va_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_811 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_1_va_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_2_va_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_816 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_2_va_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_3_va_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_821 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_3_va_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal stride_V_read_reg_2232 : STD_LOGIC_VECTOR (1 downto 0);
    signal input_fold_ch_V_read_reg_2240 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_w_V_read_reg_2248 : STD_LOGIC_VECTOR (8 downto 0);
    signal input_h_V_read_reg_2254 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_w_V_read_reg_2259 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_h_V_read_reg_2265 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln19_fu_826_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln627_fu_832_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln20_fu_844_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln627_1_fu_850_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln21_fu_862_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln627_2_fu_868_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln22_fu_880_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln627_3_fu_886_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bound_fu_904_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bound_reg_2353 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln22_fu_892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bound4_fu_917_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal bound4_reg_2359 : STD_LOGIC_VECTOR (14 downto 0);
    signal bound84_fu_929_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal bound84_reg_2366 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_cast60_fu_935_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_cast60_reg_2372 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln215_fu_938_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln215_reg_2380 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1354_4_fu_941_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1354_4_reg_2387 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1354_fu_947_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1354_reg_2394 : STD_LOGIC_VECTOR (2 downto 0);
    signal ret_V_fu_956_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_reg_2400 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1354_2_fu_965_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1354_2_reg_2406 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_1_fu_974_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_1_reg_2412 : STD_LOGIC_VECTOR (4 downto 0);
    signal bound185_fu_2226_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal bound185_reg_2417 : STD_LOGIC_VECTOR (25 downto 0);
    signal icmp_ln77_2_fu_986_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_2_reg_2422 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_2_fu_992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_2_reg_2427 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_reg_2433 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_fu_1003_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_reg_2439 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_fu_1008_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_2446 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_fu_1013_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_2452 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln44_fu_1026_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln44_reg_2457 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln45_fu_1040_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln45_reg_2463 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln27_fu_1045_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_row_fu_1050_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_row_reg_2473 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln30_fu_1056_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_2478 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln44_1_fu_1069_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln44_1_reg_2496 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln1598_2_fu_1079_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_2_reg_2503 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_1_fu_1087_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_1_reg_2508 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_1_fu_1092_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_1_reg_2513 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_10_fu_1102_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_10_reg_2518 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_idx_fu_1157_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal col_idx_reg_2533 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_count_1_fu_1184_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_count_1_reg_2538 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln77_1_fu_1227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln77_1_reg_2543 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln36_fu_1237_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln36_reg_2548 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln27_fu_1243_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln27_reg_2553 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln1598_fu_1249_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln1598_reg_2558 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln27_fu_1324_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln27_reg_2563 : STD_LOGIC_VECTOR (8 downto 0);
    signal row_stride_fu_1330_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_stride_reg_2568 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln1598_1_fu_1336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1598_1_reg_2573 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_12_fu_1368_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_12_reg_2581 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_13_fu_1386_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_13_reg_2587 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_14_fu_1398_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_14_reg_2593 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_18_fu_1416_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_18_reg_2599 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_21_fu_1429_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_21_reg_2604 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_22_fu_1451_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln1598_22_reg_2614 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln45_1_fu_1467_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln45_1_reg_2619 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln1598_24_fu_1477_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_24_reg_2628 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_29_fu_1485_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_29_reg_2633 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln33_fu_1492_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln33_reg_2643 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_stride_fu_1500_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_stride_reg_2648 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln1598_30_fu_1518_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln1598_30_reg_2655 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln203_fu_1530_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln203_reg_2660 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln203_reg_2660_pp0_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln203_reg_2660_pp0_iter2_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal input_ch_idx_fu_1536_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_ch_idx_reg_2671 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_1_fu_1548_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln36_1_reg_2676 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln33_1_fu_1562_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln33_1_reg_2681 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln30_1_fu_1576_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln30_1_reg_2686 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln30_fu_1610_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln30_reg_2691 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln1598_32_fu_1787_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_33_fu_1816_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_36_fu_1848_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln1598_36_reg_2704 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln1598_36_reg_2704_pp0_iter2_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln1598_37_fu_1865_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln1598_37_reg_2713 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln36_fu_1872_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln36_reg_2718 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln203_fu_1882_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln203_reg_2723 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buff_group_0_va_5_reg_2731 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_1_va_5_reg_2736 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_2_va_5_reg_2741 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_3_va_5_reg_2746 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln879_1_fu_1903_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_1_reg_2751 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_1_reg_2751_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_1_reg_2751_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_1_reg_2751_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1598_9_fu_1995_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1598_9_reg_2756 : STD_LOGIC_VECTOR (12 downto 0);
    signal line_buff_group_0_va_6_reg_2774 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_0_va_7_reg_2779 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_0_va_7_reg_2779_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_1_va_6_reg_2794 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_1_va_7_reg_2799 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_1_va_7_reg_2799_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_2_va_6_reg_2814 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_2_va_7_reg_2819 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_2_va_7_reg_2819_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_3_va_6_reg_2834 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_3_va_7_reg_2839 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_3_va_7_reg_2839_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_keep_V_load_reg_2844 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_keep_V_load_reg_2844_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_strb_V_load_reg_2849 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_strb_V_load_reg_2849_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_load_reg_2854 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_load_reg_2854_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_id_V_load_reg_2859 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_load_reg_2859_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_dest_V_load_reg_2864 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_load_reg_2864_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal window_0_val_0_V_1_reg_2869 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_1_val_0_V_1_reg_2874 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_2_val_0_V_1_reg_2879 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_3_val_0_V_1_reg_2884 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln140_2_fu_2057_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln140_2_reg_2889 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln140_3_fu_2073_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln140_3_reg_2894 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln140_4_fu_2089_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln140_4_reg_2899 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln140_5_fu_2105_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln140_5_reg_2904 : STD_LOGIC_VECTOR (12 downto 0);
    signal line_buff_group_0_va_1_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_0_val_1_V_0_reg_2909 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal line_buff_group_1_va_1_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_1_val_1_V_0_reg_2915 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_2_va_1_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_2_val_1_V_0_reg_2921 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_3_va_1_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_3_val_1_V_0_reg_2927 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_0_val_1_V_1_reg_2953 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_1_val_1_V_1_reg_2959 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_2_val_1_V_1_reg_2965 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_3_val_1_V_1_reg_2971 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal line_buff_group_0_va_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_0_va_ce0 : STD_LOGIC;
    signal line_buff_group_0_va_we0 : STD_LOGIC;
    signal line_buff_group_0_va_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_0_va_ce1 : STD_LOGIC;
    signal line_buff_group_0_va_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_0_va_1_ce0 : STD_LOGIC;
    signal line_buff_group_0_va_1_we0 : STD_LOGIC;
    signal line_buff_group_0_va_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_0_va_1_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_0_va_1_ce1 : STD_LOGIC;
    signal line_buff_group_1_va_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_1_va_ce0 : STD_LOGIC;
    signal line_buff_group_1_va_we0 : STD_LOGIC;
    signal line_buff_group_1_va_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_1_va_ce1 : STD_LOGIC;
    signal line_buff_group_1_va_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_1_va_1_ce0 : STD_LOGIC;
    signal line_buff_group_1_va_1_we0 : STD_LOGIC;
    signal line_buff_group_1_va_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_1_va_1_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_1_va_1_ce1 : STD_LOGIC;
    signal line_buff_group_2_va_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_2_va_ce0 : STD_LOGIC;
    signal line_buff_group_2_va_we0 : STD_LOGIC;
    signal line_buff_group_2_va_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_2_va_ce1 : STD_LOGIC;
    signal line_buff_group_2_va_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_2_va_1_ce0 : STD_LOGIC;
    signal line_buff_group_2_va_1_we0 : STD_LOGIC;
    signal line_buff_group_2_va_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_2_va_1_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_2_va_1_ce1 : STD_LOGIC;
    signal line_buff_group_3_va_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_3_va_ce0 : STD_LOGIC;
    signal line_buff_group_3_va_we0 : STD_LOGIC;
    signal line_buff_group_3_va_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_3_va_ce1 : STD_LOGIC;
    signal line_buff_group_3_va_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_3_va_1_ce0 : STD_LOGIC;
    signal line_buff_group_3_va_1_we0 : STD_LOGIC;
    signal line_buff_group_3_va_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_group_3_va_1_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buff_group_3_va_1_ce1 : STD_LOGIC;
    signal call_ln112_write_output_fu_778_ap_start : STD_LOGIC;
    signal call_ln112_write_output_fu_778_ap_done : STD_LOGIC;
    signal call_ln112_write_output_fu_778_ap_idle : STD_LOGIC;
    signal call_ln112_write_output_fu_778_ap_ready : STD_LOGIC;
    signal call_ln112_write_output_fu_778_val_output_0_V : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ln112_write_output_fu_778_val_output_1_V : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ln112_write_output_fu_778_val_output_2_V : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ln112_write_output_fu_778_val_output_3_V : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ln112_write_output_fu_778_outStream_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal call_ln112_write_output_fu_778_outStream_TVALID : STD_LOGIC;
    signal call_ln112_write_output_fu_778_outStream_TREADY : STD_LOGIC;
    signal call_ln112_write_output_fu_778_outStream_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ln112_write_output_fu_778_outStream_TSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ln112_write_output_fu_778_outStream_TUSER : STD_LOGIC_VECTOR (1 downto 0);
    signal call_ln112_write_output_fu_778_outStream_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ln112_write_output_fu_778_outStream_TID : STD_LOGIC_VECTOR (4 downto 0);
    signal call_ln112_write_output_fu_778_outStream_TDEST : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ln112_write_output_fu_778_ap_ce : STD_LOGIC;
    signal ap_block_state9_pp0_stage1_iter0_ignore_call65 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter1_ignore_call65 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter2_ignore_call65 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter3_ignore_call65 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter4_ignore_call65 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_ignoreCallOp461 : BOOLEAN;
    signal phi_ln19_reg_536 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln19_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_547 : STD_LOGIC_VECTOR (11 downto 0);
    signal phi_ln20_reg_558 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln20_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul311_reg_569 : STD_LOGIC_VECTOR (11 downto 0);
    signal phi_ln21_reg_580 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln21_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul313_reg_591 : STD_LOGIC_VECTOR (11 downto 0);
    signal phi_ln22_reg_602 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_mul315_reg_613 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_mux_indvar_flatten308_phi_fu_628_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_op_assign_phi_fu_640_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_indvar_flatten180_phi_fu_652_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_phi_mux_indvar_flatten79_phi_fu_664_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_i_op_assign_2_phi_fu_676_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_688_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_i_op_assign_4_phi_fu_700_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_i_op_assign_1_phi_fu_712_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_i_op_assign_3_phi_fu_723_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_p_011_phi_fu_734_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_p_011_reg_730 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_p_011_reg_730 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_p_012_phi_fu_746_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_p_012_reg_742 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_p_012_reg_742 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_p_013_phi_fu_758_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_p_013_reg_754 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_p_013_reg_754 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_p_0_phi_fu_770_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal curr_input_data_sub_s_fu_1932_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_p_0_reg_766 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_p_0_reg_766 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ln112_write_output_fu_778_ap_start_reg : STD_LOGIC := '0';
    signal sext_ln140_fu_2002_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln140_1_fu_2019_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln140_2_fu_2110_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln140_3_fu_2114_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln140_4_fu_2118_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln140_5_fu_2122_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_keep_V_fu_198 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_strb_V_fu_202 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_fu_206 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_id_V_fu_210 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_dest_V_fu_214 : STD_LOGIC_VECTOR (5 downto 0);
    signal bound_fu_904_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal bound_fu_904_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal bound4_fu_917_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal bound4_fu_917_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal bound84_fu_929_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal bound84_fu_929_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1354_fu_944_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln1354_1_fu_953_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1354_2_fu_962_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1354_3_fu_971_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln44_fu_1026_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln44_fu_1026_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln44_fu_1022_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln45_fu_1040_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln45_fu_1040_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln44_1_fu_1069_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln44_1_fu_1069_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln44_2_fu_1065_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln101_3_fu_1074_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_fu_1031_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_1_fu_1097_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1598_1_fu_1109_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal row_idx_fu_1117_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln55_1_fu_1128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln44_1_fu_1113_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln45_fu_1144_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1598_3_fu_1153_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln48_fu_1122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_1_fu_1166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln45_1_fu_1162_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln48_fu_1172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_count_fu_1178_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln55_2_fu_1192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln55_fu_1133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln55_1_fu_1197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_fu_1139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln77_fu_1209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln77_fu_1221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_1_fu_1215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln140_fu_1233_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln48_2_fu_1261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_3_fu_1273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln55_2_fu_1277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_1_fu_1148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_1_fu_1302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_fu_1203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1598_5_fu_1348_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln1598_1_fu_1256_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln44_1_fu_1356_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln48_3_fu_1362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_3_fu_1266_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_4_fu_1375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln55_3_fu_1380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_4_fu_1283_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln44_3_fu_1352_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln77_3_fu_1393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_5_fu_1290_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_6_fu_1296_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_2_fu_1411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_7_fu_1307_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_8_fu_1314_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_9_fu_1319_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_11_fu_1340_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln1598_3_fu_1441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1598_4_fu_1446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_col_fu_1435_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln45_1_fu_1467_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln45_1_fu_1467_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln45_2_fu_1463_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln101_4_fu_1472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_16_fu_1405_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_20_fu_1423_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1598_5_fu_1506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1598_6_fu_1512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln203_fu_1530_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln36_1_fu_1542_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln33_1_fu_1556_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln30_1_fu_1570_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln1598_fu_1583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_15_fu_1587_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln48_4_fu_1624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln45_3_fu_1621_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln48_1_fu_1629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln49_1_fu_1634_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1598_17_fu_1593_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln55_5_fu_1654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln55_4_fu_1658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_3_fu_1664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln77_1_fu_1675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln77_2_fu_1687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_4_fu_1681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln77_3_fu_1692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1598_2_fu_1599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln48_1_fu_1640_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln140_1_fu_1705_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1598_fu_1709_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln1598_19_fu_1604_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1598_7_fu_1722_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln1598_23_fu_1615_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln45_1_fu_1725_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln48_5_fu_1735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln45_4_fu_1731_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln48_2_fu_1741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln49_2_fu_1746_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1598_25_fu_1648_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln1598_31_fu_1760_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln55_6_fu_1771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln55_5_fu_1776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_4_fu_1782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_26_fu_1669_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln77_2_fu_1794_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln77_4_fu_1805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_5_fu_1800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln77_5_fu_1810_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_27_fu_1698_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln48_2_fu_1752_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1598_2_fu_1831_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1598_1_fu_1827_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln1598_34_fu_1834_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1598_fu_1823_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln1598_35_fu_1841_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln140_2_fu_1855_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1598_1_fu_1859_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln1598_28_fu_1715_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1598_8_fu_1767_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln203_fu_1877_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln879_fu_1890_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln879_fu_1893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_fu_1898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln140_fu_1998_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln140_1_fu_2014_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1494_fu_2046_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln156_fu_2051_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1494_3_fu_2062_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln156_3_fu_2067_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1494_6_fu_2078_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln156_6_fu_2083_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1494_9_fu_2094_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln156_9_fu_2099_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1494_1_fu_2126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln156_1_fu_2131_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1494_2_fu_2138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_4_fu_2151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln156_4_fu_2156_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1494_5_fu_2163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_7_fu_2176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln156_7_fu_2181_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1494_8_fu_2188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_10_fu_2201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln156_10_fu_2206_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1494_11_fu_2213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bound185_fu_2226_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal bound185_fu_2226_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_state18 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound185_fu_2226_p00 : STD_LOGIC_VECTOR (25 downto 0);
    signal bound185_fu_2226_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal bound4_fu_917_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal bound4_fu_917_p10 : STD_LOGIC_VECTOR (14 downto 0);
    signal bound84_fu_929_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal bound84_fu_929_p10 : STD_LOGIC_VECTOR (16 downto 0);
    signal bound_fu_904_p00 : STD_LOGIC_VECTOR (5 downto 0);
    signal bound_fu_904_p10 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln203_fu_1530_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln44_1_fu_1069_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln44_fu_1026_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln45_1_fu_1467_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln45_fu_1040_p10 : STD_LOGIC_VECTOR (10 downto 0);

    component write_output IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        val_output_0_V : IN STD_LOGIC_VECTOR (15 downto 0);
        val_output_1_V : IN STD_LOGIC_VECTOR (15 downto 0);
        val_output_2_V : IN STD_LOGIC_VECTOR (15 downto 0);
        val_output_3_V : IN STD_LOGIC_VECTOR (15 downto 0);
        curr_input_keep_V : IN STD_LOGIC_VECTOR (7 downto 0);
        curr_input_strb_V : IN STD_LOGIC_VECTOR (7 downto 0);
        curr_input_user_V : IN STD_LOGIC_VECTOR (1 downto 0);
        curr_input_id_V : IN STD_LOGIC_VECTOR (4 downto 0);
        curr_input_dest_V : IN STD_LOGIC_VECTOR (5 downto 0);
        outStream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        outStream_TVALID : OUT STD_LOGIC;
        outStream_TREADY : IN STD_LOGIC;
        outStream_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        outStream_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        outStream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
        outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        outStream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
        outStream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
        last_V : IN STD_LOGIC_VECTOR (0 downto 0);
        outStream_TDATA_blk_n : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC );
    end component;


    component yolo_max_pool_top_mul_mul_9ns_17ns_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component yolo_max_pool_top_line_buff_group_0_va IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component yolo_max_pool_top_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        output_h_V : OUT STD_LOGIC_VECTOR (8 downto 0);
        output_w_V : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_h_V : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_w_V : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_fold_ch_V : OUT STD_LOGIC_VECTOR (3 downto 0);
        stride_V : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;



begin
    yolo_max_pool_top_CTRL_BUS_s_axi_U : component yolo_max_pool_top_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        output_h_V => output_h_V,
        output_w_V => output_w_V,
        input_h_V => input_h_V,
        input_w_V => input_w_V,
        input_fold_ch_V => input_fold_ch_V,
        stride_V => stride_V);

    line_buff_group_0_va_U : component yolo_max_pool_top_line_buff_group_0_va
    generic map (
        DataWidth => 16,
        AddressRange => 3344,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buff_group_0_va_address0,
        ce0 => line_buff_group_0_va_ce0,
        we0 => line_buff_group_0_va_we0,
        d0 => line_buff_group_0_va_1_q0,
        q0 => line_buff_group_0_va_q0,
        address1 => line_buff_group_0_va_address1,
        ce1 => line_buff_group_0_va_ce1,
        q1 => line_buff_group_0_va_q1);

    line_buff_group_0_va_1_U : component yolo_max_pool_top_line_buff_group_0_va
    generic map (
        DataWidth => 16,
        AddressRange => 3344,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buff_group_0_va_1_address0,
        ce0 => line_buff_group_0_va_1_ce0,
        we0 => line_buff_group_0_va_1_we0,
        d0 => ap_phi_mux_p_0_phi_fu_770_p4,
        q0 => line_buff_group_0_va_1_q0,
        address1 => line_buff_group_0_va_1_address1,
        ce1 => line_buff_group_0_va_1_ce1,
        q1 => line_buff_group_0_va_1_q1);

    line_buff_group_1_va_U : component yolo_max_pool_top_line_buff_group_0_va
    generic map (
        DataWidth => 16,
        AddressRange => 3344,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buff_group_1_va_address0,
        ce0 => line_buff_group_1_va_ce0,
        we0 => line_buff_group_1_va_we0,
        d0 => line_buff_group_1_va_1_q0,
        q0 => line_buff_group_1_va_q0,
        address1 => line_buff_group_1_va_address1,
        ce1 => line_buff_group_1_va_ce1,
        q1 => line_buff_group_1_va_q1);

    line_buff_group_1_va_1_U : component yolo_max_pool_top_line_buff_group_0_va
    generic map (
        DataWidth => 16,
        AddressRange => 3344,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buff_group_1_va_1_address0,
        ce0 => line_buff_group_1_va_1_ce0,
        we0 => line_buff_group_1_va_1_we0,
        d0 => ap_phi_mux_p_013_phi_fu_758_p4,
        q0 => line_buff_group_1_va_1_q0,
        address1 => line_buff_group_1_va_1_address1,
        ce1 => line_buff_group_1_va_1_ce1,
        q1 => line_buff_group_1_va_1_q1);

    line_buff_group_2_va_U : component yolo_max_pool_top_line_buff_group_0_va
    generic map (
        DataWidth => 16,
        AddressRange => 3344,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buff_group_2_va_address0,
        ce0 => line_buff_group_2_va_ce0,
        we0 => line_buff_group_2_va_we0,
        d0 => line_buff_group_2_va_1_q0,
        q0 => line_buff_group_2_va_q0,
        address1 => line_buff_group_2_va_address1,
        ce1 => line_buff_group_2_va_ce1,
        q1 => line_buff_group_2_va_q1);

    line_buff_group_2_va_1_U : component yolo_max_pool_top_line_buff_group_0_va
    generic map (
        DataWidth => 16,
        AddressRange => 3344,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buff_group_2_va_1_address0,
        ce0 => line_buff_group_2_va_1_ce0,
        we0 => line_buff_group_2_va_1_we0,
        d0 => ap_phi_mux_p_012_phi_fu_746_p4,
        q0 => line_buff_group_2_va_1_q0,
        address1 => line_buff_group_2_va_1_address1,
        ce1 => line_buff_group_2_va_1_ce1,
        q1 => line_buff_group_2_va_1_q1);

    line_buff_group_3_va_U : component yolo_max_pool_top_line_buff_group_0_va
    generic map (
        DataWidth => 16,
        AddressRange => 3344,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buff_group_3_va_address0,
        ce0 => line_buff_group_3_va_ce0,
        we0 => line_buff_group_3_va_we0,
        d0 => line_buff_group_3_va_1_q0,
        q0 => line_buff_group_3_va_q0,
        address1 => line_buff_group_3_va_address1,
        ce1 => line_buff_group_3_va_ce1,
        q1 => line_buff_group_3_va_q1);

    line_buff_group_3_va_1_U : component yolo_max_pool_top_line_buff_group_0_va
    generic map (
        DataWidth => 16,
        AddressRange => 3344,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buff_group_3_va_1_address0,
        ce0 => line_buff_group_3_va_1_ce0,
        we0 => line_buff_group_3_va_1_we0,
        d0 => ap_phi_mux_p_011_phi_fu_734_p4,
        q0 => line_buff_group_3_va_1_q0,
        address1 => line_buff_group_3_va_1_address1,
        ce1 => line_buff_group_3_va_1_ce1,
        q1 => line_buff_group_3_va_1_q1);

    call_ln112_write_output_fu_778 : component write_output
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => call_ln112_write_output_fu_778_ap_start,
        ap_done => call_ln112_write_output_fu_778_ap_done,
        ap_idle => call_ln112_write_output_fu_778_ap_idle,
        ap_ready => call_ln112_write_output_fu_778_ap_ready,
        val_output_0_V => call_ln112_write_output_fu_778_val_output_0_V,
        val_output_1_V => call_ln112_write_output_fu_778_val_output_1_V,
        val_output_2_V => call_ln112_write_output_fu_778_val_output_2_V,
        val_output_3_V => call_ln112_write_output_fu_778_val_output_3_V,
        curr_input_keep_V => tmp_keep_V_load_reg_2844_pp0_iter3_reg,
        curr_input_strb_V => tmp_strb_V_load_reg_2849_pp0_iter3_reg,
        curr_input_user_V => tmp_user_V_load_reg_2854_pp0_iter3_reg,
        curr_input_id_V => tmp_id_V_load_reg_2859_pp0_iter3_reg,
        curr_input_dest_V => tmp_dest_V_load_reg_2864_pp0_iter3_reg,
        outStream_TDATA => call_ln112_write_output_fu_778_outStream_TDATA,
        outStream_TVALID => call_ln112_write_output_fu_778_outStream_TVALID,
        outStream_TREADY => call_ln112_write_output_fu_778_outStream_TREADY,
        outStream_TKEEP => call_ln112_write_output_fu_778_outStream_TKEEP,
        outStream_TSTRB => call_ln112_write_output_fu_778_outStream_TSTRB,
        outStream_TUSER => call_ln112_write_output_fu_778_outStream_TUSER,
        outStream_TLAST => call_ln112_write_output_fu_778_outStream_TLAST,
        outStream_TID => call_ln112_write_output_fu_778_outStream_TID,
        outStream_TDEST => call_ln112_write_output_fu_778_outStream_TDEST,
        last_V => and_ln879_1_reg_2751_pp0_iter4_reg,
        outStream_TDATA_blk_n => call_ln112_write_output_fu_778_outStream_TDATA_blk_n,
        ap_ce => call_ln112_write_output_fu_778_ap_ce);

    yolo_max_pool_top_mul_mul_9ns_17ns_26_1_1_U18 : component yolo_max_pool_top_mul_mul_9ns_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => bound185_fu_2226_p0,
        din1 => bound185_fu_2226_p1,
        dout => bound185_fu_2226_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    call_ln112_write_output_fu_778_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                call_ln112_write_output_fu_778_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln1598_33_reg_2700_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                    call_ln112_write_output_fu_778_ap_start_reg <= ap_const_logic_1;
                elsif ((call_ln112_write_output_fu_778_ap_ready = ap_const_logic_1)) then 
                    call_ln112_write_output_fu_778_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_data_0_ack_out = ap_const_logic_1) and (inStream_V_data_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_data_0_sel_rd <= not(inStream_V_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_data_0_ack_in = ap_const_logic_1) and (inStream_V_data_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_data_0_sel_wr <= not(inStream_V_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_data_0_state = ap_const_lv2_2) and (inStream_V_data_0_vld_in = ap_const_logic_0)) or ((inStream_V_data_0_state = ap_const_lv2_3) and (inStream_V_data_0_vld_in = ap_const_logic_0) and (inStream_V_data_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_data_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_data_0_state = ap_const_lv2_1) and (inStream_V_data_0_ack_out = ap_const_logic_0)) or ((inStream_V_data_0_state = ap_const_lv2_3) and (inStream_V_data_0_ack_out = ap_const_logic_0) and (inStream_V_data_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_data_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_data_0_vld_in = ap_const_logic_0) and (inStream_V_data_0_ack_out = ap_const_logic_1))) and not(((inStream_V_data_0_ack_out = ap_const_logic_0) and (inStream_V_data_0_vld_in = ap_const_logic_1))) and (inStream_V_data_0_state = ap_const_lv2_3)) or ((inStream_V_data_0_state = ap_const_lv2_1) and (inStream_V_data_0_ack_out = ap_const_logic_1)) or ((inStream_V_data_0_state = ap_const_lv2_2) and (inStream_V_data_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_data_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_dest_V_0_ack_out = ap_const_logic_1) and (inStream_V_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_dest_V_0_sel_rd <= not(inStream_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_dest_V_0_ack_in = ap_const_logic_1) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_dest_V_0_sel_wr <= not(inStream_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_dest_V_0_state = ap_const_lv2_2) and (inStream_V_dest_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_dest_V_0_state = ap_const_lv2_3) and (inStream_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_dest_V_0_state = ap_const_lv2_1) and (inStream_V_dest_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_dest_V_0_state = ap_const_lv2_3) and (inStream_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1))) and (inStream_V_dest_V_0_state = ap_const_lv2_3)) or ((inStream_V_dest_V_0_state = ap_const_lv2_1) and (inStream_V_dest_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_dest_V_0_state = ap_const_lv2_2) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_id_V_0_ack_out = ap_const_logic_1) and (inStream_V_id_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_id_V_0_sel_rd <= not(inStream_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_id_V_0_ack_in = ap_const_logic_1) and (inStream_V_id_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_id_V_0_sel_wr <= not(inStream_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_id_V_0_state = ap_const_lv2_2) and (inStream_V_id_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_id_V_0_state = ap_const_lv2_3) and (inStream_V_id_V_0_vld_in = ap_const_logic_0) and (inStream_V_id_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_id_V_0_state = ap_const_lv2_1) and (inStream_V_id_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_id_V_0_state = ap_const_lv2_3) and (inStream_V_id_V_0_ack_out = ap_const_logic_0) and (inStream_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_id_V_0_vld_in = ap_const_logic_0) and (inStream_V_id_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_id_V_0_ack_out = ap_const_logic_0) and (inStream_V_id_V_0_vld_in = ap_const_logic_1))) and (inStream_V_id_V_0_state = ap_const_lv2_3)) or ((inStream_V_id_V_0_state = ap_const_lv2_1) and (inStream_V_id_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_id_V_0_state = ap_const_lv2_2) and (inStream_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_keep_V_0_ack_out = ap_const_logic_1) and (inStream_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_keep_V_0_sel_rd <= not(inStream_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_keep_V_0_ack_in = ap_const_logic_1) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_keep_V_0_sel_wr <= not(inStream_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_keep_V_0_state = ap_const_lv2_2) and (inStream_V_keep_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_keep_V_0_state = ap_const_lv2_3) and (inStream_V_keep_V_0_vld_in = ap_const_logic_0) and (inStream_V_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_keep_V_0_state = ap_const_lv2_1) and (inStream_V_keep_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_keep_V_0_state = ap_const_lv2_3) and (inStream_V_keep_V_0_ack_out = ap_const_logic_0) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_keep_V_0_vld_in = ap_const_logic_0) and (inStream_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_keep_V_0_ack_out = ap_const_logic_0) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1))) and (inStream_V_keep_V_0_state = ap_const_lv2_3)) or ((inStream_V_keep_V_0_state = ap_const_lv2_1) and (inStream_V_keep_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_keep_V_0_state = ap_const_lv2_2) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_strb_V_0_ack_out = ap_const_logic_1) and (inStream_V_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_strb_V_0_sel_rd <= not(inStream_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_strb_V_0_ack_in = ap_const_logic_1) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_strb_V_0_sel_wr <= not(inStream_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_strb_V_0_state = ap_const_lv2_2) and (inStream_V_strb_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_strb_V_0_state = ap_const_lv2_3) and (inStream_V_strb_V_0_vld_in = ap_const_logic_0) and (inStream_V_strb_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_strb_V_0_state = ap_const_lv2_1) and (inStream_V_strb_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_strb_V_0_state = ap_const_lv2_3) and (inStream_V_strb_V_0_ack_out = ap_const_logic_0) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_strb_V_0_vld_in = ap_const_logic_0) and (inStream_V_strb_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_strb_V_0_ack_out = ap_const_logic_0) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1))) and (inStream_V_strb_V_0_state = ap_const_lv2_3)) or ((inStream_V_strb_V_0_state = ap_const_lv2_1) and (inStream_V_strb_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_strb_V_0_state = ap_const_lv2_2) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_user_V_0_ack_out = ap_const_logic_1) and (inStream_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_user_V_0_sel_rd <= not(inStream_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_user_V_0_ack_in = ap_const_logic_1) and (inStream_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_user_V_0_sel_wr <= not(inStream_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_user_V_0_state = ap_const_lv2_2) and (inStream_V_user_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_user_V_0_state = ap_const_lv2_3) and (inStream_V_user_V_0_vld_in = ap_const_logic_0) and (inStream_V_user_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_user_V_0_state = ap_const_lv2_1) and (inStream_V_user_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_user_V_0_state = ap_const_lv2_3) and (inStream_V_user_V_0_ack_out = ap_const_logic_0) and (inStream_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_user_V_0_vld_in = ap_const_logic_0) and (inStream_V_user_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_user_V_0_ack_out = ap_const_logic_0) and (inStream_V_user_V_0_vld_in = ap_const_logic_1))) and (inStream_V_user_V_0_state = ap_const_lv2_3)) or ((inStream_V_user_V_0_state = ap_const_lv2_1) and (inStream_V_user_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_user_V_0_state = ap_const_lv2_2) and (inStream_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_data_1_ack_out = ap_const_logic_1) and (outStream_V_data_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_data_1_sel_rd <= not(outStream_V_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_data_1_ack_in = ap_const_logic_1) and (outStream_V_data_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_data_1_sel_wr <= not(outStream_V_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_data_1_state = ap_const_lv2_2) and (outStream_V_data_1_vld_in = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_V_data_1_vld_in = ap_const_logic_0) and (outStream_V_data_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_data_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_data_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_data_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_data_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_data_1_vld_in = ap_const_logic_0) and (outStream_V_data_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_data_1_vld_in = ap_const_logic_1))) and (outStream_V_data_1_state = ap_const_lv2_3)) or ((outStream_V_data_1_state = ap_const_lv2_1) and (outStream_V_data_1_ack_out = ap_const_logic_1)) or ((outStream_V_data_1_state = ap_const_lv2_2) and (outStream_V_data_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_data_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_dest_V_1_ack_out = ap_const_logic_1) and (outStream_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_dest_V_1_sel_rd <= not(outStream_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_dest_V_1_ack_in = ap_const_logic_1) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_dest_V_1_sel_wr <= not(outStream_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_dest_V_1_state = ap_const_lv2_2) and (outStream_V_dest_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_V_dest_V_1_vld_in = ap_const_logic_0) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_dest_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_dest_V_1_vld_in = ap_const_logic_0) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1))) and (outStream_V_dest_V_1_state = ap_const_lv2_3)) or ((outStream_V_dest_V_1_state = ap_const_lv2_1) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_dest_V_1_state = ap_const_lv2_2) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_id_V_1_ack_out = ap_const_logic_1) and (outStream_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_id_V_1_sel_rd <= not(outStream_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_id_V_1_ack_in = ap_const_logic_1) and (outStream_V_id_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_id_V_1_sel_wr <= not(outStream_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_id_V_1_state = ap_const_lv2_2) and (outStream_V_id_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_V_id_V_1_vld_in = ap_const_logic_0) and (outStream_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_id_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_id_V_1_vld_in = ap_const_logic_0) and (outStream_V_id_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_id_V_1_vld_in = ap_const_logic_1))) and (outStream_V_id_V_1_state = ap_const_lv2_3)) or ((outStream_V_id_V_1_state = ap_const_lv2_1) and (outStream_V_id_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_id_V_1_state = ap_const_lv2_2) and (outStream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_keep_V_1_ack_out = ap_const_logic_1) and (outStream_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_keep_V_1_sel_rd <= not(outStream_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_keep_V_1_ack_in = ap_const_logic_1) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_keep_V_1_sel_wr <= not(outStream_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_keep_V_1_state = ap_const_lv2_2) and (outStream_V_keep_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_V_keep_V_1_vld_in = ap_const_logic_0) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_keep_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_keep_V_1_vld_in = ap_const_logic_0) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1))) and (outStream_V_keep_V_1_state = ap_const_lv2_3)) or ((outStream_V_keep_V_1_state = ap_const_lv2_1) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_keep_V_1_state = ap_const_lv2_2) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_last_V_1_ack_out = ap_const_logic_1) and (outStream_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_last_V_1_sel_rd <= not(outStream_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_last_V_1_ack_in = ap_const_logic_1) and (outStream_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_last_V_1_sel_wr <= not(outStream_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_last_V_1_state = ap_const_lv2_2) and (outStream_V_last_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_V_last_V_1_vld_in = ap_const_logic_0) and (outStream_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_last_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_last_V_1_vld_in = ap_const_logic_0) and (outStream_V_last_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_last_V_1_vld_in = ap_const_logic_1))) and (outStream_V_last_V_1_state = ap_const_lv2_3)) or ((outStream_V_last_V_1_state = ap_const_lv2_1) and (outStream_V_last_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_last_V_1_state = ap_const_lv2_2) and (outStream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_strb_V_1_ack_out = ap_const_logic_1) and (outStream_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_strb_V_1_sel_rd <= not(outStream_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_strb_V_1_ack_in = ap_const_logic_1) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_strb_V_1_sel_wr <= not(outStream_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_strb_V_1_state = ap_const_lv2_2) and (outStream_V_strb_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_V_strb_V_1_vld_in = ap_const_logic_0) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_strb_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_strb_V_1_vld_in = ap_const_logic_0) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1))) and (outStream_V_strb_V_1_state = ap_const_lv2_3)) or ((outStream_V_strb_V_1_state = ap_const_lv2_1) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_strb_V_1_state = ap_const_lv2_2) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_user_V_1_ack_out = ap_const_logic_1) and (outStream_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_user_V_1_sel_rd <= not(outStream_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_user_V_1_ack_in = ap_const_logic_1) and (outStream_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_user_V_1_sel_wr <= not(outStream_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_user_V_1_state = ap_const_lv2_2) and (outStream_V_user_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_V_user_V_1_vld_in = ap_const_logic_0) and (outStream_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_user_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_user_V_1_vld_in = ap_const_logic_0) and (outStream_V_user_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_user_V_1_vld_in = ap_const_logic_1))) and (outStream_V_user_V_1_state = ap_const_lv2_3)) or ((outStream_V_user_V_1_state = ap_const_lv2_1) and (outStream_V_user_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_user_V_1_state = ap_const_lv2_2) and (outStream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_p_011_reg_730_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln1598_32_fu_1787_p3 = ap_const_lv1_1) and (icmp_ln27_reg_2469 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                ap_phi_reg_pp0_iter1_p_011_reg_730 <= ap_const_lv16_8000;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                ap_phi_reg_pp0_iter1_p_011_reg_730 <= ap_phi_reg_pp0_iter0_p_011_reg_730;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_p_012_reg_742_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln1598_32_fu_1787_p3 = ap_const_lv1_1) and (icmp_ln27_reg_2469 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                ap_phi_reg_pp0_iter1_p_012_reg_742 <= ap_const_lv16_8000;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                ap_phi_reg_pp0_iter1_p_012_reg_742 <= ap_phi_reg_pp0_iter0_p_012_reg_742;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_p_013_reg_754_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln1598_32_fu_1787_p3 = ap_const_lv1_1) and (icmp_ln27_reg_2469 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                ap_phi_reg_pp0_iter1_p_013_reg_754 <= ap_const_lv16_8000;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                ap_phi_reg_pp0_iter1_p_013_reg_754 <= ap_phi_reg_pp0_iter0_p_013_reg_754;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_p_0_reg_766_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln1598_32_fu_1787_p3 = ap_const_lv1_1) and (icmp_ln27_reg_2469 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                ap_phi_reg_pp0_iter1_p_0_reg_766 <= ap_const_lv16_8000;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                ap_phi_reg_pp0_iter1_p_0_reg_766 <= ap_phi_reg_pp0_iter0_p_0_reg_766;
            end if; 
        end if;
    end process;

    i_op_assign_1_reg_708_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln27_reg_2469_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i_op_assign_1_reg_708 <= select_ln30_reg_2691;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_op_assign_1_reg_708 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_op_assign_2_reg_672_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln27_reg_2469 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_op_assign_2_reg_672 <= select_ln33_reg_2643;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_op_assign_2_reg_672 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_op_assign_3_reg_719_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln27_reg_2469_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i_op_assign_3_reg_719 <= select_ln36_reg_2718;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_op_assign_3_reg_719 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_op_assign_4_reg_696_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln27_reg_2469 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_op_assign_4_reg_696 <= input_ch_idx_reg_2671;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_op_assign_4_reg_696 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_op_assign_reg_636_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln27_reg_2469 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_op_assign_reg_636 <= select_ln27_reg_2563;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_op_assign_reg_636 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten180_reg_648_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln27_reg_2469 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten180_reg_648 <= select_ln30_1_reg_2686;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten180_reg_648 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    indvar_flatten308_reg_624_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln27_reg_2469 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten308_reg_624 <= add_ln27_reg_2553;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten308_reg_624 <= ap_const_lv26_0;
            end if; 
        end if;
    end process;

    indvar_flatten79_reg_660_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln27_reg_2469 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten79_reg_660 <= select_ln33_1_reg_2681;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten79_reg_660 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_684_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln27_reg_2469 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_684 <= select_ln36_1_reg_2676;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten_reg_684 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    phi_ln19_reg_536_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_838_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln19_reg_536 <= add_ln19_fu_826_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_ln19_reg_536 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    phi_ln20_reg_558_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_838_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln20_reg_558 <= ap_const_lv3_0;
            elsif (((icmp_ln20_fu_856_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln20_reg_558 <= add_ln20_fu_844_p2;
            end if; 
        end if;
    end process;

    phi_ln21_reg_580_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_856_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln21_reg_580 <= ap_const_lv3_0;
            elsif (((icmp_ln21_fu_874_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_ln21_reg_580 <= add_ln21_fu_862_p2;
            end if; 
        end if;
    end process;

    phi_ln22_reg_602_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_874_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_ln22_reg_602 <= ap_const_lv3_0;
            elsif (((icmp_ln22_fu_892_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_ln22_reg_602 <= add_ln22_fu_880_p2;
            end if; 
        end if;
    end process;

    phi_mul311_reg_569_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_838_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul311_reg_569 <= ap_const_lv12_0;
            elsif (((icmp_ln20_fu_856_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul311_reg_569 <= add_ln627_1_fu_850_p2;
            end if; 
        end if;
    end process;

    phi_mul313_reg_591_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_856_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul313_reg_591 <= ap_const_lv12_0;
            elsif (((icmp_ln21_fu_874_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul313_reg_591 <= add_ln627_2_fu_868_p2;
            end if; 
        end if;
    end process;

    phi_mul315_reg_613_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_874_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul315_reg_613 <= ap_const_lv12_0;
            elsif (((icmp_ln22_fu_892_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_mul315_reg_613 <= add_ln627_3_fu_886_p2;
            end if; 
        end if;
    end process;

    phi_mul_reg_547_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_838_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_547 <= add_ln627_fu_832_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_547 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    reg_806_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln1598_33_reg_2700_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                reg_806 <= line_buff_group_0_va_q1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (select_ln1598_33_reg_2700_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reg_806 <= line_buff_group_0_va_q0;
            end if; 
        end if;
    end process;

    reg_811_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln1598_33_reg_2700_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                reg_811 <= line_buff_group_1_va_q1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (select_ln1598_33_reg_2700_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reg_811 <= line_buff_group_1_va_q0;
            end if; 
        end if;
    end process;

    reg_816_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln1598_33_reg_2700_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                reg_816 <= line_buff_group_2_va_q1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (select_ln1598_33_reg_2700_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reg_816 <= line_buff_group_2_va_q0;
            end if; 
        end if;
    end process;

    reg_821_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln1598_33_reg_2700_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                reg_821 <= line_buff_group_3_va_q1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (select_ln1598_33_reg_2700_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reg_821 <= line_buff_group_3_va_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln1354_2_reg_2406 <= add_ln1354_2_fu_965_p2;
                add_ln1354_reg_2394 <= add_ln1354_fu_947_p2;
                bound185_reg_2417 <= bound185_fu_2226_p2;
                icmp_ln101_2_reg_2427 <= icmp_ln101_2_fu_992_p2;
                icmp_ln33_reg_2452 <= icmp_ln33_fu_1013_p2;
                icmp_ln36_reg_2446 <= icmp_ln36_fu_1008_p2;
                icmp_ln39_reg_2439 <= icmp_ln39_fu_1003_p2;
                icmp_ln55_reg_2433 <= icmp_ln55_fu_998_p2;
                icmp_ln77_2_reg_2422 <= icmp_ln77_2_fu_986_p2;
                    p_cast60_reg_2372(1 downto 0) <= p_cast60_fu_935_p1(1 downto 0);
                ret_V_1_reg_2412 <= ret_V_1_fu_974_p2;
                ret_V_reg_2400 <= ret_V_fu_956_p2;
                    zext_ln1354_4_reg_2387(8 downto 0) <= zext_ln1354_4_fu_941_p1(8 downto 0);
                    zext_ln215_reg_2380(8 downto 0) <= zext_ln215_fu_938_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln1598_33_reg_2700_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln140_2_reg_2889 <= add_ln140_2_fu_2057_p2;
                add_ln140_3_reg_2894 <= add_ln140_3_fu_2073_p2;
                add_ln140_4_reg_2899 <= add_ln140_4_fu_2089_p2;
                add_ln140_5_reg_2904 <= add_ln140_5_fu_2105_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln27_reg_2553 <= add_ln27_fu_1243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln36_reg_2548 <= add_ln36_fu_1237_p2;
                col_idx_reg_2533 <= col_idx_fu_1157_p2;
                conv_count_1_reg_2538 <= conv_count_1_fu_1184_p3;
                    mul_ln203_reg_2660_pp0_iter1_reg(12 downto 1) <= mul_ln203_reg_2660(12 downto 1);
                    mul_ln203_reg_2660_pp0_iter2_reg(12 downto 1) <= mul_ln203_reg_2660_pp0_iter1_reg(12 downto 1);
                or_ln77_1_reg_2543 <= or_ln77_1_fu_1227_p2;
                tmp_dest_V_load_reg_2864_pp0_iter3_reg <= tmp_dest_V_load_reg_2864;
                tmp_id_V_load_reg_2859_pp0_iter3_reg <= tmp_id_V_load_reg_2859;
                tmp_keep_V_load_reg_2844_pp0_iter3_reg <= tmp_keep_V_load_reg_2844;
                tmp_strb_V_load_reg_2849_pp0_iter3_reg <= tmp_strb_V_load_reg_2849;
                tmp_user_V_load_reg_2854_pp0_iter3_reg <= tmp_user_V_load_reg_2854;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln1598_33_fu_1816_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln879_1_reg_2751 <= and_ln879_1_fu_1903_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln879_1_reg_2751_pp0_iter2_reg <= and_ln879_1_reg_2751;
                and_ln879_1_reg_2751_pp0_iter3_reg <= and_ln879_1_reg_2751_pp0_iter2_reg;
                and_ln879_1_reg_2751_pp0_iter4_reg <= and_ln879_1_reg_2751_pp0_iter3_reg;
                icmp_ln27_reg_2469 <= icmp_ln27_fu_1045_p2;
                icmp_ln27_reg_2469_pp0_iter1_reg <= icmp_ln27_reg_2469;
                line_buff_group_0_va_5_reg_2731 <= sext_ln203_fu_1882_p1(12 - 1 downto 0);
                line_buff_group_0_va_6_reg_2774 <= sext_ln140_fu_2002_p1(12 - 1 downto 0);
                line_buff_group_0_va_7_reg_2779 <= sext_ln140_1_fu_2019_p1(12 - 1 downto 0);
                line_buff_group_0_va_7_reg_2779_pp0_iter3_reg <= line_buff_group_0_va_7_reg_2779;
                line_buff_group_1_va_5_reg_2736 <= sext_ln203_fu_1882_p1(12 - 1 downto 0);
                line_buff_group_1_va_6_reg_2794 <= sext_ln140_fu_2002_p1(12 - 1 downto 0);
                line_buff_group_1_va_7_reg_2799 <= sext_ln140_1_fu_2019_p1(12 - 1 downto 0);
                line_buff_group_1_va_7_reg_2799_pp0_iter3_reg <= line_buff_group_1_va_7_reg_2799;
                line_buff_group_2_va_5_reg_2741 <= sext_ln203_fu_1882_p1(12 - 1 downto 0);
                line_buff_group_2_va_6_reg_2814 <= sext_ln140_fu_2002_p1(12 - 1 downto 0);
                line_buff_group_2_va_7_reg_2819 <= sext_ln140_1_fu_2019_p1(12 - 1 downto 0);
                line_buff_group_2_va_7_reg_2819_pp0_iter3_reg <= line_buff_group_2_va_7_reg_2819;
                line_buff_group_3_va_5_reg_2746 <= sext_ln203_fu_1882_p1(12 - 1 downto 0);
                line_buff_group_3_va_6_reg_2834 <= sext_ln140_fu_2002_p1(12 - 1 downto 0);
                line_buff_group_3_va_7_reg_2839 <= sext_ln140_1_fu_2019_p1(12 - 1 downto 0);
                line_buff_group_3_va_7_reg_2839_pp0_iter3_reg <= line_buff_group_3_va_7_reg_2839;
                mul_ln44_reg_2457 <= mul_ln44_fu_1026_p2;
                mul_ln45_reg_2463 <= mul_ln45_fu_1040_p2;
                select_ln1598_33_reg_2700_pp0_iter2_reg <= select_ln1598_33_reg_2700;
                select_ln1598_33_reg_2700_pp0_iter3_reg <= select_ln1598_33_reg_2700_pp0_iter2_reg;
                select_ln1598_33_reg_2700_pp0_iter4_reg <= select_ln1598_33_reg_2700_pp0_iter3_reg;
                select_ln1598_36_reg_2704_pp0_iter2_reg <= select_ln1598_36_reg_2704;
                sext_ln203_reg_2723 <= sext_ln203_fu_1882_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_892_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                bound4_reg_2359 <= bound4_fu_917_p2;
                bound_reg_2353 <= bound_fu_904_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                bound84_reg_2366 <= bound84_fu_929_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln27_reg_2469 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                col_stride_reg_2648 <= col_stride_fu_1500_p2;
                    mul_ln203_reg_2660(12 downto 1) <= mul_ln203_fu_1530_p2(12 downto 1);
                mul_ln45_1_reg_2619 <= mul_ln45_1_fu_1467_p2;
                or_ln1598_1_reg_2573 <= or_ln1598_1_fu_1336_p2;
                row_stride_reg_2568 <= row_stride_fu_1330_p2;
                select_ln1598_12_reg_2581 <= select_ln1598_12_fu_1368_p3;
                select_ln1598_13_reg_2587 <= select_ln1598_13_fu_1386_p3;
                select_ln1598_14_reg_2593 <= select_ln1598_14_fu_1398_p3;
                select_ln1598_18_reg_2599 <= select_ln1598_18_fu_1416_p3;
                select_ln1598_21_reg_2604 <= select_ln1598_21_fu_1429_p3;
                select_ln1598_22_reg_2614 <= select_ln1598_22_fu_1451_p3;
                select_ln1598_24_reg_2628 <= select_ln1598_24_fu_1477_p3;
                select_ln1598_29_reg_2633 <= select_ln1598_29_fu_1485_p3;
                select_ln1598_30_reg_2655 <= select_ln1598_30_fu_1518_p3;
                select_ln1598_reg_2558 <= select_ln1598_fu_1249_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln27_fu_1045_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln30_reg_2478 <= icmp_ln30_fu_1056_p2;
                icmp_ln36_1_reg_2513 <= icmp_ln36_1_fu_1092_p2;
                icmp_ln39_1_reg_2508 <= icmp_ln39_1_fu_1087_p2;
                mul_ln44_1_reg_2496 <= mul_ln44_1_fu_1069_p2;
                out_row_reg_2473 <= out_row_fu_1050_p2;
                select_ln1598_10_reg_2518 <= select_ln1598_10_fu_1102_p3;
                select_ln1598_2_reg_2503 <= select_ln1598_2_fu_1079_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_data_0_load_A = ap_const_logic_1)) then
                inStream_V_data_0_payload_A <= inStream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_data_0_load_B = ap_const_logic_1)) then
                inStream_V_data_0_payload_B <= inStream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_dest_V_0_load_A = ap_const_logic_1)) then
                inStream_V_dest_V_0_payload_A <= inStream_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_dest_V_0_load_B = ap_const_logic_1)) then
                inStream_V_dest_V_0_payload_B <= inStream_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_id_V_0_load_A = ap_const_logic_1)) then
                inStream_V_id_V_0_payload_A <= inStream_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_id_V_0_load_B = ap_const_logic_1)) then
                inStream_V_id_V_0_payload_B <= inStream_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_keep_V_0_load_A = ap_const_logic_1)) then
                inStream_V_keep_V_0_payload_A <= inStream_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_keep_V_0_load_B = ap_const_logic_1)) then
                inStream_V_keep_V_0_payload_B <= inStream_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_strb_V_0_load_A = ap_const_logic_1)) then
                inStream_V_strb_V_0_payload_A <= inStream_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_strb_V_0_load_B = ap_const_logic_1)) then
                inStream_V_strb_V_0_payload_B <= inStream_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_user_V_0_load_A = ap_const_logic_1)) then
                inStream_V_user_V_0_payload_A <= inStream_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_user_V_0_load_B = ap_const_logic_1)) then
                inStream_V_user_V_0_payload_B <= inStream_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln27_reg_2469 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                input_ch_idx_reg_2671 <= input_ch_idx_fu_1536_p2;
                select_ln27_reg_2563 <= select_ln27_fu_1324_p3;
                select_ln30_1_reg_2686 <= select_ln30_1_fu_1576_p3;
                select_ln33_1_reg_2681 <= select_ln33_1_fu_1562_p3;
                select_ln33_reg_2643 <= select_ln33_fu_1492_p3;
                select_ln36_1_reg_2676 <= select_ln36_1_fu_1548_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                input_fold_ch_V_read_reg_2240 <= input_fold_ch_V;
                input_h_V_read_reg_2254 <= input_h_V;
                input_w_V_read_reg_2248 <= input_w_V;
                output_h_V_read_reg_2265 <= output_h_V;
                output_w_V_read_reg_2259 <= output_w_V;
                stride_V_read_reg_2232 <= stride_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_data_1_load_A = ap_const_logic_1)) then
                outStream_V_data_1_payload_A <= call_ln112_write_output_fu_778_outStream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_data_1_load_B = ap_const_logic_1)) then
                outStream_V_data_1_payload_B <= call_ln112_write_output_fu_778_outStream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_dest_V_1_load_A = ap_const_logic_1)) then
                outStream_V_dest_V_1_payload_A <= call_ln112_write_output_fu_778_outStream_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_dest_V_1_load_B = ap_const_logic_1)) then
                outStream_V_dest_V_1_payload_B <= call_ln112_write_output_fu_778_outStream_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_id_V_1_load_A = ap_const_logic_1)) then
                outStream_V_id_V_1_payload_A <= call_ln112_write_output_fu_778_outStream_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_id_V_1_load_B = ap_const_logic_1)) then
                outStream_V_id_V_1_payload_B <= call_ln112_write_output_fu_778_outStream_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_keep_V_1_load_A = ap_const_logic_1)) then
                outStream_V_keep_V_1_payload_A <= call_ln112_write_output_fu_778_outStream_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_keep_V_1_load_B = ap_const_logic_1)) then
                outStream_V_keep_V_1_payload_B <= call_ln112_write_output_fu_778_outStream_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_last_V_1_load_A = ap_const_logic_1)) then
                outStream_V_last_V_1_payload_A <= call_ln112_write_output_fu_778_outStream_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_last_V_1_load_B = ap_const_logic_1)) then
                outStream_V_last_V_1_payload_B <= call_ln112_write_output_fu_778_outStream_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_strb_V_1_load_A = ap_const_logic_1)) then
                outStream_V_strb_V_1_payload_A <= call_ln112_write_output_fu_778_outStream_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_strb_V_1_load_B = ap_const_logic_1)) then
                outStream_V_strb_V_1_payload_B <= call_ln112_write_output_fu_778_outStream_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_user_V_1_load_A = ap_const_logic_1)) then
                outStream_V_user_V_1_payload_A <= call_ln112_write_output_fu_778_outStream_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_user_V_1_load_B = ap_const_logic_1)) then
                outStream_V_user_V_1_payload_B <= call_ln112_write_output_fu_778_outStream_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln27_reg_2469 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln1598_32_reg_2696 <= select_ln1598_32_fu_1787_p3;
                select_ln1598_33_reg_2700 <= select_ln1598_33_fu_1816_p3;
                select_ln1598_36_reg_2704 <= select_ln1598_36_fu_1848_p3;
                select_ln1598_37_reg_2713 <= select_ln1598_37_fu_1865_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln27_reg_2469 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                select_ln30_reg_2691 <= select_ln30_fu_1610_p3;
                select_ln36_reg_2718 <= select_ln36_fu_1872_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (select_ln1598_32_reg_2696 = ap_const_lv1_0) and (icmp_ln27_reg_2469_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_dest_V_fu_214 <= inStream_V_dest_V_0_data_out;
                tmp_id_V_fu_210 <= inStream_V_id_V_0_data_out;
                tmp_keep_V_fu_198 <= inStream_V_keep_V_0_data_out;
                tmp_strb_V_fu_202 <= inStream_V_strb_V_0_data_out;
                tmp_user_V_fu_206 <= inStream_V_user_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (select_ln1598_33_reg_2700_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_dest_V_load_reg_2864 <= tmp_dest_V_fu_214;
                tmp_id_V_load_reg_2859 <= tmp_id_V_fu_210;
                tmp_keep_V_load_reg_2844 <= tmp_keep_V_fu_198;
                tmp_strb_V_load_reg_2849 <= tmp_strb_V_fu_202;
                tmp_user_V_load_reg_2854 <= tmp_user_V_fu_206;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (select_ln1598_33_reg_2700_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                window_0_val_0_V_1_reg_2869 <= line_buff_group_0_va_q1;
                window_1_val_0_V_1_reg_2874 <= line_buff_group_1_va_q1;
                window_2_val_0_V_1_reg_2879 <= line_buff_group_2_va_q1;
                window_3_val_0_V_1_reg_2884 <= line_buff_group_3_va_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (select_ln1598_33_reg_2700_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                window_0_val_1_V_0_reg_2909 <= line_buff_group_0_va_1_q1;
                window_1_val_1_V_0_reg_2915 <= line_buff_group_1_va_1_q1;
                window_2_val_1_V_0_reg_2921 <= line_buff_group_2_va_1_q1;
                window_3_val_1_V_0_reg_2927 <= line_buff_group_3_va_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln1598_33_reg_2700_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                window_0_val_1_V_1_reg_2953 <= line_buff_group_0_va_1_q1;
                window_1_val_1_V_1_reg_2959 <= line_buff_group_1_va_1_q1;
                window_2_val_1_V_1_reg_2965 <= line_buff_group_2_va_1_q1;
                window_3_val_1_V_1_reg_2971 <= line_buff_group_3_va_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln27_reg_2469_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln1598_9_reg_2756(10 downto 0) <= zext_ln1598_9_fu_1995_p1(10 downto 0);
            end if;
        end if;
    end process;
    p_cast60_reg_2372(10 downto 2) <= "000000000";
    zext_ln215_reg_2380(10 downto 9) <= "00";
    zext_ln1354_4_reg_2387(10 downto 9) <= "00";
    mul_ln203_reg_2660(0) <= '0';
    mul_ln203_reg_2660_pp0_iter1_reg(0) <= '0';
    mul_ln203_reg_2660_pp0_iter2_reg(0) <= '0';
    zext_ln1598_9_reg_2756(12 downto 11) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, outStream_TREADY, outStream_V_data_1_state, outStream_V_keep_V_1_state, outStream_V_strb_V_1_state, outStream_V_user_V_1_state, outStream_V_last_V_1_state, outStream_V_id_V_1_state, outStream_V_dest_V_1_state, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, icmp_ln27_reg_2469, ap_enable_reg_pp0_iter4, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln22_fu_892_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage1_subdone, icmp_ln19_fu_838_p2, icmp_ln20_fu_856_p2, icmp_ln21_fu_874_p2, ap_CS_fsm_state18, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln19_fu_838_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln20_fu_856_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln21_fu_874_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln22_fu_892_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln27_reg_2469 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln27_reg_2469 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state18 => 
                if ((not(((outStream_V_dest_V_1_state = ap_const_lv2_1) or (outStream_V_id_V_1_state = ap_const_lv2_1) or (outStream_V_last_V_1_state = ap_const_lv2_1) or (outStream_V_user_V_1_state = ap_const_lv2_1) or (outStream_V_strb_V_1_state = ap_const_lv2_1) or (outStream_V_keep_V_1_state = ap_const_lv2_1) or (outStream_V_data_1_state = ap_const_lv2_1) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln1354_2_fu_965_p2 <= std_logic_vector(unsigned(zext_ln1354_2_fu_962_p1) + unsigned(ap_const_lv10_3FF));
    add_ln1354_fu_947_p2 <= std_logic_vector(unsigned(zext_ln1354_fu_944_p1) + unsigned(ap_const_lv3_7));
    add_ln140_1_fu_2014_p2 <= std_logic_vector(unsigned(mul_ln203_reg_2660_pp0_iter1_reg) + unsigned(zext_ln1598_9_fu_1995_p1));
    add_ln140_2_fu_2057_p2 <= std_logic_vector(unsigned(mul_ln203_reg_2660_pp0_iter2_reg) + unsigned(select_ln156_fu_2051_p3));
    add_ln140_3_fu_2073_p2 <= std_logic_vector(unsigned(mul_ln203_reg_2660_pp0_iter2_reg) + unsigned(select_ln156_3_fu_2067_p3));
    add_ln140_4_fu_2089_p2 <= std_logic_vector(unsigned(mul_ln203_reg_2660_pp0_iter2_reg) + unsigned(select_ln156_6_fu_2083_p3));
    add_ln140_5_fu_2105_p2 <= std_logic_vector(unsigned(mul_ln203_reg_2660_pp0_iter2_reg) + unsigned(select_ln156_9_fu_2099_p3));
    add_ln140_fu_1998_p2 <= std_logic_vector(unsigned(mul_ln203_reg_2660_pp0_iter1_reg) + unsigned(select_ln1598_36_reg_2704));
    add_ln1598_1_fu_1859_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(trunc_ln140_2_fu_1855_p1));
    add_ln1598_fu_1709_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(trunc_ln140_1_fu_1705_p1));
    add_ln19_fu_826_p2 <= std_logic_vector(unsigned(phi_ln19_reg_536) + unsigned(ap_const_lv3_1));
    add_ln203_fu_1877_p2 <= std_logic_vector(unsigned(mul_ln203_reg_2660) + unsigned(zext_ln1598_8_fu_1767_p1));
    add_ln20_fu_844_p2 <= std_logic_vector(unsigned(phi_ln20_reg_558) + unsigned(ap_const_lv3_1));
    add_ln21_fu_862_p2 <= std_logic_vector(unsigned(phi_ln21_reg_580) + unsigned(ap_const_lv3_1));
    add_ln22_fu_880_p2 <= std_logic_vector(unsigned(phi_ln22_reg_602) + unsigned(ap_const_lv3_1));
    add_ln27_fu_1243_p2 <= std_logic_vector(unsigned(ap_const_lv26_1) + unsigned(indvar_flatten308_reg_624));
    add_ln30_1_fu_1570_p2 <= std_logic_vector(unsigned(indvar_flatten180_reg_648) + unsigned(ap_const_lv17_1));
    add_ln33_1_fu_1556_p2 <= std_logic_vector(unsigned(indvar_flatten79_reg_660) + unsigned(ap_const_lv15_1));
    add_ln36_1_fu_1542_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_684) + unsigned(ap_const_lv6_1));
    add_ln36_fu_1237_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(trunc_ln140_fu_1233_p1));
    add_ln44_1_fu_1356_p2 <= std_logic_vector(unsigned(zext_ln1598_5_fu_1348_p1) + unsigned(select_ln1598_1_fu_1256_p3));
    add_ln45_1_fu_1725_p2 <= std_logic_vector(unsigned(zext_ln1598_7_fu_1722_p1) + unsigned(select_ln1598_23_fu_1615_p3));
    add_ln49_1_fu_1634_p2 <= std_logic_vector(signed(ap_const_lv12_FFF) + signed(zext_ln45_3_fu_1621_p1));
    add_ln49_2_fu_1746_p2 <= std_logic_vector(signed(ap_const_lv12_FFF) + signed(zext_ln45_4_fu_1731_p1));
    add_ln627_1_fu_850_p2 <= std_logic_vector(unsigned(phi_mul311_reg_569) + unsigned(ap_const_lv12_1A2));
    add_ln627_2_fu_868_p2 <= std_logic_vector(unsigned(phi_mul313_reg_591) + unsigned(ap_const_lv12_1A2));
    add_ln627_3_fu_886_p2 <= std_logic_vector(unsigned(phi_mul315_reg_613) + unsigned(ap_const_lv12_1A2));
    add_ln627_fu_832_p2 <= std_logic_vector(unsigned(phi_mul_reg_547) + unsigned(ap_const_lv12_1A2));
    and_ln48_1_fu_1629_p2 <= (select_ln1598_12_reg_2581 and icmp_ln48_4_fu_1624_p2);
    and_ln48_2_fu_1741_p2 <= (select_ln1598_12_reg_2581 and icmp_ln48_5_fu_1735_p2);
    and_ln48_fu_1172_p2 <= (icmp_ln48_fu_1122_p2 and icmp_ln48_1_fu_1166_p2);
    and_ln879_1_fu_1903_p2 <= (select_ln1598_24_reg_2628 and and_ln879_fu_1898_p2);
    and_ln879_fu_1898_p2 <= (select_ln1598_2_reg_2503 and icmp_ln879_fu_1893_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state18 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(inStream_V_data_0_vld_out, ap_enable_reg_pp0_iter1, call_ln112_write_output_fu_778_outStream_TDATA_blk_n, ap_enable_reg_pp0_iter4, select_ln1598_33_reg_2700_pp0_iter4_reg, ap_predicate_op320_read_state11)
    begin
                ap_block_pp0_stage1_11001 <= (((select_ln1598_33_reg_2700_pp0_iter4_reg = ap_const_lv1_0) and (call_ln112_write_output_fu_778_outStream_TDATA_blk_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((inStream_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op320_read_state11 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_11001_ignoreCallOp461_assign_proc : process(inStream_V_data_0_vld_out, ap_enable_reg_pp0_iter1, ap_predicate_op320_read_state11)
    begin
                ap_block_pp0_stage1_11001_ignoreCallOp461 <= ((inStream_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op320_read_state11 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(inStream_V_data_0_vld_out, ap_enable_reg_pp0_iter1, call_ln112_write_output_fu_778_outStream_TDATA_blk_n, ap_enable_reg_pp0_iter4, select_ln1598_33_reg_2700_pp0_iter4_reg, ap_predicate_op320_read_state11)
    begin
                ap_block_pp0_stage1_subdone <= (((select_ln1598_33_reg_2700_pp0_iter4_reg = ap_const_lv1_0) and (call_ln112_write_output_fu_778_outStream_TDATA_blk_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((inStream_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op320_read_state11 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage1_iter1_assign_proc : process(inStream_V_data_0_vld_out, ap_predicate_op320_read_state11)
    begin
                ap_block_state11_pp0_stage1_iter1 <= ((inStream_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op320_read_state11 = ap_const_boolean_1));
    end process;


    ap_block_state11_pp0_stage1_iter1_ignore_call65_assign_proc : process(inStream_V_data_0_vld_out, ap_predicate_op320_read_state11)
    begin
                ap_block_state11_pp0_stage1_iter1_ignore_call65 <= ((inStream_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op320_read_state11 = ap_const_boolean_1));
    end process;

        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter2_ignore_call65 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter3_ignore_call65 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_pp0_stage1_iter4_assign_proc : process(call_ln112_write_output_fu_778_outStream_TDATA_blk_n, select_ln1598_33_reg_2700_pp0_iter4_reg)
    begin
                ap_block_state17_pp0_stage1_iter4 <= ((select_ln1598_33_reg_2700_pp0_iter4_reg = ap_const_lv1_0) and (call_ln112_write_output_fu_778_outStream_TDATA_blk_n = ap_const_logic_0));
    end process;

        ap_block_state17_pp0_stage1_iter4_ignore_call65 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state18_assign_proc : process(outStream_TREADY, outStream_V_data_1_state, outStream_V_keep_V_1_state, outStream_V_strb_V_1_state, outStream_V_user_V_1_state, outStream_V_last_V_1_state, outStream_V_id_V_1_state, outStream_V_dest_V_1_state)
    begin
                ap_block_state18 <= ((outStream_V_dest_V_1_state = ap_const_lv2_1) or (outStream_V_id_V_1_state = ap_const_lv2_1) or (outStream_V_last_V_1_state = ap_const_lv2_1) or (outStream_V_user_V_1_state = ap_const_lv2_1) or (outStream_V_strb_V_1_state = ap_const_lv2_1) or (outStream_V_keep_V_1_state = ap_const_lv2_1) or (outStream_V_data_1_state = ap_const_lv2_1) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)));
    end process;

        ap_block_state8_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter0_ignore_call65 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln27_reg_2469)
    begin
        if ((icmp_ln27_reg_2469 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(outStream_TREADY, outStream_V_data_1_state, outStream_V_keep_V_1_state, outStream_V_strb_V_1_state, outStream_V_user_V_1_state, outStream_V_last_V_1_state, outStream_V_id_V_1_state, outStream_V_dest_V_1_state, ap_CS_fsm_state18)
    begin
        if ((not(((outStream_V_dest_V_1_state = ap_const_lv2_1) or (outStream_V_id_V_1_state = ap_const_lv2_1) or (outStream_V_last_V_1_state = ap_const_lv2_1) or (outStream_V_user_V_1_state = ap_const_lv2_1) or (outStream_V_strb_V_1_state = ap_const_lv2_1) or (outStream_V_keep_V_1_state = ap_const_lv2_1) or (outStream_V_data_1_state = ap_const_lv2_1) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_op_assign_1_phi_fu_712_p4_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, icmp_ln27_reg_2469_pp0_iter1_reg, i_op_assign_1_reg_708, select_ln30_reg_2691)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln27_reg_2469_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_i_op_assign_1_phi_fu_712_p4 <= select_ln30_reg_2691;
        else 
            ap_phi_mux_i_op_assign_1_phi_fu_712_p4 <= i_op_assign_1_reg_708;
        end if; 
    end process;


    ap_phi_mux_i_op_assign_2_phi_fu_676_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln27_reg_2469, i_op_assign_2_reg_672, ap_CS_fsm_pp0_stage0, select_ln33_reg_2643, ap_block_pp0_stage0)
    begin
        if (((icmp_ln27_reg_2469 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_op_assign_2_phi_fu_676_p4 <= select_ln33_reg_2643;
        else 
            ap_phi_mux_i_op_assign_2_phi_fu_676_p4 <= i_op_assign_2_reg_672;
        end if; 
    end process;


    ap_phi_mux_i_op_assign_3_phi_fu_723_p4_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, icmp_ln27_reg_2469_pp0_iter1_reg, i_op_assign_3_reg_719, select_ln36_reg_2718)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln27_reg_2469_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_i_op_assign_3_phi_fu_723_p4 <= select_ln36_reg_2718;
        else 
            ap_phi_mux_i_op_assign_3_phi_fu_723_p4 <= i_op_assign_3_reg_719;
        end if; 
    end process;


    ap_phi_mux_i_op_assign_4_phi_fu_700_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln27_reg_2469, i_op_assign_4_reg_696, ap_CS_fsm_pp0_stage0, input_ch_idx_reg_2671, ap_block_pp0_stage0)
    begin
        if (((icmp_ln27_reg_2469 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_op_assign_4_phi_fu_700_p4 <= input_ch_idx_reg_2671;
        else 
            ap_phi_mux_i_op_assign_4_phi_fu_700_p4 <= i_op_assign_4_reg_696;
        end if; 
    end process;


    ap_phi_mux_i_op_assign_phi_fu_640_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln27_reg_2469, i_op_assign_reg_636, ap_CS_fsm_pp0_stage0, select_ln27_reg_2563, ap_block_pp0_stage0)
    begin
        if (((icmp_ln27_reg_2469 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_op_assign_phi_fu_640_p4 <= select_ln27_reg_2563;
        else 
            ap_phi_mux_i_op_assign_phi_fu_640_p4 <= i_op_assign_reg_636;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten180_phi_fu_652_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln27_reg_2469, indvar_flatten180_reg_648, ap_CS_fsm_pp0_stage0, select_ln30_1_reg_2686, ap_block_pp0_stage0)
    begin
        if (((icmp_ln27_reg_2469 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten180_phi_fu_652_p4 <= select_ln30_1_reg_2686;
        else 
            ap_phi_mux_indvar_flatten180_phi_fu_652_p4 <= indvar_flatten180_reg_648;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten308_phi_fu_628_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln27_reg_2469, indvar_flatten308_reg_624, ap_CS_fsm_pp0_stage0, add_ln27_reg_2553, ap_block_pp0_stage0)
    begin
        if (((icmp_ln27_reg_2469 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten308_phi_fu_628_p4 <= add_ln27_reg_2553;
        else 
            ap_phi_mux_indvar_flatten308_phi_fu_628_p4 <= indvar_flatten308_reg_624;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten79_phi_fu_664_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln27_reg_2469, indvar_flatten79_reg_660, ap_CS_fsm_pp0_stage0, select_ln33_1_reg_2681, ap_block_pp0_stage0)
    begin
        if (((icmp_ln27_reg_2469 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten79_phi_fu_664_p4 <= select_ln33_1_reg_2681;
        else 
            ap_phi_mux_indvar_flatten79_phi_fu_664_p4 <= indvar_flatten79_reg_660;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_688_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln27_reg_2469, indvar_flatten_reg_684, ap_CS_fsm_pp0_stage0, select_ln36_1_reg_2676, ap_block_pp0_stage0)
    begin
        if (((icmp_ln27_reg_2469 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_688_p4 <= select_ln36_1_reg_2676;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_688_p4 <= indvar_flatten_reg_684;
        end if; 
    end process;


    ap_phi_mux_p_011_phi_fu_734_p4_assign_proc : process(inStream_V_data_0_data_out, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, icmp_ln27_reg_2469_pp0_iter1_reg, select_ln1598_32_reg_2696, ap_phi_reg_pp0_iter1_p_011_reg_730)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (select_ln1598_32_reg_2696 = ap_const_lv1_0) and (icmp_ln27_reg_2469_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_p_011_phi_fu_734_p4 <= inStream_V_data_0_data_out(63 downto 48);
        else 
            ap_phi_mux_p_011_phi_fu_734_p4 <= ap_phi_reg_pp0_iter1_p_011_reg_730;
        end if; 
    end process;


    ap_phi_mux_p_012_phi_fu_746_p4_assign_proc : process(inStream_V_data_0_data_out, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, icmp_ln27_reg_2469_pp0_iter1_reg, select_ln1598_32_reg_2696, ap_phi_reg_pp0_iter1_p_012_reg_742)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (select_ln1598_32_reg_2696 = ap_const_lv1_0) and (icmp_ln27_reg_2469_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_p_012_phi_fu_746_p4 <= inStream_V_data_0_data_out(47 downto 32);
        else 
            ap_phi_mux_p_012_phi_fu_746_p4 <= ap_phi_reg_pp0_iter1_p_012_reg_742;
        end if; 
    end process;


    ap_phi_mux_p_013_phi_fu_758_p4_assign_proc : process(inStream_V_data_0_data_out, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, icmp_ln27_reg_2469_pp0_iter1_reg, select_ln1598_32_reg_2696, ap_phi_reg_pp0_iter1_p_013_reg_754)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (select_ln1598_32_reg_2696 = ap_const_lv1_0) and (icmp_ln27_reg_2469_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_p_013_phi_fu_758_p4 <= inStream_V_data_0_data_out(31 downto 16);
        else 
            ap_phi_mux_p_013_phi_fu_758_p4 <= ap_phi_reg_pp0_iter1_p_013_reg_754;
        end if; 
    end process;


    ap_phi_mux_p_0_phi_fu_770_p4_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, icmp_ln27_reg_2469_pp0_iter1_reg, select_ln1598_32_reg_2696, curr_input_data_sub_s_fu_1932_p1, ap_phi_reg_pp0_iter1_p_0_reg_766)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (select_ln1598_32_reg_2696 = ap_const_lv1_0) and (icmp_ln27_reg_2469_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_p_0_phi_fu_770_p4 <= curr_input_data_sub_s_fu_1932_p1;
        else 
            ap_phi_mux_p_0_phi_fu_770_p4 <= ap_phi_reg_pp0_iter1_p_0_reg_766;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_p_011_reg_730 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_p_012_reg_742 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_p_013_reg_754 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_p_0_reg_766 <= "XXXXXXXXXXXXXXXX";

    ap_predicate_op320_read_state11_assign_proc : process(icmp_ln27_reg_2469_pp0_iter1_reg, select_ln1598_32_reg_2696)
    begin
                ap_predicate_op320_read_state11 <= ((select_ln1598_32_reg_2696 = ap_const_lv1_0) and (icmp_ln27_reg_2469_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(outStream_TREADY, outStream_V_data_1_state, outStream_V_keep_V_1_state, outStream_V_strb_V_1_state, outStream_V_user_V_1_state, outStream_V_last_V_1_state, outStream_V_id_V_1_state, outStream_V_dest_V_1_state, ap_CS_fsm_state18)
    begin
        if ((not(((outStream_V_dest_V_1_state = ap_const_lv2_1) or (outStream_V_id_V_1_state = ap_const_lv2_1) or (outStream_V_last_V_1_state = ap_const_lv2_1) or (outStream_V_user_V_1_state = ap_const_lv2_1) or (outStream_V_strb_V_1_state = ap_const_lv2_1) or (outStream_V_keep_V_1_state = ap_const_lv2_1) or (outStream_V_data_1_state = ap_const_lv2_1) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bound185_fu_2226_p0 <= bound185_fu_2226_p00(9 - 1 downto 0);
    bound185_fu_2226_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_h_V_read_reg_2265),26));
    bound185_fu_2226_p1 <= bound185_fu_2226_p10(17 - 1 downto 0);
    bound185_fu_2226_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound84_reg_2366),26));
    bound4_fu_917_p0 <= bound4_fu_917_p00(9 - 1 downto 0);
    bound4_fu_917_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_w_V_read_reg_2259),15));
    bound4_fu_917_p1 <= bound4_fu_917_p10(6 - 1 downto 0);
    bound4_fu_917_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_904_p2),15));
    bound4_fu_917_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound4_fu_917_p0) * unsigned(bound4_fu_917_p1), 15));
    bound84_fu_929_p0 <= bound84_fu_929_p00(2 - 1 downto 0);
    bound84_fu_929_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stride_V_read_reg_2232),17));
    bound84_fu_929_p1 <= bound84_fu_929_p10(15 - 1 downto 0);
    bound84_fu_929_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound4_reg_2359),17));
    bound84_fu_929_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound84_fu_929_p0) * unsigned(bound84_fu_929_p1), 17));
    bound_fu_904_p0 <= bound_fu_904_p00(2 - 1 downto 0);
    bound_fu_904_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stride_V_read_reg_2232),6));
    bound_fu_904_p1 <= bound_fu_904_p10(4 - 1 downto 0);
    bound_fu_904_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_fold_ch_V_read_reg_2240),6));
    bound_fu_904_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_904_p0) * unsigned(bound_fu_904_p1), 6));

    call_ln112_write_output_fu_778_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001_ignoreCallOp461)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp461))) then 
            call_ln112_write_output_fu_778_ap_ce <= ap_const_logic_1;
        else 
            call_ln112_write_output_fu_778_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    call_ln112_write_output_fu_778_ap_start <= call_ln112_write_output_fu_778_ap_start_reg;
    call_ln112_write_output_fu_778_outStream_TREADY <= ((outStream_V_dest_V_1_ack_in and ap_CS_fsm_pp0_stage1) or (outStream_V_id_V_1_ack_in and ap_CS_fsm_pp0_stage1) or (outStream_V_last_V_1_ack_in and ap_CS_fsm_pp0_stage1) or (outStream_V_user_V_1_ack_in and ap_CS_fsm_pp0_stage1) or (outStream_V_strb_V_1_ack_in and ap_CS_fsm_pp0_stage1) or (outStream_V_keep_V_1_ack_in and ap_CS_fsm_pp0_stage1) or (outStream_V_data_1_ack_in and ap_CS_fsm_pp0_stage1));
    call_ln112_write_output_fu_778_val_output_0_V <= 
        window_0_val_1_V_1_reg_2953 when (icmp_ln1494_2_fu_2138_p2(0) = '1') else 
        select_ln156_1_fu_2131_p3;
    call_ln112_write_output_fu_778_val_output_1_V <= 
        window_1_val_1_V_1_reg_2959 when (icmp_ln1494_5_fu_2163_p2(0) = '1') else 
        select_ln156_4_fu_2156_p3;
    call_ln112_write_output_fu_778_val_output_2_V <= 
        window_2_val_1_V_1_reg_2965 when (icmp_ln1494_8_fu_2188_p2(0) = '1') else 
        select_ln156_7_fu_2181_p3;
    call_ln112_write_output_fu_778_val_output_3_V <= 
        window_3_val_1_V_1_reg_2971 when (icmp_ln1494_11_fu_2213_p2(0) = '1') else 
        select_ln156_10_fu_2206_p3;
    col_idx_fu_1157_p2 <= std_logic_vector(unsigned(zext_ln1598_3_fu_1153_p1) + unsigned(mul_ln45_reg_2463));
    col_stride_fu_1500_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln1598_22_fu_1451_p3));
    conv_count_1_fu_1184_p3 <= 
        conv_count_fu_1178_p2 when (and_ln48_fu_1172_p2(0) = '1') else 
        ap_const_lv12_0;
    conv_count_fu_1178_p2 <= std_logic_vector(signed(ap_const_lv12_FFF) + signed(zext_ln45_1_fu_1162_p1));
    curr_input_data_sub_s_fu_1932_p1 <= inStream_V_data_0_data_out(16 - 1 downto 0);
    icmp_ln101_1_fu_1148_p2 <= "1" when (zext_ln45_fu_1144_p1 = add_ln1354_2_reg_2406) else "0";
    icmp_ln101_2_fu_992_p2 <= "1" when (add_ln1354_2_fu_965_p2 = ap_const_lv10_0) else "0";
    icmp_ln101_3_fu_1074_p2 <= "1" when (zext_ln44_2_fu_1065_p1 = ret_V_reg_2400) else "0";
    icmp_ln101_4_fu_1472_p2 <= "1" when (zext_ln45_2_fu_1463_p1 = add_ln1354_2_reg_2406) else "0";
    icmp_ln101_fu_1031_p2 <= "1" when (zext_ln44_fu_1022_p1 = ret_V_reg_2400) else "0";
    icmp_ln1494_10_fu_2201_p2 <= "1" when (signed(reg_821) < signed(window_3_val_1_V_0_reg_2927)) else "0";
    icmp_ln1494_11_fu_2213_p2 <= "1" when (signed(select_ln156_10_fu_2206_p3) < signed(window_3_val_1_V_1_reg_2971)) else "0";
    icmp_ln1494_1_fu_2126_p2 <= "1" when (signed(reg_806) < signed(window_0_val_1_V_0_reg_2909)) else "0";
    icmp_ln1494_2_fu_2138_p2 <= "1" when (signed(select_ln156_1_fu_2131_p3) < signed(window_0_val_1_V_1_reg_2953)) else "0";
    icmp_ln1494_3_fu_2062_p2 <= "1" when (signed(window_1_val_0_V_1_reg_2874) > signed(reg_811)) else "0";
    icmp_ln1494_4_fu_2151_p2 <= "1" when (signed(reg_811) < signed(window_1_val_1_V_0_reg_2915)) else "0";
    icmp_ln1494_5_fu_2163_p2 <= "1" when (signed(select_ln156_4_fu_2156_p3) < signed(window_1_val_1_V_1_reg_2959)) else "0";
    icmp_ln1494_6_fu_2078_p2 <= "1" when (signed(window_2_val_0_V_1_reg_2879) > signed(reg_816)) else "0";
    icmp_ln1494_7_fu_2176_p2 <= "1" when (signed(reg_816) < signed(window_2_val_1_V_0_reg_2921)) else "0";
    icmp_ln1494_8_fu_2188_p2 <= "1" when (signed(select_ln156_7_fu_2181_p3) < signed(window_2_val_1_V_1_reg_2965)) else "0";
    icmp_ln1494_9_fu_2094_p2 <= "1" when (signed(window_3_val_0_V_1_reg_2884) > signed(reg_821)) else "0";
    icmp_ln1494_fu_2046_p2 <= "1" when (signed(window_0_val_0_V_1_reg_2869) > signed(reg_806)) else "0";
    icmp_ln19_fu_838_p2 <= "1" when (phi_ln19_reg_536 = ap_const_lv3_7) else "0";
    icmp_ln20_fu_856_p2 <= "1" when (phi_ln20_reg_558 = ap_const_lv3_7) else "0";
    icmp_ln21_fu_874_p2 <= "1" when (phi_ln21_reg_580 = ap_const_lv3_7) else "0";
    icmp_ln22_fu_892_p2 <= "1" when (phi_ln22_reg_602 = ap_const_lv3_7) else "0";
    icmp_ln27_fu_1045_p2 <= "1" when (ap_phi_mux_indvar_flatten308_phi_fu_628_p4 = bound185_reg_2417) else "0";
    icmp_ln30_fu_1056_p2 <= "1" when (ap_phi_mux_indvar_flatten180_phi_fu_652_p4 = bound84_reg_2366) else "0";
    icmp_ln33_1_fu_1097_p2 <= "1" when (ap_phi_mux_indvar_flatten79_phi_fu_664_p4 = bound4_reg_2359) else "0";
    icmp_ln33_fu_1013_p2 <= "1" when (bound4_reg_2359 = ap_const_lv15_0) else "0";
    icmp_ln36_1_fu_1092_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_688_p4 = bound_reg_2353) else "0";
    icmp_ln36_fu_1008_p2 <= "1" when (bound_reg_2353 = ap_const_lv6_0) else "0";
    icmp_ln39_1_fu_1087_p2 <= "1" when (ap_phi_mux_i_op_assign_4_phi_fu_700_p4 = input_fold_ch_V_read_reg_2240) else "0";
    icmp_ln39_fu_1003_p2 <= "1" when (input_fold_ch_V_read_reg_2240 = ap_const_lv4_0) else "0";
    icmp_ln48_1_fu_1166_p2 <= "0" when (col_idx_fu_1157_p2 = ap_const_lv11_0) else "1";
    icmp_ln48_2_fu_1261_p2 <= "0" when (mul_ln44_1_reg_2496 = ap_const_lv11_0) else "1";
    icmp_ln48_3_fu_1362_p2 <= "0" when (add_ln44_1_fu_1356_p2 = ap_const_lv11_0) else "1";
    icmp_ln48_4_fu_1624_p2 <= "0" when (mul_ln45_1_reg_2619 = ap_const_lv11_0) else "1";
    icmp_ln48_5_fu_1735_p2 <= "0" when (add_ln45_1_fu_1725_p2 = ap_const_lv11_0) else "1";
    icmp_ln48_fu_1122_p2 <= "0" when (row_idx_fu_1117_p2 = ap_const_lv11_0) else "1";
    icmp_ln55_1_fu_1128_p2 <= "1" when (unsigned(row_idx_fu_1117_p2) < unsigned(zext_ln215_reg_2380)) else "0";
    icmp_ln55_2_fu_1192_p2 <= "1" when (unsigned(col_idx_fu_1157_p2) < unsigned(zext_ln1354_4_reg_2387)) else "0";
    icmp_ln55_3_fu_1273_p2 <= "1" when (unsigned(mul_ln44_1_reg_2496) < unsigned(zext_ln215_reg_2380)) else "0";
    icmp_ln55_4_fu_1375_p2 <= "1" when (unsigned(add_ln44_1_fu_1356_p2) < unsigned(zext_ln215_reg_2380)) else "0";
    icmp_ln55_5_fu_1654_p2 <= "1" when (unsigned(mul_ln45_1_reg_2619) < unsigned(zext_ln1354_4_reg_2387)) else "0";
    icmp_ln55_6_fu_1771_p2 <= "1" when (unsigned(add_ln45_1_fu_1725_p2) < unsigned(zext_ln1354_4_reg_2387)) else "0";
    icmp_ln55_fu_998_p2 <= "1" when (input_w_V_read_reg_2248 = ap_const_lv9_0) else "0";
    icmp_ln77_1_fu_1215_p2 <= "0" when (ap_phi_mux_i_op_assign_3_phi_fu_723_p4 = ap_phi_mux_i_op_assign_1_phi_fu_712_p4) else "1";
    icmp_ln77_2_fu_986_p2 <= "0" when (add_ln1354_fu_947_p2 = ap_const_lv3_0) else "1";
    icmp_ln77_3_fu_1393_p2 <= "0" when (zext_ln44_3_fu_1352_p1 = add_ln1354_reg_2394) else "1";
    icmp_ln77_4_fu_1681_p2 <= "0" when (select_ln30_fu_1610_p3 = ap_const_lv2_0) else "1";
    icmp_ln77_5_fu_1800_p2 <= "0" when (col_stride_reg_2648 = select_ln30_fu_1610_p3) else "1";
    icmp_ln77_fu_1139_p2 <= "0" when (zext_ln44_1_fu_1113_p1 = add_ln1354_reg_2394) else "1";
    icmp_ln879_fu_1893_p2 <= "1" when (zext_ln879_fu_1890_p1 = ret_V_1_reg_2412) else "0";

    inStream_TDATA_blk_n_assign_proc : process(inStream_V_data_0_state, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, icmp_ln27_reg_2469_pp0_iter1_reg, select_ln1598_32_reg_2696)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (select_ln1598_32_reg_2696 = ap_const_lv1_0) and (icmp_ln27_reg_2469_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            inStream_TDATA_blk_n <= inStream_V_data_0_state(0);
        else 
            inStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inStream_TREADY <= inStream_V_dest_V_0_state(1);
    inStream_V_data_0_ack_in <= inStream_V_data_0_state(1);

    inStream_V_data_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_predicate_op320_read_state11, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op320_read_state11 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            inStream_V_data_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_data_0_data_out_assign_proc : process(inStream_V_data_0_payload_A, inStream_V_data_0_payload_B, inStream_V_data_0_sel)
    begin
        if ((inStream_V_data_0_sel = ap_const_logic_1)) then 
            inStream_V_data_0_data_out <= inStream_V_data_0_payload_B;
        else 
            inStream_V_data_0_data_out <= inStream_V_data_0_payload_A;
        end if; 
    end process;

    inStream_V_data_0_load_A <= (inStream_V_data_0_state_cmp_full and not(inStream_V_data_0_sel_wr));
    inStream_V_data_0_load_B <= (inStream_V_data_0_state_cmp_full and inStream_V_data_0_sel_wr);
    inStream_V_data_0_sel <= inStream_V_data_0_sel_rd;
    inStream_V_data_0_state_cmp_full <= '0' when (inStream_V_data_0_state = ap_const_lv2_1) else '1';
    inStream_V_data_0_vld_in <= inStream_TVALID;
    inStream_V_data_0_vld_out <= inStream_V_data_0_state(0);
    inStream_V_dest_V_0_ack_in <= inStream_V_dest_V_0_state(1);

    inStream_V_dest_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_predicate_op320_read_state11, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op320_read_state11 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            inStream_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_dest_V_0_data_out_assign_proc : process(inStream_V_dest_V_0_payload_A, inStream_V_dest_V_0_payload_B, inStream_V_dest_V_0_sel)
    begin
        if ((inStream_V_dest_V_0_sel = ap_const_logic_1)) then 
            inStream_V_dest_V_0_data_out <= inStream_V_dest_V_0_payload_B;
        else 
            inStream_V_dest_V_0_data_out <= inStream_V_dest_V_0_payload_A;
        end if; 
    end process;

    inStream_V_dest_V_0_load_A <= (inStream_V_dest_V_0_state_cmp_full and not(inStream_V_dest_V_0_sel_wr));
    inStream_V_dest_V_0_load_B <= (inStream_V_dest_V_0_state_cmp_full and inStream_V_dest_V_0_sel_wr);
    inStream_V_dest_V_0_sel <= inStream_V_dest_V_0_sel_rd;
    inStream_V_dest_V_0_state_cmp_full <= '0' when (inStream_V_dest_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_dest_V_0_vld_in <= inStream_TVALID;
    inStream_V_dest_V_0_vld_out <= inStream_V_dest_V_0_state(0);
    inStream_V_id_V_0_ack_in <= inStream_V_id_V_0_state(1);

    inStream_V_id_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_predicate_op320_read_state11, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op320_read_state11 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            inStream_V_id_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_id_V_0_data_out_assign_proc : process(inStream_V_id_V_0_payload_A, inStream_V_id_V_0_payload_B, inStream_V_id_V_0_sel)
    begin
        if ((inStream_V_id_V_0_sel = ap_const_logic_1)) then 
            inStream_V_id_V_0_data_out <= inStream_V_id_V_0_payload_B;
        else 
            inStream_V_id_V_0_data_out <= inStream_V_id_V_0_payload_A;
        end if; 
    end process;

    inStream_V_id_V_0_load_A <= (inStream_V_id_V_0_state_cmp_full and not(inStream_V_id_V_0_sel_wr));
    inStream_V_id_V_0_load_B <= (inStream_V_id_V_0_state_cmp_full and inStream_V_id_V_0_sel_wr);
    inStream_V_id_V_0_sel <= inStream_V_id_V_0_sel_rd;
    inStream_V_id_V_0_state_cmp_full <= '0' when (inStream_V_id_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_id_V_0_vld_in <= inStream_TVALID;
    inStream_V_id_V_0_vld_out <= inStream_V_id_V_0_state(0);
    inStream_V_keep_V_0_ack_in <= inStream_V_keep_V_0_state(1);

    inStream_V_keep_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_predicate_op320_read_state11, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op320_read_state11 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            inStream_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_keep_V_0_data_out_assign_proc : process(inStream_V_keep_V_0_payload_A, inStream_V_keep_V_0_payload_B, inStream_V_keep_V_0_sel)
    begin
        if ((inStream_V_keep_V_0_sel = ap_const_logic_1)) then 
            inStream_V_keep_V_0_data_out <= inStream_V_keep_V_0_payload_B;
        else 
            inStream_V_keep_V_0_data_out <= inStream_V_keep_V_0_payload_A;
        end if; 
    end process;

    inStream_V_keep_V_0_load_A <= (inStream_V_keep_V_0_state_cmp_full and not(inStream_V_keep_V_0_sel_wr));
    inStream_V_keep_V_0_load_B <= (inStream_V_keep_V_0_state_cmp_full and inStream_V_keep_V_0_sel_wr);
    inStream_V_keep_V_0_sel <= inStream_V_keep_V_0_sel_rd;
    inStream_V_keep_V_0_state_cmp_full <= '0' when (inStream_V_keep_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_keep_V_0_vld_in <= inStream_TVALID;
    inStream_V_keep_V_0_vld_out <= inStream_V_keep_V_0_state(0);
    inStream_V_strb_V_0_ack_in <= inStream_V_strb_V_0_state(1);

    inStream_V_strb_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_predicate_op320_read_state11, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op320_read_state11 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            inStream_V_strb_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_strb_V_0_data_out_assign_proc : process(inStream_V_strb_V_0_payload_A, inStream_V_strb_V_0_payload_B, inStream_V_strb_V_0_sel)
    begin
        if ((inStream_V_strb_V_0_sel = ap_const_logic_1)) then 
            inStream_V_strb_V_0_data_out <= inStream_V_strb_V_0_payload_B;
        else 
            inStream_V_strb_V_0_data_out <= inStream_V_strb_V_0_payload_A;
        end if; 
    end process;

    inStream_V_strb_V_0_load_A <= (inStream_V_strb_V_0_state_cmp_full and not(inStream_V_strb_V_0_sel_wr));
    inStream_V_strb_V_0_load_B <= (inStream_V_strb_V_0_state_cmp_full and inStream_V_strb_V_0_sel_wr);
    inStream_V_strb_V_0_sel <= inStream_V_strb_V_0_sel_rd;
    inStream_V_strb_V_0_state_cmp_full <= '0' when (inStream_V_strb_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_strb_V_0_vld_in <= inStream_TVALID;
    inStream_V_strb_V_0_vld_out <= inStream_V_strb_V_0_state(0);
    inStream_V_user_V_0_ack_in <= inStream_V_user_V_0_state(1);

    inStream_V_user_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_predicate_op320_read_state11, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op320_read_state11 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            inStream_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_user_V_0_data_out_assign_proc : process(inStream_V_user_V_0_payload_A, inStream_V_user_V_0_payload_B, inStream_V_user_V_0_sel)
    begin
        if ((inStream_V_user_V_0_sel = ap_const_logic_1)) then 
            inStream_V_user_V_0_data_out <= inStream_V_user_V_0_payload_B;
        else 
            inStream_V_user_V_0_data_out <= inStream_V_user_V_0_payload_A;
        end if; 
    end process;

    inStream_V_user_V_0_load_A <= (inStream_V_user_V_0_state_cmp_full and not(inStream_V_user_V_0_sel_wr));
    inStream_V_user_V_0_load_B <= (inStream_V_user_V_0_state_cmp_full and inStream_V_user_V_0_sel_wr);
    inStream_V_user_V_0_sel <= inStream_V_user_V_0_sel_rd;
    inStream_V_user_V_0_state_cmp_full <= '0' when (inStream_V_user_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_user_V_0_vld_in <= inStream_TVALID;
    inStream_V_user_V_0_vld_out <= inStream_V_user_V_0_state(0);
    input_ch_idx_fu_1536_p2 <= std_logic_vector(unsigned(select_ln1598_30_fu_1518_p3) + unsigned(ap_const_lv4_1));

    line_buff_group_0_va_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, sext_ln203_fu_1882_p1, line_buff_group_0_va_5_reg_2731, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                line_buff_group_0_va_1_address0 <= line_buff_group_0_va_5_reg_2731;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                line_buff_group_0_va_1_address0 <= sext_ln203_fu_1882_p1(12 - 1 downto 0);
            else 
                line_buff_group_0_va_1_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            line_buff_group_0_va_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_0_va_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, line_buff_group_0_va_6_reg_2774, line_buff_group_0_va_7_reg_2779_pp0_iter3_reg, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                line_buff_group_0_va_1_address1 <= line_buff_group_0_va_7_reg_2779_pp0_iter3_reg;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                line_buff_group_0_va_1_address1 <= line_buff_group_0_va_6_reg_2774;
            else 
                line_buff_group_0_va_1_address1 <= "XXXXXXXXXXXX";
            end if;
        else 
            line_buff_group_0_va_1_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_0_va_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            line_buff_group_0_va_1_ce0 <= ap_const_logic_1;
        else 
            line_buff_group_0_va_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_0_va_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            line_buff_group_0_va_1_ce1 <= ap_const_logic_1;
        else 
            line_buff_group_0_va_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_0_va_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buff_group_0_va_1_we0 <= ap_const_logic_1;
        else 
            line_buff_group_0_va_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_0_va_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage0, sext_ln203_reg_2723, ap_block_pp0_stage0, sext_ln140_fu_2002_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            line_buff_group_0_va_address0 <= sext_ln140_fu_2002_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buff_group_0_va_address0 <= sext_ln203_reg_2723(12 - 1 downto 0);
        else 
            line_buff_group_0_va_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_0_va_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, sext_ln140_1_fu_2019_p1, sext_ln140_2_fu_2110_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            line_buff_group_0_va_address1 <= sext_ln140_2_fu_2110_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            line_buff_group_0_va_address1 <= sext_ln140_1_fu_2019_p1(12 - 1 downto 0);
        else 
            line_buff_group_0_va_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_0_va_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            line_buff_group_0_va_ce0 <= ap_const_logic_1;
        else 
            line_buff_group_0_va_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_0_va_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            line_buff_group_0_va_ce1 <= ap_const_logic_1;
        else 
            line_buff_group_0_va_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_0_va_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buff_group_0_va_we0 <= ap_const_logic_1;
        else 
            line_buff_group_0_va_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_1_va_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, sext_ln203_fu_1882_p1, line_buff_group_1_va_5_reg_2736, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                line_buff_group_1_va_1_address0 <= line_buff_group_1_va_5_reg_2736;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                line_buff_group_1_va_1_address0 <= sext_ln203_fu_1882_p1(12 - 1 downto 0);
            else 
                line_buff_group_1_va_1_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            line_buff_group_1_va_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_1_va_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, line_buff_group_1_va_6_reg_2794, line_buff_group_1_va_7_reg_2799_pp0_iter3_reg, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                line_buff_group_1_va_1_address1 <= line_buff_group_1_va_7_reg_2799_pp0_iter3_reg;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                line_buff_group_1_va_1_address1 <= line_buff_group_1_va_6_reg_2794;
            else 
                line_buff_group_1_va_1_address1 <= "XXXXXXXXXXXX";
            end if;
        else 
            line_buff_group_1_va_1_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_1_va_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            line_buff_group_1_va_1_ce0 <= ap_const_logic_1;
        else 
            line_buff_group_1_va_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_1_va_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            line_buff_group_1_va_1_ce1 <= ap_const_logic_1;
        else 
            line_buff_group_1_va_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_1_va_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buff_group_1_va_1_we0 <= ap_const_logic_1;
        else 
            line_buff_group_1_va_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_1_va_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage0, sext_ln203_reg_2723, ap_block_pp0_stage0, sext_ln140_fu_2002_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            line_buff_group_1_va_address0 <= sext_ln140_fu_2002_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buff_group_1_va_address0 <= sext_ln203_reg_2723(12 - 1 downto 0);
        else 
            line_buff_group_1_va_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_1_va_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, sext_ln140_1_fu_2019_p1, sext_ln140_3_fu_2114_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            line_buff_group_1_va_address1 <= sext_ln140_3_fu_2114_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            line_buff_group_1_va_address1 <= sext_ln140_1_fu_2019_p1(12 - 1 downto 0);
        else 
            line_buff_group_1_va_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_1_va_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            line_buff_group_1_va_ce0 <= ap_const_logic_1;
        else 
            line_buff_group_1_va_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_1_va_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            line_buff_group_1_va_ce1 <= ap_const_logic_1;
        else 
            line_buff_group_1_va_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_1_va_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buff_group_1_va_we0 <= ap_const_logic_1;
        else 
            line_buff_group_1_va_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_2_va_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, sext_ln203_fu_1882_p1, line_buff_group_2_va_5_reg_2741, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                line_buff_group_2_va_1_address0 <= line_buff_group_2_va_5_reg_2741;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                line_buff_group_2_va_1_address0 <= sext_ln203_fu_1882_p1(12 - 1 downto 0);
            else 
                line_buff_group_2_va_1_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            line_buff_group_2_va_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_2_va_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, line_buff_group_2_va_6_reg_2814, line_buff_group_2_va_7_reg_2819_pp0_iter3_reg, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                line_buff_group_2_va_1_address1 <= line_buff_group_2_va_7_reg_2819_pp0_iter3_reg;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                line_buff_group_2_va_1_address1 <= line_buff_group_2_va_6_reg_2814;
            else 
                line_buff_group_2_va_1_address1 <= "XXXXXXXXXXXX";
            end if;
        else 
            line_buff_group_2_va_1_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_2_va_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            line_buff_group_2_va_1_ce0 <= ap_const_logic_1;
        else 
            line_buff_group_2_va_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_2_va_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            line_buff_group_2_va_1_ce1 <= ap_const_logic_1;
        else 
            line_buff_group_2_va_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_2_va_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buff_group_2_va_1_we0 <= ap_const_logic_1;
        else 
            line_buff_group_2_va_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_2_va_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage0, sext_ln203_reg_2723, ap_block_pp0_stage0, sext_ln140_fu_2002_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            line_buff_group_2_va_address0 <= sext_ln140_fu_2002_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buff_group_2_va_address0 <= sext_ln203_reg_2723(12 - 1 downto 0);
        else 
            line_buff_group_2_va_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_2_va_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, sext_ln140_1_fu_2019_p1, sext_ln140_4_fu_2118_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            line_buff_group_2_va_address1 <= sext_ln140_4_fu_2118_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            line_buff_group_2_va_address1 <= sext_ln140_1_fu_2019_p1(12 - 1 downto 0);
        else 
            line_buff_group_2_va_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_2_va_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            line_buff_group_2_va_ce0 <= ap_const_logic_1;
        else 
            line_buff_group_2_va_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_2_va_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            line_buff_group_2_va_ce1 <= ap_const_logic_1;
        else 
            line_buff_group_2_va_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_2_va_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buff_group_2_va_we0 <= ap_const_logic_1;
        else 
            line_buff_group_2_va_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_3_va_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, sext_ln203_fu_1882_p1, line_buff_group_3_va_5_reg_2746, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                line_buff_group_3_va_1_address0 <= line_buff_group_3_va_5_reg_2746;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                line_buff_group_3_va_1_address0 <= sext_ln203_fu_1882_p1(12 - 1 downto 0);
            else 
                line_buff_group_3_va_1_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            line_buff_group_3_va_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_3_va_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, line_buff_group_3_va_6_reg_2834, line_buff_group_3_va_7_reg_2839_pp0_iter3_reg, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                line_buff_group_3_va_1_address1 <= line_buff_group_3_va_7_reg_2839_pp0_iter3_reg;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                line_buff_group_3_va_1_address1 <= line_buff_group_3_va_6_reg_2834;
            else 
                line_buff_group_3_va_1_address1 <= "XXXXXXXXXXXX";
            end if;
        else 
            line_buff_group_3_va_1_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_3_va_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            line_buff_group_3_va_1_ce0 <= ap_const_logic_1;
        else 
            line_buff_group_3_va_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_3_va_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            line_buff_group_3_va_1_ce1 <= ap_const_logic_1;
        else 
            line_buff_group_3_va_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_3_va_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buff_group_3_va_1_we0 <= ap_const_logic_1;
        else 
            line_buff_group_3_va_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_3_va_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage0, sext_ln203_reg_2723, ap_block_pp0_stage0, sext_ln140_fu_2002_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            line_buff_group_3_va_address0 <= sext_ln140_fu_2002_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buff_group_3_va_address0 <= sext_ln203_reg_2723(12 - 1 downto 0);
        else 
            line_buff_group_3_va_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_3_va_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, sext_ln140_1_fu_2019_p1, sext_ln140_5_fu_2122_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            line_buff_group_3_va_address1 <= sext_ln140_5_fu_2122_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            line_buff_group_3_va_address1 <= sext_ln140_1_fu_2019_p1(12 - 1 downto 0);
        else 
            line_buff_group_3_va_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buff_group_3_va_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            line_buff_group_3_va_ce0 <= ap_const_logic_1;
        else 
            line_buff_group_3_va_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_3_va_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            line_buff_group_3_va_ce1 <= ap_const_logic_1;
        else 
            line_buff_group_3_va_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_group_3_va_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buff_group_3_va_we0 <= ap_const_logic_1;
        else 
            line_buff_group_3_va_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln203_fu_1530_p0 <= mul_ln203_fu_1530_p00(4 - 1 downto 0);
    mul_ln203_fu_1530_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1598_30_fu_1518_p3),13));
    mul_ln203_fu_1530_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln203_fu_1530_p0) * unsigned(ap_const_lv13_1A2), 13));
    mul_ln44_1_fu_1069_p0 <= p_cast60_reg_2372(2 - 1 downto 0);
    mul_ln44_1_fu_1069_p1 <= mul_ln44_1_fu_1069_p10(9 - 1 downto 0);
    mul_ln44_1_fu_1069_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_row_fu_1050_p2),11));
    mul_ln44_1_fu_1069_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln44_1_fu_1069_p0) * unsigned(mul_ln44_1_fu_1069_p1), 11));
    mul_ln44_fu_1026_p0 <= p_cast60_reg_2372(2 - 1 downto 0);
    mul_ln44_fu_1026_p1 <= mul_ln44_fu_1026_p10(9 - 1 downto 0);
    mul_ln44_fu_1026_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_op_assign_phi_fu_640_p4),11));
    mul_ln44_fu_1026_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln44_fu_1026_p0) * unsigned(mul_ln44_fu_1026_p1), 11));
    mul_ln45_1_fu_1467_p0 <= p_cast60_reg_2372(2 - 1 downto 0);
    mul_ln45_1_fu_1467_p1 <= mul_ln45_1_fu_1467_p10(9 - 1 downto 0);
    mul_ln45_1_fu_1467_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_col_fu_1435_p2),11));
    mul_ln45_1_fu_1467_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln45_1_fu_1467_p0) * unsigned(mul_ln45_1_fu_1467_p1), 11));
    mul_ln45_fu_1040_p0 <= p_cast60_reg_2372(2 - 1 downto 0);
    mul_ln45_fu_1040_p1 <= mul_ln45_fu_1040_p10(9 - 1 downto 0);
    mul_ln45_fu_1040_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_op_assign_2_phi_fu_676_p4),11));
    mul_ln45_fu_1040_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln45_fu_1040_p0) * unsigned(mul_ln45_fu_1040_p1), 11));
    or_ln1598_1_fu_1336_p2 <= (select_ln1598_10_reg_2518 or icmp_ln30_reg_2478);
    or_ln1598_2_fu_1599_p2 <= (select_ln1598_10_reg_2518 or or_ln1598_fu_1583_p2);
    or_ln1598_3_fu_1441_p2 <= (select_ln1598_21_fu_1429_p3 or select_ln1598_10_reg_2518);
    or_ln1598_4_fu_1446_p2 <= (or_ln1598_3_fu_1441_p2 or icmp_ln30_reg_2478);
    or_ln1598_5_fu_1506_p2 <= (select_ln1598_29_fu_1485_p3 or select_ln1598_21_fu_1429_p3);
    or_ln1598_6_fu_1512_p2 <= (or_ln1598_5_fu_1506_p2 or or_ln1598_1_fu_1336_p2);
    or_ln1598_fu_1583_p2 <= (or_ln77_1_reg_2543 or icmp_ln30_reg_2478);
    or_ln55_1_fu_1302_p2 <= (xor_ln55_2_fu_1277_p2 or icmp_ln55_reg_2433);
    or_ln55_2_fu_1411_p2 <= (xor_ln55_3_fu_1380_p2 or icmp_ln55_reg_2433);
    or_ln55_3_fu_1664_p2 <= (xor_ln55_4_fu_1658_p2 or select_ln1598_13_reg_2587);
    or_ln55_4_fu_1782_p2 <= (xor_ln55_5_fu_1776_p2 or select_ln1598_13_reg_2587);
    or_ln55_fu_1203_p2 <= (xor_ln55_fu_1133_p2 or xor_ln55_1_fu_1197_p2);
    or_ln77_1_fu_1227_p2 <= (or_ln77_fu_1221_p2 or icmp_ln77_1_fu_1215_p2);
    or_ln77_2_fu_1687_p2 <= (xor_ln77_1_fu_1675_p2 or select_ln1598_14_reg_2593);
    or_ln77_3_fu_1692_p2 <= (or_ln77_2_fu_1687_p2 or icmp_ln77_4_fu_1681_p2);
    or_ln77_4_fu_1805_p2 <= (xor_ln77_2_fu_1794_p2 or select_ln1598_14_reg_2593);
    or_ln77_5_fu_1810_p2 <= (or_ln77_4_fu_1805_p2 or icmp_ln77_5_fu_1800_p2);
    or_ln77_fu_1221_p2 <= (xor_ln77_fu_1209_p2 or icmp_ln77_fu_1139_p2);
    outStream_TDATA <= outStream_V_data_1_data_out;

    outStream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, call_ln112_write_output_fu_778_outStream_TDATA_blk_n, ap_enable_reg_pp0_iter4, select_ln1598_33_reg_2700_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (select_ln1598_33_reg_2700_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            outStream_TDATA_blk_n <= call_ln112_write_output_fu_778_outStream_TDATA_blk_n;
        else 
            outStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_TDEST <= outStream_V_dest_V_1_data_out;
    outStream_TID <= outStream_V_id_V_1_data_out;
    outStream_TKEEP <= outStream_V_keep_V_1_data_out;
    outStream_TLAST <= outStream_V_last_V_1_data_out;
    outStream_TSTRB <= outStream_V_strb_V_1_data_out;
    outStream_TUSER <= outStream_V_user_V_1_data_out;
    outStream_TVALID <= outStream_V_dest_V_1_state(0);
    outStream_V_data_1_ack_in <= outStream_V_data_1_state(1);
    outStream_V_data_1_ack_out <= outStream_TREADY;

    outStream_V_data_1_data_out_assign_proc : process(outStream_V_data_1_payload_A, outStream_V_data_1_payload_B, outStream_V_data_1_sel)
    begin
        if ((outStream_V_data_1_sel = ap_const_logic_1)) then 
            outStream_V_data_1_data_out <= outStream_V_data_1_payload_B;
        else 
            outStream_V_data_1_data_out <= outStream_V_data_1_payload_A;
        end if; 
    end process;

    outStream_V_data_1_load_A <= (outStream_V_data_1_state_cmp_full and not(outStream_V_data_1_sel_wr));
    outStream_V_data_1_load_B <= (outStream_V_data_1_state_cmp_full and outStream_V_data_1_sel_wr);
    outStream_V_data_1_sel <= outStream_V_data_1_sel_rd;
    outStream_V_data_1_state_cmp_full <= '0' when (outStream_V_data_1_state = ap_const_lv2_1) else '1';
    outStream_V_data_1_vld_in <= call_ln112_write_output_fu_778_outStream_TVALID;
    outStream_V_data_1_vld_out <= outStream_V_data_1_state(0);
    outStream_V_dest_V_1_ack_in <= outStream_V_dest_V_1_state(1);
    outStream_V_dest_V_1_ack_out <= outStream_TREADY;

    outStream_V_dest_V_1_data_out_assign_proc : process(outStream_V_dest_V_1_payload_A, outStream_V_dest_V_1_payload_B, outStream_V_dest_V_1_sel)
    begin
        if ((outStream_V_dest_V_1_sel = ap_const_logic_1)) then 
            outStream_V_dest_V_1_data_out <= outStream_V_dest_V_1_payload_B;
        else 
            outStream_V_dest_V_1_data_out <= outStream_V_dest_V_1_payload_A;
        end if; 
    end process;

    outStream_V_dest_V_1_load_A <= (outStream_V_dest_V_1_state_cmp_full and not(outStream_V_dest_V_1_sel_wr));
    outStream_V_dest_V_1_load_B <= (outStream_V_dest_V_1_state_cmp_full and outStream_V_dest_V_1_sel_wr);
    outStream_V_dest_V_1_sel <= outStream_V_dest_V_1_sel_rd;
    outStream_V_dest_V_1_state_cmp_full <= '0' when (outStream_V_dest_V_1_state = ap_const_lv2_1) else '1';
    outStream_V_dest_V_1_vld_in <= call_ln112_write_output_fu_778_outStream_TVALID;
    outStream_V_dest_V_1_vld_out <= outStream_V_dest_V_1_state(0);
    outStream_V_id_V_1_ack_in <= outStream_V_id_V_1_state(1);
    outStream_V_id_V_1_ack_out <= outStream_TREADY;

    outStream_V_id_V_1_data_out_assign_proc : process(outStream_V_id_V_1_payload_A, outStream_V_id_V_1_payload_B, outStream_V_id_V_1_sel)
    begin
        if ((outStream_V_id_V_1_sel = ap_const_logic_1)) then 
            outStream_V_id_V_1_data_out <= outStream_V_id_V_1_payload_B;
        else 
            outStream_V_id_V_1_data_out <= outStream_V_id_V_1_payload_A;
        end if; 
    end process;

    outStream_V_id_V_1_load_A <= (outStream_V_id_V_1_state_cmp_full and not(outStream_V_id_V_1_sel_wr));
    outStream_V_id_V_1_load_B <= (outStream_V_id_V_1_state_cmp_full and outStream_V_id_V_1_sel_wr);
    outStream_V_id_V_1_sel <= outStream_V_id_V_1_sel_rd;
    outStream_V_id_V_1_state_cmp_full <= '0' when (outStream_V_id_V_1_state = ap_const_lv2_1) else '1';
    outStream_V_id_V_1_vld_in <= call_ln112_write_output_fu_778_outStream_TVALID;
    outStream_V_id_V_1_vld_out <= outStream_V_id_V_1_state(0);
    outStream_V_keep_V_1_ack_in <= outStream_V_keep_V_1_state(1);
    outStream_V_keep_V_1_ack_out <= outStream_TREADY;

    outStream_V_keep_V_1_data_out_assign_proc : process(outStream_V_keep_V_1_payload_A, outStream_V_keep_V_1_payload_B, outStream_V_keep_V_1_sel)
    begin
        if ((outStream_V_keep_V_1_sel = ap_const_logic_1)) then 
            outStream_V_keep_V_1_data_out <= outStream_V_keep_V_1_payload_B;
        else 
            outStream_V_keep_V_1_data_out <= outStream_V_keep_V_1_payload_A;
        end if; 
    end process;

    outStream_V_keep_V_1_load_A <= (outStream_V_keep_V_1_state_cmp_full and not(outStream_V_keep_V_1_sel_wr));
    outStream_V_keep_V_1_load_B <= (outStream_V_keep_V_1_state_cmp_full and outStream_V_keep_V_1_sel_wr);
    outStream_V_keep_V_1_sel <= outStream_V_keep_V_1_sel_rd;
    outStream_V_keep_V_1_state_cmp_full <= '0' when (outStream_V_keep_V_1_state = ap_const_lv2_1) else '1';
    outStream_V_keep_V_1_vld_in <= call_ln112_write_output_fu_778_outStream_TVALID;
    outStream_V_keep_V_1_vld_out <= outStream_V_keep_V_1_state(0);
    outStream_V_last_V_1_ack_in <= outStream_V_last_V_1_state(1);
    outStream_V_last_V_1_ack_out <= outStream_TREADY;

    outStream_V_last_V_1_data_out_assign_proc : process(outStream_V_last_V_1_payload_A, outStream_V_last_V_1_payload_B, outStream_V_last_V_1_sel)
    begin
        if ((outStream_V_last_V_1_sel = ap_const_logic_1)) then 
            outStream_V_last_V_1_data_out <= outStream_V_last_V_1_payload_B;
        else 
            outStream_V_last_V_1_data_out <= outStream_V_last_V_1_payload_A;
        end if; 
    end process;

    outStream_V_last_V_1_load_A <= (outStream_V_last_V_1_state_cmp_full and not(outStream_V_last_V_1_sel_wr));
    outStream_V_last_V_1_load_B <= (outStream_V_last_V_1_state_cmp_full and outStream_V_last_V_1_sel_wr);
    outStream_V_last_V_1_sel <= outStream_V_last_V_1_sel_rd;
    outStream_V_last_V_1_state_cmp_full <= '0' when (outStream_V_last_V_1_state = ap_const_lv2_1) else '1';
    outStream_V_last_V_1_vld_in <= call_ln112_write_output_fu_778_outStream_TVALID;
    outStream_V_last_V_1_vld_out <= outStream_V_last_V_1_state(0);
    outStream_V_strb_V_1_ack_in <= outStream_V_strb_V_1_state(1);
    outStream_V_strb_V_1_ack_out <= outStream_TREADY;

    outStream_V_strb_V_1_data_out_assign_proc : process(outStream_V_strb_V_1_payload_A, outStream_V_strb_V_1_payload_B, outStream_V_strb_V_1_sel)
    begin
        if ((outStream_V_strb_V_1_sel = ap_const_logic_1)) then 
            outStream_V_strb_V_1_data_out <= outStream_V_strb_V_1_payload_B;
        else 
            outStream_V_strb_V_1_data_out <= outStream_V_strb_V_1_payload_A;
        end if; 
    end process;

    outStream_V_strb_V_1_load_A <= (outStream_V_strb_V_1_state_cmp_full and not(outStream_V_strb_V_1_sel_wr));
    outStream_V_strb_V_1_load_B <= (outStream_V_strb_V_1_state_cmp_full and outStream_V_strb_V_1_sel_wr);
    outStream_V_strb_V_1_sel <= outStream_V_strb_V_1_sel_rd;
    outStream_V_strb_V_1_state_cmp_full <= '0' when (outStream_V_strb_V_1_state = ap_const_lv2_1) else '1';
    outStream_V_strb_V_1_vld_in <= call_ln112_write_output_fu_778_outStream_TVALID;
    outStream_V_strb_V_1_vld_out <= outStream_V_strb_V_1_state(0);
    outStream_V_user_V_1_ack_in <= outStream_V_user_V_1_state(1);
    outStream_V_user_V_1_ack_out <= outStream_TREADY;

    outStream_V_user_V_1_data_out_assign_proc : process(outStream_V_user_V_1_payload_A, outStream_V_user_V_1_payload_B, outStream_V_user_V_1_sel)
    begin
        if ((outStream_V_user_V_1_sel = ap_const_logic_1)) then 
            outStream_V_user_V_1_data_out <= outStream_V_user_V_1_payload_B;
        else 
            outStream_V_user_V_1_data_out <= outStream_V_user_V_1_payload_A;
        end if; 
    end process;

    outStream_V_user_V_1_load_A <= (outStream_V_user_V_1_state_cmp_full and not(outStream_V_user_V_1_sel_wr));
    outStream_V_user_V_1_load_B <= (outStream_V_user_V_1_state_cmp_full and outStream_V_user_V_1_sel_wr);
    outStream_V_user_V_1_sel <= outStream_V_user_V_1_sel_rd;
    outStream_V_user_V_1_state_cmp_full <= '0' when (outStream_V_user_V_1_state = ap_const_lv2_1) else '1';
    outStream_V_user_V_1_vld_in <= call_ln112_write_output_fu_778_outStream_TVALID;
    outStream_V_user_V_1_vld_out <= outStream_V_user_V_1_state(0);
    out_col_fu_1435_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(select_ln1598_11_fu_1340_p3));
    out_row_fu_1050_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(ap_phi_mux_i_op_assign_phi_fu_640_p4));
    p_cast60_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stride_V_read_reg_2232),11));
    ret_V_1_fu_974_p2 <= std_logic_vector(unsigned(zext_ln1354_3_fu_971_p1) + unsigned(ap_const_lv5_1F));
    ret_V_fu_956_p2 <= std_logic_vector(unsigned(zext_ln1354_1_fu_953_p1) + unsigned(ap_const_lv10_3FF));
    row_idx_fu_1117_p2 <= std_logic_vector(unsigned(zext_ln1598_1_fu_1109_p1) + unsigned(mul_ln44_reg_2457));
    row_stride_fu_1330_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln1598_fu_1249_p3));
    select_ln156_10_fu_2206_p3 <= 
        window_3_val_1_V_0_reg_2927 when (icmp_ln1494_10_fu_2201_p2(0) = '1') else 
        reg_821;
    select_ln156_1_fu_2131_p3 <= 
        window_0_val_1_V_0_reg_2909 when (icmp_ln1494_1_fu_2126_p2(0) = '1') else 
        reg_806;
    select_ln156_3_fu_2067_p3 <= 
        zext_ln1598_9_reg_2756 when (icmp_ln1494_3_fu_2062_p2(0) = '1') else 
        select_ln1598_36_reg_2704_pp0_iter2_reg;
    select_ln156_4_fu_2156_p3 <= 
        window_1_val_1_V_0_reg_2915 when (icmp_ln1494_4_fu_2151_p2(0) = '1') else 
        reg_811;
    select_ln156_6_fu_2083_p3 <= 
        zext_ln1598_9_reg_2756 when (icmp_ln1494_6_fu_2078_p2(0) = '1') else 
        select_ln1598_36_reg_2704_pp0_iter2_reg;
    select_ln156_7_fu_2181_p3 <= 
        window_2_val_1_V_0_reg_2921 when (icmp_ln1494_7_fu_2176_p2(0) = '1') else 
        reg_816;
    select_ln156_9_fu_2099_p3 <= 
        zext_ln1598_9_reg_2756 when (icmp_ln1494_9_fu_2094_p2(0) = '1') else 
        select_ln1598_36_reg_2704_pp0_iter2_reg;
    select_ln156_fu_2051_p3 <= 
        zext_ln1598_9_reg_2756 when (icmp_ln1494_fu_2046_p2(0) = '1') else 
        select_ln1598_36_reg_2704_pp0_iter2_reg;
    select_ln1598_10_fu_1102_p3 <= 
        icmp_ln33_reg_2452 when (icmp_ln30_fu_1056_p2(0) = '1') else 
        icmp_ln33_1_fu_1097_p2;
    select_ln1598_11_fu_1340_p3 <= 
        ap_const_lv9_0 when (or_ln1598_1_fu_1336_p2(0) = '1') else 
        i_op_assign_2_reg_672;
    select_ln1598_12_fu_1368_p3 <= 
        icmp_ln48_3_fu_1362_p2 when (select_ln1598_10_reg_2518(0) = '1') else 
        select_ln1598_3_fu_1266_p3;
    select_ln1598_13_fu_1386_p3 <= 
        xor_ln55_3_fu_1380_p2 when (select_ln1598_10_reg_2518(0) = '1') else 
        select_ln1598_4_fu_1283_p3;
    select_ln1598_14_fu_1398_p3 <= 
        icmp_ln77_3_fu_1393_p2 when (select_ln1598_10_reg_2518(0) = '1') else 
        select_ln1598_5_fu_1290_p3;
    select_ln1598_15_fu_1587_p3 <= 
        ap_const_lv11_0 when (or_ln1598_1_reg_2573(0) = '1') else 
        mul_ln45_reg_2463;
    select_ln1598_16_fu_1405_p3 <= 
        icmp_ln101_2_reg_2427 when (select_ln1598_10_reg_2518(0) = '1') else 
        select_ln1598_6_fu_1296_p3;
    select_ln1598_17_fu_1593_p3 <= 
        ap_const_lv11_0 when (or_ln1598_1_reg_2573(0) = '1') else 
        col_idx_reg_2533;
    select_ln1598_18_fu_1416_p3 <= 
        or_ln55_2_fu_1411_p2 when (select_ln1598_10_reg_2518(0) = '1') else 
        select_ln1598_7_fu_1307_p3;
    select_ln1598_19_fu_1604_p3 <= 
        ap_const_lv11_1 when (or_ln1598_1_reg_2573(0) = '1') else 
        add_ln36_reg_2548;
    select_ln1598_1_fu_1256_p3 <= 
        mul_ln44_1_reg_2496 when (icmp_ln30_reg_2478(0) = '1') else 
        mul_ln44_reg_2457;
    select_ln1598_20_fu_1423_p3 <= 
        icmp_ln39_reg_2439 when (select_ln1598_10_reg_2518(0) = '1') else 
        select_ln1598_8_fu_1314_p3;
    select_ln1598_21_fu_1429_p3 <= 
        icmp_ln36_reg_2446 when (select_ln1598_10_reg_2518(0) = '1') else 
        select_ln1598_9_fu_1319_p3;
    select_ln1598_22_fu_1451_p3 <= 
        ap_const_lv2_0 when (or_ln1598_4_fu_1446_p2(0) = '1') else 
        ap_phi_mux_i_op_assign_3_phi_fu_723_p4;
    select_ln1598_23_fu_1615_p3 <= 
        mul_ln45_1_reg_2619 when (select_ln1598_21_reg_2604(0) = '1') else 
        select_ln1598_15_fu_1587_p3;
    select_ln1598_24_fu_1477_p3 <= 
        icmp_ln101_4_fu_1472_p2 when (select_ln1598_21_fu_1429_p3(0) = '1') else 
        select_ln1598_16_fu_1405_p3;
    select_ln1598_25_fu_1648_p3 <= 
        mul_ln45_1_reg_2619 when (select_ln1598_21_reg_2604(0) = '1') else 
        select_ln1598_17_fu_1593_p3;
    select_ln1598_26_fu_1669_p3 <= 
        or_ln55_3_fu_1664_p2 when (select_ln1598_21_reg_2604(0) = '1') else 
        select_ln1598_18_reg_2599;
    select_ln1598_27_fu_1698_p3 <= 
        or_ln77_3_fu_1692_p2 when (select_ln1598_21_reg_2604(0) = '1') else 
        or_ln1598_2_fu_1599_p2;
    select_ln1598_28_fu_1715_p3 <= 
        add_ln1598_fu_1709_p2 when (select_ln1598_21_reg_2604(0) = '1') else 
        select_ln1598_19_fu_1604_p3;
    select_ln1598_29_fu_1485_p3 <= 
        icmp_ln39_reg_2439 when (select_ln1598_21_fu_1429_p3(0) = '1') else 
        select_ln1598_20_fu_1423_p3;
    select_ln1598_2_fu_1079_p3 <= 
        icmp_ln101_3_fu_1074_p2 when (icmp_ln30_fu_1056_p2(0) = '1') else 
        icmp_ln101_fu_1031_p2;
    select_ln1598_30_fu_1518_p3 <= 
        ap_const_lv4_0 when (or_ln1598_6_fu_1512_p2(0) = '1') else 
        i_op_assign_4_reg_696;
    select_ln1598_31_fu_1760_p3 <= 
        add_ln45_1_fu_1725_p2 when (select_ln1598_29_reg_2633(0) = '1') else 
        select_ln1598_25_fu_1648_p3;
    select_ln1598_32_fu_1787_p3 <= 
        or_ln55_4_fu_1782_p2 when (select_ln1598_29_reg_2633(0) = '1') else 
        select_ln1598_26_fu_1669_p3;
    select_ln1598_33_fu_1816_p3 <= 
        or_ln77_5_fu_1810_p2 when (select_ln1598_29_reg_2633(0) = '1') else 
        select_ln1598_27_fu_1698_p3;
    select_ln1598_34_fu_1834_p3 <= 
        ap_const_lv13_0 when (or_ln1598_1_reg_2573(0) = '1') else 
        sext_ln1598_2_fu_1831_p1;
    select_ln1598_35_fu_1841_p3 <= 
        sext_ln1598_1_fu_1827_p1 when (select_ln1598_21_reg_2604(0) = '1') else 
        select_ln1598_34_fu_1834_p3;
    select_ln1598_36_fu_1848_p3 <= 
        sext_ln1598_fu_1823_p1 when (select_ln1598_29_reg_2633(0) = '1') else 
        select_ln1598_35_fu_1841_p3;
    select_ln1598_37_fu_1865_p3 <= 
        add_ln1598_1_fu_1859_p2 when (select_ln1598_29_reg_2633(0) = '1') else 
        select_ln1598_28_fu_1715_p3;
    select_ln1598_3_fu_1266_p3 <= 
        icmp_ln48_2_fu_1261_p2 when (icmp_ln30_reg_2478(0) = '1') else 
        icmp_ln48_fu_1122_p2;
    select_ln1598_4_fu_1283_p3 <= 
        xor_ln55_2_fu_1277_p2 when (icmp_ln30_reg_2478(0) = '1') else 
        xor_ln55_fu_1133_p2;
    select_ln1598_5_fu_1290_p3 <= 
        icmp_ln77_2_reg_2422 when (icmp_ln30_reg_2478(0) = '1') else 
        icmp_ln77_fu_1139_p2;
    select_ln1598_6_fu_1296_p3 <= 
        icmp_ln101_2_reg_2427 when (icmp_ln30_reg_2478(0) = '1') else 
        icmp_ln101_1_fu_1148_p2;
    select_ln1598_7_fu_1307_p3 <= 
        or_ln55_1_fu_1302_p2 when (icmp_ln30_reg_2478(0) = '1') else 
        or_ln55_fu_1203_p2;
    select_ln1598_8_fu_1314_p3 <= 
        icmp_ln39_reg_2439 when (icmp_ln30_reg_2478(0) = '1') else 
        icmp_ln39_1_reg_2508;
    select_ln1598_9_fu_1319_p3 <= 
        icmp_ln36_reg_2446 when (icmp_ln30_reg_2478(0) = '1') else 
        icmp_ln36_1_reg_2513;
    select_ln1598_fu_1249_p3 <= 
        ap_const_lv2_0 when (icmp_ln30_reg_2478(0) = '1') else 
        ap_phi_mux_i_op_assign_1_phi_fu_712_p4;
    select_ln27_fu_1324_p3 <= 
        out_row_reg_2473 when (icmp_ln30_reg_2478(0) = '1') else 
        i_op_assign_reg_636;
    select_ln30_1_fu_1576_p3 <= 
        ap_const_lv17_1 when (icmp_ln30_reg_2478(0) = '1') else 
        add_ln30_1_fu_1570_p2;
    select_ln30_fu_1610_p3 <= 
        row_stride_reg_2568 when (select_ln1598_10_reg_2518(0) = '1') else 
        select_ln1598_reg_2558;
    select_ln33_1_fu_1562_p3 <= 
        ap_const_lv15_1 when (or_ln1598_1_fu_1336_p2(0) = '1') else 
        add_ln33_1_fu_1556_p2;
    select_ln33_fu_1492_p3 <= 
        out_col_fu_1435_p2 when (select_ln1598_21_fu_1429_p3(0) = '1') else 
        select_ln1598_11_fu_1340_p3;
    select_ln36_1_fu_1548_p3 <= 
        ap_const_lv6_1 when (or_ln1598_4_fu_1446_p2(0) = '1') else 
        add_ln36_1_fu_1542_p2;
    select_ln36_fu_1872_p3 <= 
        col_stride_reg_2648 when (select_ln1598_29_reg_2633(0) = '1') else 
        select_ln1598_22_reg_2614;
    select_ln48_1_fu_1640_p3 <= 
        add_ln49_1_fu_1634_p2 when (and_ln48_1_fu_1629_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln48_2_fu_1752_p3 <= 
        add_ln49_2_fu_1746_p2 when (and_ln48_2_fu_1741_p2(0) = '1') else 
        ap_const_lv12_0;
        sext_ln140_1_fu_2019_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln140_1_fu_2014_p2),64));

        sext_ln140_2_fu_2110_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln140_2_reg_2889),64));

        sext_ln140_3_fu_2114_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln140_3_reg_2894),64));

        sext_ln140_4_fu_2118_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln140_4_reg_2899),64));

        sext_ln140_5_fu_2122_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln140_5_reg_2904),64));

        sext_ln140_fu_2002_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln140_fu_1998_p2),64));

        sext_ln1598_1_fu_1827_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln48_1_fu_1640_p3),13));

        sext_ln1598_2_fu_1831_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv_count_1_reg_2538),13));

        sext_ln1598_fu_1823_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln48_2_fu_1752_p3),13));

        sext_ln203_fu_1882_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln203_fu_1877_p2),64));

    trunc_ln140_1_fu_1705_p1 <= select_ln48_1_fu_1640_p3(11 - 1 downto 0);
    trunc_ln140_2_fu_1855_p1 <= select_ln48_2_fu_1752_p3(11 - 1 downto 0);
    trunc_ln140_fu_1233_p1 <= conv_count_1_fu_1184_p3(11 - 1 downto 0);
    xor_ln55_1_fu_1197_p2 <= (icmp_ln55_2_fu_1192_p2 xor ap_const_lv1_1);
    xor_ln55_2_fu_1277_p2 <= (icmp_ln55_3_fu_1273_p2 xor ap_const_lv1_1);
    xor_ln55_3_fu_1380_p2 <= (icmp_ln55_4_fu_1375_p2 xor ap_const_lv1_1);
    xor_ln55_4_fu_1658_p2 <= (icmp_ln55_5_fu_1654_p2 xor ap_const_lv1_1);
    xor_ln55_5_fu_1776_p2 <= (icmp_ln55_6_fu_1771_p2 xor ap_const_lv1_1);
    xor_ln55_fu_1133_p2 <= (icmp_ln55_1_fu_1128_p2 xor ap_const_lv1_1);
    xor_ln77_1_fu_1675_p2 <= (ap_const_lv1_1 xor and_ln48_1_fu_1629_p2);
    xor_ln77_2_fu_1794_p2 <= (ap_const_lv1_1 xor and_ln48_2_fu_1741_p2);
    xor_ln77_fu_1209_p2 <= (ap_const_lv1_1 xor and_ln48_fu_1172_p2);
    zext_ln1354_1_fu_953_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_h_V_read_reg_2265),10));
    zext_ln1354_2_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_w_V_read_reg_2259),10));
    zext_ln1354_3_fu_971_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_fold_ch_V_read_reg_2240),5));
    zext_ln1354_4_fu_941_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_w_V_read_reg_2248),11));
    zext_ln1354_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stride_V_read_reg_2232),3));
    zext_ln1598_1_fu_1109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_op_assign_1_phi_fu_712_p4),11));
    zext_ln1598_3_fu_1153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_op_assign_3_phi_fu_723_p4),11));
    zext_ln1598_5_fu_1348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_stride_fu_1330_p2),11));
    zext_ln1598_7_fu_1722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_stride_reg_2648),11));
    zext_ln1598_8_fu_1767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1598_31_fu_1760_p3),13));
    zext_ln1598_9_fu_1995_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1598_37_reg_2713),13));
    zext_ln215_fu_938_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_h_V_read_reg_2254),11));
    zext_ln44_1_fu_1113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_op_assign_1_phi_fu_712_p4),3));
    zext_ln44_2_fu_1065_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_row_fu_1050_p2),10));
    zext_ln44_3_fu_1352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_stride_fu_1330_p2),3));
    zext_ln44_fu_1022_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_op_assign_phi_fu_640_p4),10));
    zext_ln45_1_fu_1162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_idx_fu_1157_p2),12));
    zext_ln45_2_fu_1463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_col_fu_1435_p2),10));
    zext_ln45_3_fu_1621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln45_1_reg_2619),12));
    zext_ln45_4_fu_1731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_1_fu_1725_p2),12));
    zext_ln45_fu_1144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_2_reg_672),10));
    zext_ln879_fu_1890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1598_30_reg_2655),5));
end behav;
