-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity slide_window is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    conv_count : IN STD_LOGIC_VECTOR (8 downto 0);
    line_buff_val_0_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    line_buff_val_0_V_ce0 : OUT STD_LOGIC;
    line_buff_val_0_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    line_buff_val_0_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    line_buff_val_0_V_ce1 : OUT STD_LOGIC;
    line_buff_val_0_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    line_buff_val_1_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    line_buff_val_1_V_ce0 : OUT STD_LOGIC;
    line_buff_val_1_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    line_buff_val_1_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    line_buff_val_1_V_ce1 : OUT STD_LOGIC;
    line_buff_val_1_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    line_buff_val_2_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    line_buff_val_2_V_ce0 : OUT STD_LOGIC;
    line_buff_val_2_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    line_buff_val_2_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    line_buff_val_2_V_ce1 : OUT STD_LOGIC;
    line_buff_val_2_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    line_buff_val_V_offset : IN STD_LOGIC_VECTOR (3 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of slide_window is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv13_1A2 : STD_LOGIC_VECTOR (12 downto 0) := "0000110100010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal mul_ln259_fu_139_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln259_reg_252 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln259_4_fu_193_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln259_4_reg_289 : STD_LOGIC_VECTOR (12 downto 0);
    signal line_buff_val_0_V_l_reg_294 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_val_0_V_l_1_reg_299 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_val_1_V_l_reg_319 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_val_1_V_l_1_reg_324 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_val_2_V_l_reg_329 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buff_val_2_V_l_1_reg_334 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_port_reg_conv_count : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln259_fu_154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal sext_ln259_1_fu_176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln259_2_fu_198_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal mul_ln259_fu_139_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln259_1_fu_145_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln259_2_fu_149_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln259_fu_161_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln259_2_fu_167_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln259_3_fu_171_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln259_1_fu_183_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln259_3_fu_189_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln259_fu_139_p00 : STD_LOGIC_VECTOR (12 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln259_4_reg_289 <= add_ln259_4_fu_193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_port_reg_conv_count <= conv_count;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                line_buff_val_0_V_l_1_reg_299 <= line_buff_val_0_V_q1;
                line_buff_val_0_V_l_reg_294 <= line_buff_val_0_V_q0;
                line_buff_val_1_V_l_1_reg_324 <= line_buff_val_1_V_q1;
                line_buff_val_1_V_l_reg_319 <= line_buff_val_1_V_q0;
                line_buff_val_2_V_l_1_reg_334 <= line_buff_val_2_V_q1;
                line_buff_val_2_V_l_reg_329 <= line_buff_val_2_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    mul_ln259_reg_252(12 downto 1) <= mul_ln259_fu_139_p2(12 downto 1);
            end if;
        end if;
    end process;
    mul_ln259_reg_252(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln259_1_fu_183_p2 <= std_logic_vector(unsigned(ap_port_reg_conv_count) + unsigned(ap_const_lv9_2));
    add_ln259_2_fu_149_p2 <= std_logic_vector(unsigned(zext_ln259_1_fu_145_p1) + unsigned(mul_ln259_reg_252));
    add_ln259_3_fu_171_p2 <= std_logic_vector(unsigned(zext_ln259_2_fu_167_p1) + unsigned(mul_ln259_reg_252));
    add_ln259_4_fu_193_p2 <= std_logic_vector(unsigned(zext_ln259_3_fu_189_p1) + unsigned(mul_ln259_reg_252));
    add_ln259_fu_161_p2 <= std_logic_vector(unsigned(ap_port_reg_conv_count) + unsigned(ap_const_lv9_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage1_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage2_subdone <= (ap_const_logic_0 = ap_ce);
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= line_buff_val_0_V_l_reg_294;
    ap_return_1 <= line_buff_val_0_V_l_1_reg_299;
    ap_return_2 <= line_buff_val_0_V_q0;
    ap_return_3 <= line_buff_val_1_V_l_reg_319;
    ap_return_4 <= line_buff_val_1_V_l_1_reg_324;
    ap_return_5 <= line_buff_val_1_V_q0;
    ap_return_6 <= line_buff_val_2_V_l_reg_329;
    ap_return_7 <= line_buff_val_2_V_l_1_reg_334;
    ap_return_8 <= line_buff_val_2_V_q0;

    line_buff_val_0_V_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, sext_ln259_fu_154_p1, ap_block_pp0_stage1, sext_ln259_2_fu_198_p1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                line_buff_val_0_V_address0 <= sext_ln259_2_fu_198_p1(12 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                line_buff_val_0_V_address0 <= sext_ln259_fu_154_p1(12 - 1 downto 0);
            else 
                line_buff_val_0_V_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            line_buff_val_0_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    line_buff_val_0_V_address1 <= sext_ln259_1_fu_176_p1(12 - 1 downto 0);

    line_buff_val_0_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_ce, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            line_buff_val_0_V_ce0 <= ap_const_logic_1;
        else 
            line_buff_val_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_val_0_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_ce, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            line_buff_val_0_V_ce1 <= ap_const_logic_1;
        else 
            line_buff_val_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_val_1_V_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, sext_ln259_fu_154_p1, ap_block_pp0_stage1, sext_ln259_2_fu_198_p1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                line_buff_val_1_V_address0 <= sext_ln259_2_fu_198_p1(12 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                line_buff_val_1_V_address0 <= sext_ln259_fu_154_p1(12 - 1 downto 0);
            else 
                line_buff_val_1_V_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            line_buff_val_1_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    line_buff_val_1_V_address1 <= sext_ln259_1_fu_176_p1(12 - 1 downto 0);

    line_buff_val_1_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_ce, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            line_buff_val_1_V_ce0 <= ap_const_logic_1;
        else 
            line_buff_val_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_val_1_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_ce, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            line_buff_val_1_V_ce1 <= ap_const_logic_1;
        else 
            line_buff_val_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_val_2_V_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, sext_ln259_fu_154_p1, ap_block_pp0_stage1, sext_ln259_2_fu_198_p1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                line_buff_val_2_V_address0 <= sext_ln259_2_fu_198_p1(12 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                line_buff_val_2_V_address0 <= sext_ln259_fu_154_p1(12 - 1 downto 0);
            else 
                line_buff_val_2_V_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            line_buff_val_2_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    line_buff_val_2_V_address1 <= sext_ln259_1_fu_176_p1(12 - 1 downto 0);

    line_buff_val_2_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_ce, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            line_buff_val_2_V_ce0 <= ap_const_logic_1;
        else 
            line_buff_val_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buff_val_2_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_ce, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            line_buff_val_2_V_ce1 <= ap_const_logic_1;
        else 
            line_buff_val_2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln259_fu_139_p0 <= mul_ln259_fu_139_p00(4 - 1 downto 0);
    mul_ln259_fu_139_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(line_buff_val_V_offset),13));
    mul_ln259_fu_139_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln259_fu_139_p0) * unsigned(ap_const_lv13_1A2), 13));
        sext_ln259_1_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln259_3_fu_171_p2),64));

        sext_ln259_2_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln259_4_reg_289),64));

        sext_ln259_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln259_2_fu_149_p2),64));

    zext_ln259_1_fu_145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_port_reg_conv_count),13));
    zext_ln259_2_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln259_fu_161_p2),13));
    zext_ln259_3_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln259_1_fu_183_p2),13));
end behav;
