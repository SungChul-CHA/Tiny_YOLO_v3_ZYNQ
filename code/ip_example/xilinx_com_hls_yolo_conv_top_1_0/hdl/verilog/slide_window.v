// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module slide_window (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        conv_count,
        line_buff_val_0_V_address0,
        line_buff_val_0_V_ce0,
        line_buff_val_0_V_q0,
        line_buff_val_0_V_address1,
        line_buff_val_0_V_ce1,
        line_buff_val_0_V_q1,
        line_buff_val_1_V_address0,
        line_buff_val_1_V_ce0,
        line_buff_val_1_V_q0,
        line_buff_val_1_V_address1,
        line_buff_val_1_V_ce1,
        line_buff_val_1_V_q1,
        line_buff_val_2_V_address0,
        line_buff_val_2_V_ce0,
        line_buff_val_2_V_q0,
        line_buff_val_2_V_address1,
        line_buff_val_2_V_ce1,
        line_buff_val_2_V_q1,
        line_buff_val_V_offset,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [8:0] conv_count;
output  [11:0] line_buff_val_0_V_address0;
output   line_buff_val_0_V_ce0;
input  [15:0] line_buff_val_0_V_q0;
output  [11:0] line_buff_val_0_V_address1;
output   line_buff_val_0_V_ce1;
input  [15:0] line_buff_val_0_V_q1;
output  [11:0] line_buff_val_1_V_address0;
output   line_buff_val_1_V_ce0;
input  [15:0] line_buff_val_1_V_q0;
output  [11:0] line_buff_val_1_V_address1;
output   line_buff_val_1_V_ce1;
input  [15:0] line_buff_val_1_V_q1;
output  [11:0] line_buff_val_2_V_address0;
output   line_buff_val_2_V_ce0;
input  [15:0] line_buff_val_2_V_q0;
output  [11:0] line_buff_val_2_V_address1;
output   line_buff_val_2_V_ce1;
input  [15:0] line_buff_val_2_V_q1;
input  [3:0] line_buff_val_V_offset;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [15:0] ap_return_2;
output  [15:0] ap_return_3;
output  [15:0] ap_return_4;
output  [15:0] ap_return_5;
output  [15:0] ap_return_6;
output  [15:0] ap_return_7;
output  [15:0] ap_return_8;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] line_buff_val_0_V_address0;
reg line_buff_val_0_V_ce0;
reg line_buff_val_0_V_ce1;
reg[11:0] line_buff_val_1_V_address0;
reg line_buff_val_1_V_ce0;
reg line_buff_val_1_V_ce1;
reg[11:0] line_buff_val_2_V_address0;
reg line_buff_val_2_V_ce0;
reg line_buff_val_2_V_ce1;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [12:0] mul_ln259_fu_139_p2;
reg   [12:0] mul_ln259_reg_252;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [12:0] add_ln259_4_fu_193_p2;
reg   [12:0] add_ln259_4_reg_289;
reg   [15:0] line_buff_val_0_V_l_reg_294;
reg   [15:0] line_buff_val_0_V_l_1_reg_299;
reg   [15:0] line_buff_val_1_V_l_reg_319;
reg   [15:0] line_buff_val_1_V_l_1_reg_324;
reg   [15:0] line_buff_val_2_V_l_reg_329;
reg   [15:0] line_buff_val_2_V_l_1_reg_334;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage2_subdone;
reg   [8:0] ap_port_reg_conv_count;
wire  signed [63:0] sext_ln259_fu_154_p1;
wire    ap_block_pp0_stage1;
wire  signed [63:0] sext_ln259_1_fu_176_p1;
wire  signed [63:0] sext_ln259_2_fu_198_p1;
wire    ap_block_pp0_stage2;
wire   [3:0] mul_ln259_fu_139_p0;
wire   [12:0] zext_ln259_1_fu_145_p1;
wire   [12:0] add_ln259_2_fu_149_p2;
wire   [8:0] add_ln259_fu_161_p2;
wire   [12:0] zext_ln259_2_fu_167_p1;
wire   [12:0] add_ln259_3_fu_171_p2;
wire   [8:0] add_ln259_1_fu_183_p2;
wire   [12:0] zext_ln259_3_fu_189_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire   [12:0] mul_ln259_fu_139_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln259_4_reg_289 <= add_ln259_4_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_port_reg_conv_count <= conv_count;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        line_buff_val_0_V_l_1_reg_299 <= line_buff_val_0_V_q1;
        line_buff_val_0_V_l_reg_294 <= line_buff_val_0_V_q0;
        line_buff_val_1_V_l_1_reg_324 <= line_buff_val_1_V_q1;
        line_buff_val_1_V_l_reg_319 <= line_buff_val_1_V_q0;
        line_buff_val_2_V_l_1_reg_334 <= line_buff_val_2_V_q1;
        line_buff_val_2_V_l_reg_329 <= line_buff_val_2_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_ln259_reg_252[12 : 1] <= mul_ln259_fu_139_p2[12 : 1];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            line_buff_val_0_V_address0 = sext_ln259_2_fu_198_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            line_buff_val_0_V_address0 = sext_ln259_fu_154_p1;
        end else begin
            line_buff_val_0_V_address0 = 'bx;
        end
    end else begin
        line_buff_val_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        line_buff_val_0_V_ce0 = 1'b1;
    end else begin
        line_buff_val_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        line_buff_val_0_V_ce1 = 1'b1;
    end else begin
        line_buff_val_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            line_buff_val_1_V_address0 = sext_ln259_2_fu_198_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            line_buff_val_1_V_address0 = sext_ln259_fu_154_p1;
        end else begin
            line_buff_val_1_V_address0 = 'bx;
        end
    end else begin
        line_buff_val_1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        line_buff_val_1_V_ce0 = 1'b1;
    end else begin
        line_buff_val_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        line_buff_val_1_V_ce1 = 1'b1;
    end else begin
        line_buff_val_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            line_buff_val_2_V_address0 = sext_ln259_2_fu_198_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            line_buff_val_2_V_address0 = sext_ln259_fu_154_p1;
        end else begin
            line_buff_val_2_V_address0 = 'bx;
        end
    end else begin
        line_buff_val_2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        line_buff_val_2_V_ce0 = 1'b1;
    end else begin
        line_buff_val_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        line_buff_val_2_V_ce1 = 1'b1;
    end else begin
        line_buff_val_2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln259_1_fu_183_p2 = (ap_port_reg_conv_count + 9'd2);

assign add_ln259_2_fu_149_p2 = (zext_ln259_1_fu_145_p1 + mul_ln259_reg_252);

assign add_ln259_3_fu_171_p2 = (zext_ln259_2_fu_167_p1 + mul_ln259_reg_252);

assign add_ln259_4_fu_193_p2 = (zext_ln259_3_fu_189_p1 + mul_ln259_reg_252);

assign add_ln259_fu_161_p2 = (ap_port_reg_conv_count + 9'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_subdone = (1'b0 == ap_ce);
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = line_buff_val_0_V_l_reg_294;

assign ap_return_1 = line_buff_val_0_V_l_1_reg_299;

assign ap_return_2 = line_buff_val_0_V_q0;

assign ap_return_3 = line_buff_val_1_V_l_reg_319;

assign ap_return_4 = line_buff_val_1_V_l_1_reg_324;

assign ap_return_5 = line_buff_val_1_V_q0;

assign ap_return_6 = line_buff_val_2_V_l_reg_329;

assign ap_return_7 = line_buff_val_2_V_l_1_reg_334;

assign ap_return_8 = line_buff_val_2_V_q0;

assign line_buff_val_0_V_address1 = sext_ln259_1_fu_176_p1;

assign line_buff_val_1_V_address1 = sext_ln259_1_fu_176_p1;

assign line_buff_val_2_V_address1 = sext_ln259_1_fu_176_p1;

assign mul_ln259_fu_139_p0 = mul_ln259_fu_139_p00;

assign mul_ln259_fu_139_p00 = line_buff_val_V_offset;

assign mul_ln259_fu_139_p2 = (mul_ln259_fu_139_p0 * $signed('h1A2));

assign sext_ln259_1_fu_176_p1 = $signed(add_ln259_3_fu_171_p2);

assign sext_ln259_2_fu_198_p1 = $signed(add_ln259_4_reg_289);

assign sext_ln259_fu_154_p1 = $signed(add_ln259_2_fu_149_p2);

assign zext_ln259_1_fu_145_p1 = ap_port_reg_conv_count;

assign zext_ln259_2_fu_167_p1 = add_ln259_fu_161_p2;

assign zext_ln259_3_fu_189_p1 = add_ln259_1_fu_183_p2;

always @ (posedge ap_clk) begin
    mul_ln259_reg_252[0] <= 1'b0;
end

endmodule //slide_window
