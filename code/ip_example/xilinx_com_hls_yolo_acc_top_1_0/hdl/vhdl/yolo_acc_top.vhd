-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yolo_acc_top is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inStream_a_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    inStream_a_TVALID : IN STD_LOGIC;
    inStream_a_TREADY : OUT STD_LOGIC;
    inStream_a_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_a_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_a_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_a_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_a_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    inStream_a_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    inStream_b_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    inStream_b_TVALID : IN STD_LOGIC;
    inStream_b_TREADY : OUT STD_LOGIC;
    inStream_b_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_b_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_b_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_b_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_b_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    inStream_b_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    outStream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    outStream_TVALID : OUT STD_LOGIC;
    outStream_TREADY : IN STD_LOGIC;
    outStream_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    outStream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of yolo_acc_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "yolo_acc_top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.631750,HLS_SYN_LAT=692237,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=5,HLS_SYN_FF=1947,HLS_SYN_LUT=2755,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal inStream_a_V_data_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal inStream_a_V_data_0_vld_in : STD_LOGIC;
    signal inStream_a_V_data_0_vld_out : STD_LOGIC;
    signal inStream_a_V_data_0_ack_in : STD_LOGIC;
    signal inStream_a_V_data_0_ack_out : STD_LOGIC;
    signal inStream_a_V_data_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal inStream_a_V_data_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal inStream_a_V_data_0_sel_rd : STD_LOGIC := '0';
    signal inStream_a_V_data_0_sel_wr : STD_LOGIC := '0';
    signal inStream_a_V_data_0_sel : STD_LOGIC;
    signal inStream_a_V_data_0_load_A : STD_LOGIC;
    signal inStream_a_V_data_0_load_B : STD_LOGIC;
    signal inStream_a_V_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_a_V_data_0_state_cmp_full : STD_LOGIC;
    signal inStream_a_V_keep_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_a_V_keep_V_0_vld_in : STD_LOGIC;
    signal inStream_a_V_keep_V_0_vld_out : STD_LOGIC;
    signal inStream_a_V_keep_V_0_ack_in : STD_LOGIC;
    signal inStream_a_V_keep_V_0_ack_out : STD_LOGIC;
    signal inStream_a_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_a_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_a_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_a_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_a_V_keep_V_0_sel : STD_LOGIC;
    signal inStream_a_V_keep_V_0_load_A : STD_LOGIC;
    signal inStream_a_V_keep_V_0_load_B : STD_LOGIC;
    signal inStream_a_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_a_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_a_V_strb_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_a_V_strb_V_0_vld_in : STD_LOGIC;
    signal inStream_a_V_strb_V_0_vld_out : STD_LOGIC;
    signal inStream_a_V_strb_V_0_ack_in : STD_LOGIC;
    signal inStream_a_V_strb_V_0_ack_out : STD_LOGIC;
    signal inStream_a_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_a_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_a_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_a_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_a_V_strb_V_0_sel : STD_LOGIC;
    signal inStream_a_V_strb_V_0_load_A : STD_LOGIC;
    signal inStream_a_V_strb_V_0_load_B : STD_LOGIC;
    signal inStream_a_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_a_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_a_V_user_V_0_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_a_V_user_V_0_vld_in : STD_LOGIC;
    signal inStream_a_V_user_V_0_vld_out : STD_LOGIC;
    signal inStream_a_V_user_V_0_ack_in : STD_LOGIC;
    signal inStream_a_V_user_V_0_ack_out : STD_LOGIC;
    signal inStream_a_V_user_V_0_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_a_V_user_V_0_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_a_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_a_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_a_V_user_V_0_sel : STD_LOGIC;
    signal inStream_a_V_user_V_0_load_A : STD_LOGIC;
    signal inStream_a_V_user_V_0_load_B : STD_LOGIC;
    signal inStream_a_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_a_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_a_V_id_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_a_V_id_V_0_vld_in : STD_LOGIC;
    signal inStream_a_V_id_V_0_vld_out : STD_LOGIC;
    signal inStream_a_V_id_V_0_ack_in : STD_LOGIC;
    signal inStream_a_V_id_V_0_ack_out : STD_LOGIC;
    signal inStream_a_V_id_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_a_V_id_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_a_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_a_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_a_V_id_V_0_sel : STD_LOGIC;
    signal inStream_a_V_id_V_0_load_A : STD_LOGIC;
    signal inStream_a_V_id_V_0_load_B : STD_LOGIC;
    signal inStream_a_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_a_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_a_V_dest_V_0_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_a_V_dest_V_0_vld_in : STD_LOGIC;
    signal inStream_a_V_dest_V_0_vld_out : STD_LOGIC;
    signal inStream_a_V_dest_V_0_ack_in : STD_LOGIC;
    signal inStream_a_V_dest_V_0_ack_out : STD_LOGIC;
    signal inStream_a_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_a_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_a_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_a_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_a_V_dest_V_0_sel : STD_LOGIC;
    signal inStream_a_V_dest_V_0_load_A : STD_LOGIC;
    signal inStream_a_V_dest_V_0_load_B : STD_LOGIC;
    signal inStream_a_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_a_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_b_V_data_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal inStream_b_V_data_0_vld_in : STD_LOGIC;
    signal inStream_b_V_data_0_vld_out : STD_LOGIC;
    signal inStream_b_V_data_0_ack_in : STD_LOGIC;
    signal inStream_b_V_data_0_ack_out : STD_LOGIC;
    signal inStream_b_V_data_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal inStream_b_V_data_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal inStream_b_V_data_0_sel_rd : STD_LOGIC := '0';
    signal inStream_b_V_data_0_sel_wr : STD_LOGIC := '0';
    signal inStream_b_V_data_0_sel : STD_LOGIC;
    signal inStream_b_V_data_0_load_A : STD_LOGIC;
    signal inStream_b_V_data_0_load_B : STD_LOGIC;
    signal inStream_b_V_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_b_V_data_0_state_cmp_full : STD_LOGIC;
    signal inStream_b_V_dest_V_0_vld_in : STD_LOGIC;
    signal inStream_b_V_dest_V_0_ack_out : STD_LOGIC;
    signal inStream_b_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_data_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal outStream_V_data_1_vld_in : STD_LOGIC;
    signal outStream_V_data_1_vld_out : STD_LOGIC;
    signal outStream_V_data_1_ack_in : STD_LOGIC;
    signal outStream_V_data_1_ack_out : STD_LOGIC;
    signal outStream_V_data_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal outStream_V_data_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal outStream_V_data_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_data_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_data_1_sel : STD_LOGIC;
    signal outStream_V_data_1_load_A : STD_LOGIC;
    signal outStream_V_data_1_load_B : STD_LOGIC;
    signal outStream_V_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_data_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_keep_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_keep_V_1_vld_in : STD_LOGIC;
    signal outStream_V_keep_V_1_vld_out : STD_LOGIC;
    signal outStream_V_keep_V_1_ack_in : STD_LOGIC;
    signal outStream_V_keep_V_1_ack_out : STD_LOGIC;
    signal outStream_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_keep_V_1_sel : STD_LOGIC;
    signal outStream_V_keep_V_1_load_A : STD_LOGIC;
    signal outStream_V_keep_V_1_load_B : STD_LOGIC;
    signal outStream_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_strb_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_strb_V_1_vld_in : STD_LOGIC;
    signal outStream_V_strb_V_1_vld_out : STD_LOGIC;
    signal outStream_V_strb_V_1_ack_in : STD_LOGIC;
    signal outStream_V_strb_V_1_ack_out : STD_LOGIC;
    signal outStream_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_strb_V_1_sel : STD_LOGIC;
    signal outStream_V_strb_V_1_load_A : STD_LOGIC;
    signal outStream_V_strb_V_1_load_B : STD_LOGIC;
    signal outStream_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_user_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_vld_in : STD_LOGIC;
    signal outStream_V_user_V_1_vld_out : STD_LOGIC;
    signal outStream_V_user_V_1_ack_in : STD_LOGIC;
    signal outStream_V_user_V_1_ack_out : STD_LOGIC;
    signal outStream_V_user_V_1_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_user_V_1_sel : STD_LOGIC;
    signal outStream_V_user_V_1_load_A : STD_LOGIC;
    signal outStream_V_user_V_1_load_B : STD_LOGIC;
    signal outStream_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_vld_in : STD_LOGIC;
    signal outStream_V_last_V_1_vld_out : STD_LOGIC;
    signal outStream_V_last_V_1_ack_in : STD_LOGIC;
    signal outStream_V_last_V_1_ack_out : STD_LOGIC;
    signal outStream_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_last_V_1_sel : STD_LOGIC;
    signal outStream_V_last_V_1_load_A : STD_LOGIC;
    signal outStream_V_last_V_1_load_B : STD_LOGIC;
    signal outStream_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_vld_in : STD_LOGIC;
    signal outStream_V_id_V_1_vld_out : STD_LOGIC;
    signal outStream_V_id_V_1_ack_in : STD_LOGIC;
    signal outStream_V_id_V_1_ack_out : STD_LOGIC;
    signal outStream_V_id_V_1_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_id_V_1_sel : STD_LOGIC;
    signal outStream_V_id_V_1_load_A : STD_LOGIC;
    signal outStream_V_id_V_1_load_B : STD_LOGIC;
    signal outStream_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_dest_V_1_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_vld_in : STD_LOGIC;
    signal outStream_V_dest_V_1_vld_out : STD_LOGIC;
    signal outStream_V_dest_V_1_ack_in : STD_LOGIC;
    signal outStream_V_dest_V_1_ack_out : STD_LOGIC;
    signal outStream_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_dest_V_1_sel : STD_LOGIC;
    signal outStream_V_dest_V_1_load_A : STD_LOGIC;
    signal outStream_V_dest_V_1_load_B : STD_LOGIC;
    signal outStream_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal input_h_V : STD_LOGIC_VECTOR (8 downto 0);
    signal input_w_V : STD_LOGIC_VECTOR (8 downto 0);
    signal fold_input_ch_V : STD_LOGIC_VECTOR (3 downto 0);
    signal leaky_V : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_en_V : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_a_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln40_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_b_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln23_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_en_V_read_reg_1225 : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal icmp_ln40_reg_1302 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_1302_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal icmp_ln40_reg_1302_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten17_reg_348 : STD_LOGIC_VECTOR (21 downto 0);
    signal i_op_assign_reg_359 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_reg_370 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_op_assign_1_reg_381 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_op_assign_2_reg_392 : STD_LOGIC_VECTOR (3 downto 0);
    signal leaky_V_read_reg_1233 : STD_LOGIC_VECTOR (0 downto 0);
    signal fold_input_ch_V_read_reg_1241 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_w_V_read_reg_1249 : STD_LOGIC_VECTOR (8 downto 0);
    signal input_h_V_read_reg_1255 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_V_fu_481_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_predicate_op64_read_state2 : BOOLEAN;
    signal ap_block_state2 : BOOLEAN;
    signal mul_ln1354_fu_524_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1354_reg_1269 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln1354_fu_533_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1354_reg_1275 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln1354_1_fu_542_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1354_1_reg_1281 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1354_1_fu_1219_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1354_1_reg_1287 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln73_3_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_3_reg_1292 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1297 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state9_io : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state10_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln40_reg_1302_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_1302_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln40_fu_594_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln40_fu_661_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln43_fu_712_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_keep_V_reg_1321 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_keep_V_reg_1321_pp1_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_keep_V_reg_1321_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_keep_V_reg_1321_pp1_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_strb_V_reg_1326 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_strb_V_reg_1326_pp1_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_strb_V_reg_1326_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_strb_V_reg_1326_pp1_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_1331 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_1331_pp1_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_1331_pp1_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_1331_pp1_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_id_V_reg_1336 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_1336_pp1_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_1336_pp1_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_1336_pp1_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_dest_V_reg_1341 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_1341_pp1_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_1341_pp1_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_1341_pp1_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal output_acc_0_V_fu_864_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_acc_0_V_reg_1346 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_acc_1_V_fu_954_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_acc_1_V_reg_1351 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_acc_2_V_fu_1044_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_acc_2_V_reg_1356 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_acc_3_V_fu_1134_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_acc_3_V_reg_1361 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_last_V_fu_1180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_1386 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_1386_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_1386_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_1386_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal input_ch_idx_fu_1186_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln43_1_fu_1198_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal kernel_bias_fp_0_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal kernel_bias_fp_1_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_bias_fp_0_V_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_bias_fp_1_V_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_3_fu_1206_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal kernel_bias_fp_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_bias_fp_0_V_ce0 : STD_LOGIC;
    signal kernel_bias_fp_0_V_we0 : STD_LOGIC;
    signal kernel_bias_fp_0_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_bias_fp_0_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_bias_fp_0_V_ce1 : STD_LOGIC;
    signal kernel_bias_fp_0_V_we1 : STD_LOGIC;
    signal kernel_bias_fp_0_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_bias_fp_1_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_bias_fp_1_V_ce0 : STD_LOGIC;
    signal kernel_bias_fp_1_V_we0 : STD_LOGIC;
    signal kernel_bias_fp_1_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_bias_fp_1_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_bias_fp_1_V_ce1 : STD_LOGIC;
    signal kernel_bias_fp_1_V_we1 : STD_LOGIC;
    signal kernel_bias_fp_1_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_post_process_unit_fu_403_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_post_process_unit_fu_403_ap_ce : STD_LOGIC;
    signal ap_block_state5_pp1_stage0_iter0_ignore_call99 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1_ignore_call99 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter2_ignore_call99 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter3_ignore_call99 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter4_ignore_call99 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter5_ignore_call99 : BOOLEAN;
    signal ap_block_pp1_stage0_11001_ignoreCallOp222 : BOOLEAN;
    signal grp_post_process_unit_fu_412_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_post_process_unit_fu_412_ap_ce : STD_LOGIC;
    signal ap_block_state5_pp1_stage0_iter0_ignore_call102 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1_ignore_call102 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter2_ignore_call102 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter3_ignore_call102 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter4_ignore_call102 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter5_ignore_call102 : BOOLEAN;
    signal ap_block_pp1_stage0_11001_ignoreCallOp224 : BOOLEAN;
    signal grp_post_process_unit_fu_421_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_post_process_unit_fu_421_ap_ce : STD_LOGIC;
    signal ap_block_state5_pp1_stage0_iter0_ignore_call107 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1_ignore_call107 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter2_ignore_call107 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter3_ignore_call107 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter4_ignore_call107 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter5_ignore_call107 : BOOLEAN;
    signal ap_block_pp1_stage0_11001_ignoreCallOp226 : BOOLEAN;
    signal grp_post_process_unit_fu_430_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_post_process_unit_fu_430_ap_ce : STD_LOGIC;
    signal ap_block_state5_pp1_stage0_iter0_ignore_call110 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1_ignore_call110 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter2_ignore_call110 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter3_ignore_call110 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter4_ignore_call110 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter5_ignore_call110 : BOOLEAN;
    signal ap_block_pp1_stage0_11001_ignoreCallOp228 : BOOLEAN;
    signal t_V_reg_337 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln203_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_1_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_fu_1150_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_fu_1162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal grp_fu_454_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_443_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_465_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_492_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln203_fu_506_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln1354_fu_524_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln1354_fu_524_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1354_fu_530_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1354_1_fu_539_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln43_fu_565_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln46_fu_574_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln73_1_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_2_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln40_1_fu_613_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln43_1_fu_619_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln73_4_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln73_2_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln73_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_1_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_fu_605_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln1598_3_fu_654_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1598_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_idx_fu_669_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln46_1_fu_689_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln73_5_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_1_fu_628_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln73_3_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1598_2_fu_641_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_744_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_fu_778_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_fu_786_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_fu_782_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_fu_790_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_6_fu_804_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_1_fu_810_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_796_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_4_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_848_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_fu_856_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_4_fu_748_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_1_fu_876_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_1_fu_876_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_1_fu_872_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_fu_880_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_10_fu_894_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_10_fu_894_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_3_fu_900_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_886_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_1_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_5_fu_920_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_1_fu_938_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_1_fu_946_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_8_fu_758_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_2_fu_966_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_2_fu_966_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_2_fu_962_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_2_fu_970_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_12_fu_984_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_12_fu_984_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_5_fu_990_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_fu_976_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_2_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_1016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_6_fu_1010_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_2_fu_1004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_1022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_1028_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_2_fu_1036_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_13_fu_768_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_3_fu_1056_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_3_fu_1056_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_3_fu_1052_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_3_fu_1060_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_15_fu_1074_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_15_fu_1074_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_7_fu_1080_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_fu_1066_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_3_fu_1088_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_3_fu_1106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_7_fu_1100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_3_fu_1094_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_3_fu_1112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_3_fu_1118_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_3_fu_1126_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1598_4_fu_681_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln1_fu_1142_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln65_fu_1156_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln1598_5_fu_704_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_fu_1168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln73_1_fu_1174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln43_1_fu_1192_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1354_1_fu_1219_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1354_1_fu_1219_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_state11 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal mul_ln1354_1_fu_1219_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1354_1_fu_1219_p10 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1354_fu_524_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1354_fu_524_p10 : STD_LOGIC_VECTOR (12 downto 0);

    component post_process_unit IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in_V : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_V : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_en_V : IN STD_LOGIC_VECTOR (0 downto 0);
        leaky_V : IN STD_LOGIC_VECTOR (0 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component yolo_acc_top_mul_mul_13ns_9ns_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component yolo_acc_top_kernel_bias_fp_0_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component yolo_acc_top_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        input_h_V : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_w_V : OUT STD_LOGIC_VECTOR (8 downto 0);
        fold_input_ch_V : OUT STD_LOGIC_VECTOR (3 downto 0);
        leaky_V : OUT STD_LOGIC_VECTOR (0 downto 0);
        bias_en_V : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    yolo_acc_top_CTRL_BUS_s_axi_U : component yolo_acc_top_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        input_h_V => input_h_V,
        input_w_V => input_w_V,
        fold_input_ch_V => fold_input_ch_V,
        leaky_V => leaky_V,
        bias_en_V => bias_en_V);

    kernel_bias_fp_0_V_U : component yolo_acc_top_kernel_bias_fp_0_V
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => kernel_bias_fp_0_V_address0,
        ce0 => kernel_bias_fp_0_V_ce0,
        we0 => kernel_bias_fp_0_V_we0,
        d0 => kernel_bias_fp_0_V_d0,
        q0 => kernel_bias_fp_0_V_q0,
        address1 => kernel_bias_fp_0_V_address1,
        ce1 => kernel_bias_fp_0_V_ce1,
        we1 => kernel_bias_fp_0_V_we1,
        d1 => kernel_bias_fp_0_V_d1,
        q1 => kernel_bias_fp_0_V_q1);

    kernel_bias_fp_1_V_U : component yolo_acc_top_kernel_bias_fp_0_V
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => kernel_bias_fp_1_V_address0,
        ce0 => kernel_bias_fp_1_V_ce0,
        we0 => kernel_bias_fp_1_V_we0,
        d0 => kernel_bias_fp_1_V_d0,
        q0 => kernel_bias_fp_1_V_q0,
        address1 => kernel_bias_fp_1_V_address1,
        ce1 => kernel_bias_fp_1_V_ce1,
        we1 => kernel_bias_fp_1_V_we1,
        d1 => kernel_bias_fp_1_V_d1,
        q1 => kernel_bias_fp_1_V_q1);

    grp_post_process_unit_fu_403 : component post_process_unit
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in_V => output_acc_0_V_reg_1346,
        bias_V => kernel_bias_fp_0_V_q0,
        bias_en_V => bias_en_V_read_reg_1225,
        leaky_V => leaky_V_read_reg_1233,
        ap_return => grp_post_process_unit_fu_403_ap_return,
        ap_ce => grp_post_process_unit_fu_403_ap_ce);

    grp_post_process_unit_fu_412 : component post_process_unit
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in_V => output_acc_1_V_reg_1351,
        bias_V => kernel_bias_fp_1_V_q0,
        bias_en_V => bias_en_V_read_reg_1225,
        leaky_V => leaky_V_read_reg_1233,
        ap_return => grp_post_process_unit_fu_412_ap_return,
        ap_ce => grp_post_process_unit_fu_412_ap_ce);

    grp_post_process_unit_fu_421 : component post_process_unit
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in_V => output_acc_2_V_reg_1356,
        bias_V => kernel_bias_fp_0_V_q1,
        bias_en_V => bias_en_V_read_reg_1225,
        leaky_V => leaky_V_read_reg_1233,
        ap_return => grp_post_process_unit_fu_421_ap_return,
        ap_ce => grp_post_process_unit_fu_421_ap_ce);

    grp_post_process_unit_fu_430 : component post_process_unit
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in_V => output_acc_3_V_reg_1361,
        bias_V => kernel_bias_fp_1_V_q1,
        bias_en_V => bias_en_V_read_reg_1225,
        leaky_V => leaky_V_read_reg_1233,
        ap_return => grp_post_process_unit_fu_430_ap_return,
        ap_ce => grp_post_process_unit_fu_430_ap_ce);

    yolo_acc_top_mul_mul_13ns_9ns_22_1_1_U7 : component yolo_acc_top_mul_mul_13ns_9ns_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 9,
        dout_WIDTH => 22)
    port map (
        din0 => mul_ln1354_1_fu_1219_p0,
        din1 => mul_ln1354_1_fu_1219_p1,
        dout => mul_ln1354_1_fu_1219_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_a_V_data_0_ack_out = ap_const_logic_1) and (inStream_a_V_data_0_vld_out = ap_const_logic_1))) then 
                                        inStream_a_V_data_0_sel_rd <= not(inStream_a_V_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_a_V_data_0_ack_in = ap_const_logic_1) and (inStream_a_V_data_0_vld_in = ap_const_logic_1))) then 
                                        inStream_a_V_data_0_sel_wr <= not(inStream_a_V_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_data_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_a_V_data_0_state = ap_const_lv2_2) and (inStream_a_V_data_0_vld_in = ap_const_logic_0)) or ((inStream_a_V_data_0_state = ap_const_lv2_3) and (inStream_a_V_data_0_vld_in = ap_const_logic_0) and (inStream_a_V_data_0_ack_out = ap_const_logic_1)))) then 
                    inStream_a_V_data_0_state <= ap_const_lv2_2;
                elsif ((((inStream_a_V_data_0_state = ap_const_lv2_1) and (inStream_a_V_data_0_ack_out = ap_const_logic_0)) or ((inStream_a_V_data_0_state = ap_const_lv2_3) and (inStream_a_V_data_0_ack_out = ap_const_logic_0) and (inStream_a_V_data_0_vld_in = ap_const_logic_1)))) then 
                    inStream_a_V_data_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_a_V_data_0_vld_in = ap_const_logic_0) and (inStream_a_V_data_0_ack_out = ap_const_logic_1))) and not(((inStream_a_V_data_0_ack_out = ap_const_logic_0) and (inStream_a_V_data_0_vld_in = ap_const_logic_1))) and (inStream_a_V_data_0_state = ap_const_lv2_3)) or ((inStream_a_V_data_0_state = ap_const_lv2_1) and (inStream_a_V_data_0_ack_out = ap_const_logic_1)) or ((inStream_a_V_data_0_state = ap_const_lv2_2) and (inStream_a_V_data_0_vld_in = ap_const_logic_1)))) then 
                    inStream_a_V_data_0_state <= ap_const_lv2_3;
                else 
                    inStream_a_V_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_a_V_dest_V_0_ack_out = ap_const_logic_1) and (inStream_a_V_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_a_V_dest_V_0_sel_rd <= not(inStream_a_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_a_V_dest_V_0_ack_in = ap_const_logic_1) and (inStream_a_V_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_a_V_dest_V_0_sel_wr <= not(inStream_a_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_a_V_dest_V_0_state = ap_const_lv2_2) and (inStream_a_V_dest_V_0_vld_in = ap_const_logic_0)) or ((inStream_a_V_dest_V_0_state = ap_const_lv2_3) and (inStream_a_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_a_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_a_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_a_V_dest_V_0_state = ap_const_lv2_1) and (inStream_a_V_dest_V_0_ack_out = ap_const_logic_0)) or ((inStream_a_V_dest_V_0_state = ap_const_lv2_3) and (inStream_a_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_a_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_a_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_a_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_a_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((inStream_a_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_a_V_dest_V_0_vld_in = ap_const_logic_1))) and (inStream_a_V_dest_V_0_state = ap_const_lv2_3)) or ((inStream_a_V_dest_V_0_state = ap_const_lv2_1) and (inStream_a_V_dest_V_0_ack_out = ap_const_logic_1)) or ((inStream_a_V_dest_V_0_state = ap_const_lv2_2) and (inStream_a_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_a_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_a_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_a_V_id_V_0_ack_out = ap_const_logic_1) and (inStream_a_V_id_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_a_V_id_V_0_sel_rd <= not(inStream_a_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_a_V_id_V_0_ack_in = ap_const_logic_1) and (inStream_a_V_id_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_a_V_id_V_0_sel_wr <= not(inStream_a_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_a_V_id_V_0_state = ap_const_lv2_2) and (inStream_a_V_id_V_0_vld_in = ap_const_logic_0)) or ((inStream_a_V_id_V_0_state = ap_const_lv2_3) and (inStream_a_V_id_V_0_vld_in = ap_const_logic_0) and (inStream_a_V_id_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_a_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_a_V_id_V_0_state = ap_const_lv2_1) and (inStream_a_V_id_V_0_ack_out = ap_const_logic_0)) or ((inStream_a_V_id_V_0_state = ap_const_lv2_3) and (inStream_a_V_id_V_0_ack_out = ap_const_logic_0) and (inStream_a_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_a_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_a_V_id_V_0_vld_in = ap_const_logic_0) and (inStream_a_V_id_V_0_ack_out = ap_const_logic_1))) and not(((inStream_a_V_id_V_0_ack_out = ap_const_logic_0) and (inStream_a_V_id_V_0_vld_in = ap_const_logic_1))) and (inStream_a_V_id_V_0_state = ap_const_lv2_3)) or ((inStream_a_V_id_V_0_state = ap_const_lv2_1) and (inStream_a_V_id_V_0_ack_out = ap_const_logic_1)) or ((inStream_a_V_id_V_0_state = ap_const_lv2_2) and (inStream_a_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_a_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_a_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_a_V_keep_V_0_ack_out = ap_const_logic_1) and (inStream_a_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_a_V_keep_V_0_sel_rd <= not(inStream_a_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_a_V_keep_V_0_vld_in = ap_const_logic_1) and (inStream_a_V_keep_V_0_ack_in = ap_const_logic_1))) then 
                                        inStream_a_V_keep_V_0_sel_wr <= not(inStream_a_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_a_V_keep_V_0_state = ap_const_lv2_2) and (inStream_a_V_keep_V_0_vld_in = ap_const_logic_0)) or ((inStream_a_V_keep_V_0_state = ap_const_lv2_3) and (inStream_a_V_keep_V_0_vld_in = ap_const_logic_0) and (inStream_a_V_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_a_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_a_V_keep_V_0_state = ap_const_lv2_1) and (inStream_a_V_keep_V_0_ack_out = ap_const_logic_0)) or ((inStream_a_V_keep_V_0_state = ap_const_lv2_3) and (inStream_a_V_keep_V_0_ack_out = ap_const_logic_0) and (inStream_a_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_a_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_a_V_keep_V_0_vld_in = ap_const_logic_0) and (inStream_a_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((inStream_a_V_keep_V_0_ack_out = ap_const_logic_0) and (inStream_a_V_keep_V_0_vld_in = ap_const_logic_1))) and (inStream_a_V_keep_V_0_state = ap_const_lv2_3)) or ((inStream_a_V_keep_V_0_state = ap_const_lv2_1) and (inStream_a_V_keep_V_0_ack_out = ap_const_logic_1)) or ((inStream_a_V_keep_V_0_state = ap_const_lv2_2) and (inStream_a_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_a_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_a_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_a_V_strb_V_0_ack_out = ap_const_logic_1) and (inStream_a_V_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_a_V_strb_V_0_sel_rd <= not(inStream_a_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_a_V_strb_V_0_ack_in = ap_const_logic_1) and (inStream_a_V_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_a_V_strb_V_0_sel_wr <= not(inStream_a_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_a_V_strb_V_0_state = ap_const_lv2_2) and (inStream_a_V_strb_V_0_vld_in = ap_const_logic_0)) or ((inStream_a_V_strb_V_0_state = ap_const_lv2_3) and (inStream_a_V_strb_V_0_vld_in = ap_const_logic_0) and (inStream_a_V_strb_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_a_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_a_V_strb_V_0_state = ap_const_lv2_1) and (inStream_a_V_strb_V_0_ack_out = ap_const_logic_0)) or ((inStream_a_V_strb_V_0_state = ap_const_lv2_3) and (inStream_a_V_strb_V_0_ack_out = ap_const_logic_0) and (inStream_a_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_a_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_a_V_strb_V_0_vld_in = ap_const_logic_0) and (inStream_a_V_strb_V_0_ack_out = ap_const_logic_1))) and not(((inStream_a_V_strb_V_0_ack_out = ap_const_logic_0) and (inStream_a_V_strb_V_0_vld_in = ap_const_logic_1))) and (inStream_a_V_strb_V_0_state = ap_const_lv2_3)) or ((inStream_a_V_strb_V_0_state = ap_const_lv2_1) and (inStream_a_V_strb_V_0_ack_out = ap_const_logic_1)) or ((inStream_a_V_strb_V_0_state = ap_const_lv2_2) and (inStream_a_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_a_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_a_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_a_V_user_V_0_ack_out = ap_const_logic_1) and (inStream_a_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_a_V_user_V_0_sel_rd <= not(inStream_a_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_a_V_user_V_0_ack_in = ap_const_logic_1) and (inStream_a_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_a_V_user_V_0_sel_wr <= not(inStream_a_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_a_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_a_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_a_V_user_V_0_state = ap_const_lv2_2) and (inStream_a_V_user_V_0_vld_in = ap_const_logic_0)) or ((inStream_a_V_user_V_0_state = ap_const_lv2_3) and (inStream_a_V_user_V_0_vld_in = ap_const_logic_0) and (inStream_a_V_user_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_a_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_a_V_user_V_0_state = ap_const_lv2_1) and (inStream_a_V_user_V_0_ack_out = ap_const_logic_0)) or ((inStream_a_V_user_V_0_state = ap_const_lv2_3) and (inStream_a_V_user_V_0_ack_out = ap_const_logic_0) and (inStream_a_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_a_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_a_V_user_V_0_vld_in = ap_const_logic_0) and (inStream_a_V_user_V_0_ack_out = ap_const_logic_1))) and not(((inStream_a_V_user_V_0_ack_out = ap_const_logic_0) and (inStream_a_V_user_V_0_vld_in = ap_const_logic_1))) and (inStream_a_V_user_V_0_state = ap_const_lv2_3)) or ((inStream_a_V_user_V_0_state = ap_const_lv2_1) and (inStream_a_V_user_V_0_ack_out = ap_const_logic_1)) or ((inStream_a_V_user_V_0_state = ap_const_lv2_2) and (inStream_a_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_a_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_a_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_b_V_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_b_V_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_b_V_data_0_ack_out = ap_const_logic_1) and (inStream_b_V_data_0_vld_out = ap_const_logic_1))) then 
                                        inStream_b_V_data_0_sel_rd <= not(inStream_b_V_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_b_V_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_b_V_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_b_V_data_0_ack_in = ap_const_logic_1) and (inStream_b_V_data_0_vld_in = ap_const_logic_1))) then 
                                        inStream_b_V_data_0_sel_wr <= not(inStream_b_V_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_b_V_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_b_V_data_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_b_V_data_0_state = ap_const_lv2_2) and (inStream_b_V_data_0_vld_in = ap_const_logic_0)) or ((inStream_b_V_data_0_state = ap_const_lv2_3) and (inStream_b_V_data_0_vld_in = ap_const_logic_0) and (inStream_b_V_data_0_ack_out = ap_const_logic_1)))) then 
                    inStream_b_V_data_0_state <= ap_const_lv2_2;
                elsif ((((inStream_b_V_data_0_state = ap_const_lv2_1) and (inStream_b_V_data_0_ack_out = ap_const_logic_0)) or ((inStream_b_V_data_0_state = ap_const_lv2_3) and (inStream_b_V_data_0_ack_out = ap_const_logic_0) and (inStream_b_V_data_0_vld_in = ap_const_logic_1)))) then 
                    inStream_b_V_data_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_b_V_data_0_vld_in = ap_const_logic_0) and (inStream_b_V_data_0_ack_out = ap_const_logic_1))) and not(((inStream_b_V_data_0_ack_out = ap_const_logic_0) and (inStream_b_V_data_0_vld_in = ap_const_logic_1))) and (inStream_b_V_data_0_state = ap_const_lv2_3)) or ((inStream_b_V_data_0_state = ap_const_lv2_1) and (inStream_b_V_data_0_ack_out = ap_const_logic_1)) or ((inStream_b_V_data_0_state = ap_const_lv2_2) and (inStream_b_V_data_0_vld_in = ap_const_logic_1)))) then 
                    inStream_b_V_data_0_state <= ap_const_lv2_3;
                else 
                    inStream_b_V_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_b_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_b_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_b_V_dest_V_0_state = ap_const_lv2_2) and (inStream_b_V_dest_V_0_vld_in = ap_const_logic_0)) or ((inStream_b_V_dest_V_0_state = ap_const_lv2_3) and (inStream_b_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_b_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_b_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_b_V_dest_V_0_state = ap_const_lv2_1) and (inStream_b_V_dest_V_0_ack_out = ap_const_logic_0)) or ((inStream_b_V_dest_V_0_state = ap_const_lv2_3) and (inStream_b_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_b_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_b_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_b_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_b_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((inStream_b_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_b_V_dest_V_0_vld_in = ap_const_logic_1))) and (inStream_b_V_dest_V_0_state = ap_const_lv2_3)) or ((inStream_b_V_dest_V_0_state = ap_const_lv2_1) and (inStream_b_V_dest_V_0_ack_out = ap_const_logic_1)) or ((inStream_b_V_dest_V_0_state = ap_const_lv2_2) and (inStream_b_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_b_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_b_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_data_1_ack_out = ap_const_logic_1) and (outStream_V_data_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_data_1_sel_rd <= not(outStream_V_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_data_1_ack_in = ap_const_logic_1) and (outStream_V_data_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_data_1_sel_wr <= not(outStream_V_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_data_1_state = ap_const_lv2_2) and (outStream_V_data_1_vld_in = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_V_data_1_vld_in = ap_const_logic_0) and (outStream_V_data_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_data_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_data_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_data_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_data_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_data_1_vld_in = ap_const_logic_0) and (outStream_V_data_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_data_1_vld_in = ap_const_logic_1))) and (outStream_V_data_1_state = ap_const_lv2_3)) or ((outStream_V_data_1_state = ap_const_lv2_1) and (outStream_V_data_1_ack_out = ap_const_logic_1)) or ((outStream_V_data_1_state = ap_const_lv2_2) and (outStream_V_data_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_data_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_dest_V_1_ack_out = ap_const_logic_1) and (outStream_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_dest_V_1_sel_rd <= not(outStream_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_dest_V_1_ack_in = ap_const_logic_1) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_dest_V_1_sel_wr <= not(outStream_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_dest_V_1_state = ap_const_lv2_2) and (outStream_V_dest_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_V_dest_V_1_vld_in = ap_const_logic_0) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_dest_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_dest_V_1_vld_in = ap_const_logic_0) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1))) and (outStream_V_dest_V_1_state = ap_const_lv2_3)) or ((outStream_V_dest_V_1_state = ap_const_lv2_1) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_dest_V_1_state = ap_const_lv2_2) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_id_V_1_ack_out = ap_const_logic_1) and (outStream_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_id_V_1_sel_rd <= not(outStream_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_id_V_1_ack_in = ap_const_logic_1) and (outStream_V_id_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_id_V_1_sel_wr <= not(outStream_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_id_V_1_state = ap_const_lv2_2) and (outStream_V_id_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_V_id_V_1_vld_in = ap_const_logic_0) and (outStream_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_id_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_id_V_1_vld_in = ap_const_logic_0) and (outStream_V_id_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_id_V_1_vld_in = ap_const_logic_1))) and (outStream_V_id_V_1_state = ap_const_lv2_3)) or ((outStream_V_id_V_1_state = ap_const_lv2_1) and (outStream_V_id_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_id_V_1_state = ap_const_lv2_2) and (outStream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_keep_V_1_ack_out = ap_const_logic_1) and (outStream_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_keep_V_1_sel_rd <= not(outStream_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_keep_V_1_ack_in = ap_const_logic_1) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_keep_V_1_sel_wr <= not(outStream_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_keep_V_1_state = ap_const_lv2_2) and (outStream_V_keep_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_V_keep_V_1_vld_in = ap_const_logic_0) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_keep_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_keep_V_1_vld_in = ap_const_logic_0) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1))) and (outStream_V_keep_V_1_state = ap_const_lv2_3)) or ((outStream_V_keep_V_1_state = ap_const_lv2_1) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_keep_V_1_state = ap_const_lv2_2) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_last_V_1_ack_out = ap_const_logic_1) and (outStream_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_last_V_1_sel_rd <= not(outStream_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_last_V_1_ack_in = ap_const_logic_1) and (outStream_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_last_V_1_sel_wr <= not(outStream_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_last_V_1_state = ap_const_lv2_2) and (outStream_V_last_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_V_last_V_1_vld_in = ap_const_logic_0) and (outStream_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_last_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_last_V_1_vld_in = ap_const_logic_0) and (outStream_V_last_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_last_V_1_vld_in = ap_const_logic_1))) and (outStream_V_last_V_1_state = ap_const_lv2_3)) or ((outStream_V_last_V_1_state = ap_const_lv2_1) and (outStream_V_last_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_last_V_1_state = ap_const_lv2_2) and (outStream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_strb_V_1_ack_out = ap_const_logic_1) and (outStream_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_strb_V_1_sel_rd <= not(outStream_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_strb_V_1_ack_in = ap_const_logic_1) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_strb_V_1_sel_wr <= not(outStream_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_strb_V_1_state = ap_const_lv2_2) and (outStream_V_strb_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_V_strb_V_1_vld_in = ap_const_logic_0) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_strb_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_strb_V_1_vld_in = ap_const_logic_0) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1))) and (outStream_V_strb_V_1_state = ap_const_lv2_3)) or ((outStream_V_strb_V_1_state = ap_const_lv2_1) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_strb_V_1_state = ap_const_lv2_2) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_user_V_1_ack_out = ap_const_logic_1) and (outStream_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_user_V_1_sel_rd <= not(outStream_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_user_V_1_ack_in = ap_const_logic_1) and (outStream_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_user_V_1_sel_wr <= not(outStream_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_user_V_1_state = ap_const_lv2_2) and (outStream_V_user_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_V_user_V_1_vld_in = ap_const_logic_0) and (outStream_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_user_V_1_state = ap_const_lv2_1) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0) and (outStream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_user_V_1_vld_in = ap_const_logic_0) and (outStream_V_user_V_1_ack_out = ap_const_logic_1))) and not(((outStream_TREADY = ap_const_logic_0) and (outStream_V_user_V_1_vld_in = ap_const_logic_1))) and (outStream_V_user_V_1_state = ap_const_lv2_3)) or ((outStream_V_user_V_1_state = ap_const_lv2_1) and (outStream_V_user_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_user_V_1_state = ap_const_lv2_2) and (outStream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_1_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_op_assign_1_reg_381 <= select_ln43_fu_712_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_op_assign_1_reg_381 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_op_assign_2_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_op_assign_2_reg_392 <= input_ch_idx_fu_1186_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_op_assign_2_reg_392 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_op_assign_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_op_assign_reg_359 <= select_ln40_fu_661_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_op_assign_reg_359 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten17_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten17_reg_348 <= add_ln40_fu_594_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten17_reg_348 <= ap_const_lv22_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten_reg_370 <= select_ln43_1_fu_1198_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten_reg_370 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    t_V_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((inStream_b_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op64_read_state2 = ap_const_boolean_1))) and (icmp_ln23_fu_476_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_reg_337 <= i_V_fu_481_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_V_reg_337 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln1354_1_reg_1281 <= add_ln1354_1_fu_542_p2;
                add_ln1354_reg_1275 <= add_ln1354_fu_533_p2;
                icmp_ln46_reg_1297 <= icmp_ln46_fu_560_p2;
                icmp_ln73_3_reg_1292 <= icmp_ln73_3_fu_554_p2;
                mul_ln1354_1_reg_1287 <= mul_ln1354_1_fu_1219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                bias_en_V_read_reg_1225 <= bias_en_V;
                fold_input_ch_V_read_reg_1241 <= fold_input_ch_V;
                input_h_V_read_reg_1255 <= input_h_V;
                input_w_V_read_reg_1249 <= input_w_V;
                leaky_V_read_reg_1233 <= leaky_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln40_reg_1302 <= icmp_ln40_fu_589_p2;
                icmp_ln40_reg_1302_pp1_iter1_reg <= icmp_ln40_reg_1302;
                tmp_dest_V_reg_1341_pp1_iter1_reg <= tmp_dest_V_reg_1341;
                tmp_id_V_reg_1336_pp1_iter1_reg <= tmp_id_V_reg_1336;
                tmp_keep_V_reg_1321_pp1_iter1_reg <= tmp_keep_V_reg_1321;
                tmp_last_V_reg_1386_pp1_iter1_reg <= tmp_last_V_reg_1386;
                tmp_strb_V_reg_1326_pp1_iter1_reg <= tmp_strb_V_reg_1326;
                tmp_user_V_reg_1331_pp1_iter1_reg <= tmp_user_V_reg_1331;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln40_reg_1302_pp1_iter2_reg <= icmp_ln40_reg_1302_pp1_iter1_reg;
                icmp_ln40_reg_1302_pp1_iter3_reg <= icmp_ln40_reg_1302_pp1_iter2_reg;
                icmp_ln40_reg_1302_pp1_iter4_reg <= icmp_ln40_reg_1302_pp1_iter3_reg;
                tmp_dest_V_reg_1341_pp1_iter2_reg <= tmp_dest_V_reg_1341_pp1_iter1_reg;
                tmp_dest_V_reg_1341_pp1_iter3_reg <= tmp_dest_V_reg_1341_pp1_iter2_reg;
                tmp_id_V_reg_1336_pp1_iter2_reg <= tmp_id_V_reg_1336_pp1_iter1_reg;
                tmp_id_V_reg_1336_pp1_iter3_reg <= tmp_id_V_reg_1336_pp1_iter2_reg;
                tmp_keep_V_reg_1321_pp1_iter2_reg <= tmp_keep_V_reg_1321_pp1_iter1_reg;
                tmp_keep_V_reg_1321_pp1_iter3_reg <= tmp_keep_V_reg_1321_pp1_iter2_reg;
                tmp_last_V_reg_1386_pp1_iter2_reg <= tmp_last_V_reg_1386_pp1_iter1_reg;
                tmp_last_V_reg_1386_pp1_iter3_reg <= tmp_last_V_reg_1386_pp1_iter2_reg;
                tmp_strb_V_reg_1326_pp1_iter2_reg <= tmp_strb_V_reg_1326_pp1_iter1_reg;
                tmp_strb_V_reg_1326_pp1_iter3_reg <= tmp_strb_V_reg_1326_pp1_iter2_reg;
                tmp_user_V_reg_1331_pp1_iter2_reg <= tmp_user_V_reg_1331_pp1_iter1_reg;
                tmp_user_V_reg_1331_pp1_iter3_reg <= tmp_user_V_reg_1331_pp1_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_a_V_data_0_load_A = ap_const_logic_1)) then
                inStream_a_V_data_0_payload_A <= inStream_a_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_a_V_data_0_load_B = ap_const_logic_1)) then
                inStream_a_V_data_0_payload_B <= inStream_a_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_a_V_dest_V_0_load_A = ap_const_logic_1)) then
                inStream_a_V_dest_V_0_payload_A <= inStream_a_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_a_V_dest_V_0_load_B = ap_const_logic_1)) then
                inStream_a_V_dest_V_0_payload_B <= inStream_a_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_a_V_id_V_0_load_A = ap_const_logic_1)) then
                inStream_a_V_id_V_0_payload_A <= inStream_a_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_a_V_id_V_0_load_B = ap_const_logic_1)) then
                inStream_a_V_id_V_0_payload_B <= inStream_a_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_a_V_keep_V_0_load_A = ap_const_logic_1)) then
                inStream_a_V_keep_V_0_payload_A <= inStream_a_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_a_V_keep_V_0_load_B = ap_const_logic_1)) then
                inStream_a_V_keep_V_0_payload_B <= inStream_a_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_a_V_strb_V_0_load_A = ap_const_logic_1)) then
                inStream_a_V_strb_V_0_payload_A <= inStream_a_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_a_V_strb_V_0_load_B = ap_const_logic_1)) then
                inStream_a_V_strb_V_0_payload_B <= inStream_a_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_a_V_user_V_0_load_A = ap_const_logic_1)) then
                inStream_a_V_user_V_0_payload_A <= inStream_a_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_a_V_user_V_0_load_B = ap_const_logic_1)) then
                inStream_a_V_user_V_0_payload_B <= inStream_a_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_b_V_data_0_load_A = ap_const_logic_1)) then
                inStream_b_V_data_0_payload_A <= inStream_b_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_b_V_data_0_load_B = ap_const_logic_1)) then
                inStream_b_V_data_0_payload_B <= inStream_b_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mul_ln1354_reg_1269 <= mul_ln1354_fu_524_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_data_1_load_A = ap_const_logic_1)) then
                outStream_V_data_1_payload_A <= tmp_data_3_fu_1206_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_data_1_load_B = ap_const_logic_1)) then
                outStream_V_data_1_payload_B <= tmp_data_3_fu_1206_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_dest_V_1_load_A = ap_const_logic_1)) then
                outStream_V_dest_V_1_payload_A <= tmp_dest_V_reg_1341_pp1_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_dest_V_1_load_B = ap_const_logic_1)) then
                outStream_V_dest_V_1_payload_B <= tmp_dest_V_reg_1341_pp1_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_id_V_1_load_A = ap_const_logic_1)) then
                outStream_V_id_V_1_payload_A <= tmp_id_V_reg_1336_pp1_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_id_V_1_load_B = ap_const_logic_1)) then
                outStream_V_id_V_1_payload_B <= tmp_id_V_reg_1336_pp1_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_keep_V_1_load_A = ap_const_logic_1)) then
                outStream_V_keep_V_1_payload_A <= tmp_keep_V_reg_1321_pp1_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_keep_V_1_load_B = ap_const_logic_1)) then
                outStream_V_keep_V_1_payload_B <= tmp_keep_V_reg_1321_pp1_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_last_V_1_load_A = ap_const_logic_1)) then
                outStream_V_last_V_1_payload_A <= tmp_last_V_reg_1386_pp1_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_last_V_1_load_B = ap_const_logic_1)) then
                outStream_V_last_V_1_payload_B <= tmp_last_V_reg_1386_pp1_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_strb_V_1_load_A = ap_const_logic_1)) then
                outStream_V_strb_V_1_payload_A <= tmp_strb_V_reg_1326_pp1_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_strb_V_1_load_B = ap_const_logic_1)) then
                outStream_V_strb_V_1_payload_B <= tmp_strb_V_reg_1326_pp1_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_user_V_1_load_A = ap_const_logic_1)) then
                outStream_V_user_V_1_payload_A <= tmp_user_V_reg_1331_pp1_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_user_V_1_load_B = ap_const_logic_1)) then
                outStream_V_user_V_1_payload_B <= tmp_user_V_reg_1331_pp1_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                output_acc_0_V_reg_1346 <= output_acc_0_V_fu_864_p3;
                output_acc_1_V_reg_1351 <= output_acc_1_V_fu_954_p3;
                output_acc_2_V_reg_1356 <= output_acc_2_V_fu_1044_p3;
                output_acc_3_V_reg_1361 <= output_acc_3_V_fu_1134_p3;
                tmp_dest_V_reg_1341 <= inStream_a_V_dest_V_0_data_out;
                tmp_id_V_reg_1336 <= inStream_a_V_id_V_0_data_out;
                tmp_keep_V_reg_1321 <= inStream_a_V_keep_V_0_data_out;
                tmp_last_V_reg_1386 <= tmp_last_V_fu_1180_p2;
                tmp_strb_V_reg_1326 <= inStream_a_V_strb_V_0_data_out;
                tmp_user_V_reg_1331 <= inStream_a_V_user_V_0_data_out;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, inStream_b_V_data_0_vld_out, outStream_TREADY, outStream_V_data_1_state, outStream_V_keep_V_1_state, outStream_V_strb_V_1_state, outStream_V_user_V_1_state, outStream_V_last_V_1_state, outStream_V_id_V_1_state, outStream_V_dest_V_1_state, ap_enable_reg_pp1_iter0, icmp_ln40_fu_589_p2, ap_CS_fsm_state2, icmp_ln23_fu_476_p2, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_predicate_op64_read_state2, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_subdone, ap_CS_fsm_state11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((inStream_b_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op64_read_state2 = ap_const_boolean_1))) and (icmp_ln23_fu_476_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((inStream_b_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op64_read_state2 = ap_const_boolean_1))) and (icmp_ln23_fu_476_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln40_fu_589_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0)) or ((icmp_ln40_fu_589_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                if ((not(((outStream_V_strb_V_1_state = ap_const_lv2_1) or (outStream_V_keep_V_1_state = ap_const_lv2_1) or (outStream_V_data_1_state = ap_const_lv2_1) or (outStream_V_dest_V_1_state = ap_const_lv2_1) or (outStream_V_id_V_1_state = ap_const_lv2_1) or (outStream_V_last_V_1_state = ap_const_lv2_1) or (outStream_V_user_V_1_state = ap_const_lv2_1) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln1354_1_fu_542_p2 <= std_logic_vector(unsigned(zext_ln1354_1_fu_539_p1) + unsigned(ap_const_lv10_3FF));
    add_ln1354_fu_533_p2 <= std_logic_vector(unsigned(zext_ln1354_fu_530_p1) + unsigned(ap_const_lv10_3FF));
    add_ln40_1_fu_613_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(i_op_assign_reg_359));
    add_ln40_fu_594_p2 <= std_logic_vector(unsigned(indvar_flatten17_reg_348) + unsigned(ap_const_lv22_1));
    add_ln43_1_fu_1192_p2 <= std_logic_vector(unsigned(ap_const_lv13_1) + unsigned(indvar_flatten_reg_370));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(5);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, ap_enable_reg_pp1_iter0, icmp_ln40_fu_589_p2)
    begin
                ap_block_pp1_stage0_01001 <= ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0))));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, ap_enable_reg_pp1_iter0, icmp_ln40_fu_589_p2, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_block_state9_io, ap_block_state10_io)
    begin
                ap_block_pp1_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state10_io) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)))));
    end process;


    ap_block_pp1_stage0_11001_ignoreCallOp222_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, ap_enable_reg_pp1_iter0, icmp_ln40_fu_589_p2, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_block_state9_io, ap_block_state10_io)
    begin
                ap_block_pp1_stage0_11001_ignoreCallOp222 <= (((ap_const_boolean_1 = ap_block_state10_io) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)))));
    end process;


    ap_block_pp1_stage0_11001_ignoreCallOp224_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, ap_enable_reg_pp1_iter0, icmp_ln40_fu_589_p2, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_block_state9_io, ap_block_state10_io)
    begin
                ap_block_pp1_stage0_11001_ignoreCallOp224 <= (((ap_const_boolean_1 = ap_block_state10_io) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)))));
    end process;


    ap_block_pp1_stage0_11001_ignoreCallOp226_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, ap_enable_reg_pp1_iter0, icmp_ln40_fu_589_p2, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_block_state9_io, ap_block_state10_io)
    begin
                ap_block_pp1_stage0_11001_ignoreCallOp226 <= (((ap_const_boolean_1 = ap_block_state10_io) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)))));
    end process;


    ap_block_pp1_stage0_11001_ignoreCallOp228_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, ap_enable_reg_pp1_iter0, icmp_ln40_fu_589_p2, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_block_state9_io, ap_block_state10_io)
    begin
                ap_block_pp1_stage0_11001_ignoreCallOp228 <= (((ap_const_boolean_1 = ap_block_state10_io) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)))));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, ap_enable_reg_pp1_iter0, icmp_ln40_fu_589_p2, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_block_state9_io, ap_block_state10_io)
    begin
                ap_block_pp1_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state10_io) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)))));
    end process;


    ap_block_state10_io_assign_proc : process(outStream_V_data_1_ack_in, icmp_ln40_reg_1302_pp1_iter4_reg)
    begin
                ap_block_state10_io <= ((icmp_ln40_reg_1302_pp1_iter4_reg = ap_const_lv1_0) and (outStream_V_data_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state10_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter5_ignore_call102 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter5_ignore_call107 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter5_ignore_call110 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter5_ignore_call99 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_assign_proc : process(outStream_TREADY, outStream_V_data_1_state, outStream_V_keep_V_1_state, outStream_V_strb_V_1_state, outStream_V_user_V_1_state, outStream_V_last_V_1_state, outStream_V_id_V_1_state, outStream_V_dest_V_1_state)
    begin
                ap_block_state11 <= ((outStream_V_strb_V_1_state = ap_const_lv2_1) or (outStream_V_keep_V_1_state = ap_const_lv2_1) or (outStream_V_data_1_state = ap_const_lv2_1) or (outStream_V_dest_V_1_state = ap_const_lv2_1) or (outStream_V_id_V_1_state = ap_const_lv2_1) or (outStream_V_last_V_1_state = ap_const_lv2_1) or (outStream_V_user_V_1_state = ap_const_lv2_1) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)));
    end process;


    ap_block_state2_assign_proc : process(inStream_b_V_data_0_vld_out, ap_predicate_op64_read_state2)
    begin
                ap_block_state2 <= ((inStream_b_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op64_read_state2 = ap_const_boolean_1));
    end process;


    ap_block_state5_pp1_stage0_iter0_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, icmp_ln40_fu_589_p2)
    begin
                ap_block_state5_pp1_stage0_iter0 <= (((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)));
    end process;


    ap_block_state5_pp1_stage0_iter0_ignore_call102_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, icmp_ln40_fu_589_p2)
    begin
                ap_block_state5_pp1_stage0_iter0_ignore_call102 <= (((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)));
    end process;


    ap_block_state5_pp1_stage0_iter0_ignore_call107_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, icmp_ln40_fu_589_p2)
    begin
                ap_block_state5_pp1_stage0_iter0_ignore_call107 <= (((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)));
    end process;


    ap_block_state5_pp1_stage0_iter0_ignore_call110_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, icmp_ln40_fu_589_p2)
    begin
                ap_block_state5_pp1_stage0_iter0_ignore_call110 <= (((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)));
    end process;


    ap_block_state5_pp1_stage0_iter0_ignore_call99_assign_proc : process(inStream_a_V_data_0_vld_out, inStream_b_V_data_0_vld_out, icmp_ln40_fu_589_p2)
    begin
                ap_block_state5_pp1_stage0_iter0_ignore_call99 <= (((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (inStream_a_V_data_0_vld_out = ap_const_logic_0)) or ((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (inStream_b_V_data_0_vld_out = ap_const_logic_0)));
    end process;

        ap_block_state6_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter1_ignore_call102 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter1_ignore_call107 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter1_ignore_call110 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter1_ignore_call99 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter2_ignore_call102 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter2_ignore_call107 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter2_ignore_call110 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter2_ignore_call99 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter3_ignore_call102 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter3_ignore_call107 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter3_ignore_call110 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter3_ignore_call99 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_io_assign_proc : process(outStream_V_data_1_ack_in, icmp_ln40_reg_1302_pp1_iter3_reg)
    begin
                ap_block_state9_io <= ((icmp_ln40_reg_1302_pp1_iter3_reg = ap_const_lv1_0) and (outStream_V_data_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state9_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter4_ignore_call102 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter4_ignore_call107 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter4_ignore_call110 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter4_ignore_call99 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln40_fu_589_p2)
    begin
        if ((icmp_ln40_fu_589_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(outStream_TREADY, outStream_V_data_1_state, outStream_V_keep_V_1_state, outStream_V_strb_V_1_state, outStream_V_user_V_1_state, outStream_V_last_V_1_state, outStream_V_id_V_1_state, outStream_V_dest_V_1_state, ap_CS_fsm_state11)
    begin
        if ((not(((outStream_V_strb_V_1_state = ap_const_lv2_1) or (outStream_V_keep_V_1_state = ap_const_lv2_1) or (outStream_V_data_1_state = ap_const_lv2_1) or (outStream_V_dest_V_1_state = ap_const_lv2_1) or (outStream_V_id_V_1_state = ap_const_lv2_1) or (outStream_V_last_V_1_state = ap_const_lv2_1) or (outStream_V_user_V_1_state = ap_const_lv2_1) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op64_read_state2_assign_proc : process(icmp_ln23_fu_476_p2, bias_en_V_read_reg_1225)
    begin
                ap_predicate_op64_read_state2 <= ((bias_en_V_read_reg_1225 = ap_const_lv1_1) and (icmp_ln23_fu_476_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(outStream_TREADY, outStream_V_data_1_state, outStream_V_keep_V_1_state, outStream_V_strb_V_1_state, outStream_V_user_V_1_state, outStream_V_last_V_1_state, outStream_V_id_V_1_state, outStream_V_dest_V_1_state, ap_CS_fsm_state11)
    begin
        if ((not(((outStream_V_strb_V_1_state = ap_const_lv2_1) or (outStream_V_keep_V_1_state = ap_const_lv2_1) or (outStream_V_data_1_state = ap_const_lv2_1) or (outStream_V_dest_V_1_state = ap_const_lv2_1) or (outStream_V_id_V_1_state = ap_const_lv2_1) or (outStream_V_last_V_1_state = ap_const_lv2_1) or (outStream_V_user_V_1_state = ap_const_lv2_1) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_data_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    col_idx_fu_669_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(select_ln1598_fu_605_p3));
    grp_fu_443_p4 <= inStream_b_V_data_0_data_out(31 downto 16);
    grp_fu_454_p4 <= inStream_b_V_data_0_data_out(47 downto 32);
    grp_fu_465_p4 <= inStream_b_V_data_0_data_out(63 downto 48);

    grp_post_process_unit_fu_403_ap_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001_ignoreCallOp222)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001_ignoreCallOp222))) then 
            grp_post_process_unit_fu_403_ap_ce <= ap_const_logic_1;
        else 
            grp_post_process_unit_fu_403_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_post_process_unit_fu_412_ap_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001_ignoreCallOp224)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001_ignoreCallOp224))) then 
            grp_post_process_unit_fu_412_ap_ce <= ap_const_logic_1;
        else 
            grp_post_process_unit_fu_412_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_post_process_unit_fu_421_ap_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001_ignoreCallOp226)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001_ignoreCallOp226))) then 
            grp_post_process_unit_fu_421_ap_ce <= ap_const_logic_1;
        else 
            grp_post_process_unit_fu_421_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_post_process_unit_fu_430_ap_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001_ignoreCallOp228)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001_ignoreCallOp228))) then 
            grp_post_process_unit_fu_430_ap_ce <= ap_const_logic_1;
        else 
            grp_post_process_unit_fu_430_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    i_V_fu_481_p2 <= std_logic_vector(unsigned(t_V_reg_337) + unsigned(ap_const_lv4_1));
    icmp_ln23_fu_476_p2 <= "1" when (t_V_reg_337 = fold_input_ch_V_read_reg_1241) else "0";
    icmp_ln40_fu_589_p2 <= "1" when (indvar_flatten17_reg_348 = mul_ln1354_1_reg_1287) else "0";
    icmp_ln43_fu_600_p2 <= "1" when (indvar_flatten_reg_370 = mul_ln1354_reg_1269) else "0";
    icmp_ln46_1_fu_649_p2 <= "1" when (i_op_assign_2_reg_392 = fold_input_ch_V_read_reg_1241) else "0";
    icmp_ln46_fu_560_p2 <= "1" when (fold_input_ch_V_read_reg_1241 = ap_const_lv4_0) else "0";
    icmp_ln73_1_fu_578_p2 <= "0" when (zext_ln46_fu_574_p1 = add_ln1354_reg_1275) else "1";
    icmp_ln73_2_fu_569_p2 <= "0" when (zext_ln43_fu_565_p1 = add_ln1354_1_reg_1281) else "1";
    icmp_ln73_3_fu_554_p2 <= "0" when (add_ln1354_fu_533_p2 = ap_const_lv10_0) else "1";
    icmp_ln73_4_fu_623_p2 <= "0" when (zext_ln43_1_fu_619_p1 = add_ln1354_1_reg_1281) else "1";
    icmp_ln73_5_fu_693_p2 <= "0" when (zext_ln46_1_fu_689_p1 = add_ln1354_reg_1275) else "1";
    icmp_ln73_fu_1168_p2 <= "0" when (select_ln1598_4_fu_681_p3 = ap_const_lv4_7) else "1";

    inStream_a_TDATA_blk_n_assign_proc : process(inStream_a_V_data_0_state, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, icmp_ln40_fu_589_p2)
    begin
        if (((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            inStream_a_TDATA_blk_n <= inStream_a_V_data_0_state(0);
        else 
            inStream_a_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inStream_a_TREADY <= inStream_a_V_dest_V_0_state(1);
    inStream_a_V_data_0_ack_in <= inStream_a_V_data_0_state(1);

    inStream_a_V_data_0_ack_out_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, icmp_ln40_fu_589_p2, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            inStream_a_V_data_0_ack_out <= ap_const_logic_1;
        else 
            inStream_a_V_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_a_V_data_0_data_out_assign_proc : process(inStream_a_V_data_0_payload_A, inStream_a_V_data_0_payload_B, inStream_a_V_data_0_sel)
    begin
        if ((inStream_a_V_data_0_sel = ap_const_logic_1)) then 
            inStream_a_V_data_0_data_out <= inStream_a_V_data_0_payload_B;
        else 
            inStream_a_V_data_0_data_out <= inStream_a_V_data_0_payload_A;
        end if; 
    end process;

    inStream_a_V_data_0_load_A <= (inStream_a_V_data_0_state_cmp_full and not(inStream_a_V_data_0_sel_wr));
    inStream_a_V_data_0_load_B <= (inStream_a_V_data_0_state_cmp_full and inStream_a_V_data_0_sel_wr);
    inStream_a_V_data_0_sel <= inStream_a_V_data_0_sel_rd;
    inStream_a_V_data_0_state_cmp_full <= '0' when (inStream_a_V_data_0_state = ap_const_lv2_1) else '1';
    inStream_a_V_data_0_vld_in <= inStream_a_TVALID;
    inStream_a_V_data_0_vld_out <= inStream_a_V_data_0_state(0);
    inStream_a_V_dest_V_0_ack_in <= inStream_a_V_dest_V_0_state(1);

    inStream_a_V_dest_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, icmp_ln40_fu_589_p2, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            inStream_a_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_a_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_a_V_dest_V_0_data_out_assign_proc : process(inStream_a_V_dest_V_0_payload_A, inStream_a_V_dest_V_0_payload_B, inStream_a_V_dest_V_0_sel)
    begin
        if ((inStream_a_V_dest_V_0_sel = ap_const_logic_1)) then 
            inStream_a_V_dest_V_0_data_out <= inStream_a_V_dest_V_0_payload_B;
        else 
            inStream_a_V_dest_V_0_data_out <= inStream_a_V_dest_V_0_payload_A;
        end if; 
    end process;

    inStream_a_V_dest_V_0_load_A <= (inStream_a_V_dest_V_0_state_cmp_full and not(inStream_a_V_dest_V_0_sel_wr));
    inStream_a_V_dest_V_0_load_B <= (inStream_a_V_dest_V_0_state_cmp_full and inStream_a_V_dest_V_0_sel_wr);
    inStream_a_V_dest_V_0_sel <= inStream_a_V_dest_V_0_sel_rd;
    inStream_a_V_dest_V_0_state_cmp_full <= '0' when (inStream_a_V_dest_V_0_state = ap_const_lv2_1) else '1';
    inStream_a_V_dest_V_0_vld_in <= inStream_a_TVALID;
    inStream_a_V_dest_V_0_vld_out <= inStream_a_V_dest_V_0_state(0);
    inStream_a_V_id_V_0_ack_in <= inStream_a_V_id_V_0_state(1);

    inStream_a_V_id_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, icmp_ln40_fu_589_p2, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            inStream_a_V_id_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_a_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_a_V_id_V_0_data_out_assign_proc : process(inStream_a_V_id_V_0_payload_A, inStream_a_V_id_V_0_payload_B, inStream_a_V_id_V_0_sel)
    begin
        if ((inStream_a_V_id_V_0_sel = ap_const_logic_1)) then 
            inStream_a_V_id_V_0_data_out <= inStream_a_V_id_V_0_payload_B;
        else 
            inStream_a_V_id_V_0_data_out <= inStream_a_V_id_V_0_payload_A;
        end if; 
    end process;

    inStream_a_V_id_V_0_load_A <= (inStream_a_V_id_V_0_state_cmp_full and not(inStream_a_V_id_V_0_sel_wr));
    inStream_a_V_id_V_0_load_B <= (inStream_a_V_id_V_0_state_cmp_full and inStream_a_V_id_V_0_sel_wr);
    inStream_a_V_id_V_0_sel <= inStream_a_V_id_V_0_sel_rd;
    inStream_a_V_id_V_0_state_cmp_full <= '0' when (inStream_a_V_id_V_0_state = ap_const_lv2_1) else '1';
    inStream_a_V_id_V_0_vld_in <= inStream_a_TVALID;
    inStream_a_V_id_V_0_vld_out <= inStream_a_V_id_V_0_state(0);
    inStream_a_V_keep_V_0_ack_in <= inStream_a_V_keep_V_0_state(1);

    inStream_a_V_keep_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, icmp_ln40_fu_589_p2, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            inStream_a_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_a_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_a_V_keep_V_0_data_out_assign_proc : process(inStream_a_V_keep_V_0_payload_A, inStream_a_V_keep_V_0_payload_B, inStream_a_V_keep_V_0_sel)
    begin
        if ((inStream_a_V_keep_V_0_sel = ap_const_logic_1)) then 
            inStream_a_V_keep_V_0_data_out <= inStream_a_V_keep_V_0_payload_B;
        else 
            inStream_a_V_keep_V_0_data_out <= inStream_a_V_keep_V_0_payload_A;
        end if; 
    end process;

    inStream_a_V_keep_V_0_load_A <= (inStream_a_V_keep_V_0_state_cmp_full and not(inStream_a_V_keep_V_0_sel_wr));
    inStream_a_V_keep_V_0_load_B <= (inStream_a_V_keep_V_0_state_cmp_full and inStream_a_V_keep_V_0_sel_wr);
    inStream_a_V_keep_V_0_sel <= inStream_a_V_keep_V_0_sel_rd;
    inStream_a_V_keep_V_0_state_cmp_full <= '0' when (inStream_a_V_keep_V_0_state = ap_const_lv2_1) else '1';
    inStream_a_V_keep_V_0_vld_in <= inStream_a_TVALID;
    inStream_a_V_keep_V_0_vld_out <= inStream_a_V_keep_V_0_state(0);
    inStream_a_V_strb_V_0_ack_in <= inStream_a_V_strb_V_0_state(1);

    inStream_a_V_strb_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, icmp_ln40_fu_589_p2, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            inStream_a_V_strb_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_a_V_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_a_V_strb_V_0_data_out_assign_proc : process(inStream_a_V_strb_V_0_payload_A, inStream_a_V_strb_V_0_payload_B, inStream_a_V_strb_V_0_sel)
    begin
        if ((inStream_a_V_strb_V_0_sel = ap_const_logic_1)) then 
            inStream_a_V_strb_V_0_data_out <= inStream_a_V_strb_V_0_payload_B;
        else 
            inStream_a_V_strb_V_0_data_out <= inStream_a_V_strb_V_0_payload_A;
        end if; 
    end process;

    inStream_a_V_strb_V_0_load_A <= (inStream_a_V_strb_V_0_state_cmp_full and not(inStream_a_V_strb_V_0_sel_wr));
    inStream_a_V_strb_V_0_load_B <= (inStream_a_V_strb_V_0_state_cmp_full and inStream_a_V_strb_V_0_sel_wr);
    inStream_a_V_strb_V_0_sel <= inStream_a_V_strb_V_0_sel_rd;
    inStream_a_V_strb_V_0_state_cmp_full <= '0' when (inStream_a_V_strb_V_0_state = ap_const_lv2_1) else '1';
    inStream_a_V_strb_V_0_vld_in <= inStream_a_TVALID;
    inStream_a_V_strb_V_0_vld_out <= inStream_a_V_strb_V_0_state(0);
    inStream_a_V_user_V_0_ack_in <= inStream_a_V_user_V_0_state(1);

    inStream_a_V_user_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, icmp_ln40_fu_589_p2, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            inStream_a_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_a_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_a_V_user_V_0_data_out_assign_proc : process(inStream_a_V_user_V_0_payload_A, inStream_a_V_user_V_0_payload_B, inStream_a_V_user_V_0_sel)
    begin
        if ((inStream_a_V_user_V_0_sel = ap_const_logic_1)) then 
            inStream_a_V_user_V_0_data_out <= inStream_a_V_user_V_0_payload_B;
        else 
            inStream_a_V_user_V_0_data_out <= inStream_a_V_user_V_0_payload_A;
        end if; 
    end process;

    inStream_a_V_user_V_0_load_A <= (inStream_a_V_user_V_0_state_cmp_full and not(inStream_a_V_user_V_0_sel_wr));
    inStream_a_V_user_V_0_load_B <= (inStream_a_V_user_V_0_state_cmp_full and inStream_a_V_user_V_0_sel_wr);
    inStream_a_V_user_V_0_sel <= inStream_a_V_user_V_0_sel_rd;
    inStream_a_V_user_V_0_state_cmp_full <= '0' when (inStream_a_V_user_V_0_state = ap_const_lv2_1) else '1';
    inStream_a_V_user_V_0_vld_in <= inStream_a_TVALID;
    inStream_a_V_user_V_0_vld_out <= inStream_a_V_user_V_0_state(0);

    inStream_b_TDATA_blk_n_assign_proc : process(inStream_b_V_data_0_state, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, icmp_ln40_fu_589_p2, ap_CS_fsm_state2, icmp_ln23_fu_476_p2, bias_en_V_read_reg_1225)
    begin
        if ((((bias_en_V_read_reg_1225 = ap_const_lv1_1) and (icmp_ln23_fu_476_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0)))) then 
            inStream_b_TDATA_blk_n <= inStream_b_V_data_0_state(0);
        else 
            inStream_b_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inStream_b_TREADY <= inStream_b_V_dest_V_0_state(1);
    inStream_b_V_data_0_ack_in <= inStream_b_V_data_0_state(1);

    inStream_b_V_data_0_ack_out_assign_proc : process(inStream_b_V_data_0_vld_out, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, icmp_ln40_fu_589_p2, ap_CS_fsm_state2, ap_predicate_op64_read_state2, ap_block_pp1_stage0_11001)
    begin
        if (((not(((inStream_b_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op64_read_state2 = ap_const_boolean_1))) and (ap_predicate_op64_read_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            inStream_b_V_data_0_ack_out <= ap_const_logic_1;
        else 
            inStream_b_V_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_b_V_data_0_data_out_assign_proc : process(inStream_b_V_data_0_payload_A, inStream_b_V_data_0_payload_B, inStream_b_V_data_0_sel)
    begin
        if ((inStream_b_V_data_0_sel = ap_const_logic_1)) then 
            inStream_b_V_data_0_data_out <= inStream_b_V_data_0_payload_B;
        else 
            inStream_b_V_data_0_data_out <= inStream_b_V_data_0_payload_A;
        end if; 
    end process;

    inStream_b_V_data_0_load_A <= (inStream_b_V_data_0_state_cmp_full and not(inStream_b_V_data_0_sel_wr));
    inStream_b_V_data_0_load_B <= (inStream_b_V_data_0_state_cmp_full and inStream_b_V_data_0_sel_wr);
    inStream_b_V_data_0_sel <= inStream_b_V_data_0_sel_rd;
    inStream_b_V_data_0_state_cmp_full <= '0' when (inStream_b_V_data_0_state = ap_const_lv2_1) else '1';
    inStream_b_V_data_0_vld_in <= inStream_b_TVALID;
    inStream_b_V_data_0_vld_out <= inStream_b_V_data_0_state(0);

    inStream_b_V_dest_V_0_ack_out_assign_proc : process(inStream_b_V_data_0_vld_out, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, icmp_ln40_fu_589_p2, ap_CS_fsm_state2, ap_predicate_op64_read_state2, ap_block_pp1_stage0_11001)
    begin
        if (((not(((inStream_b_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op64_read_state2 = ap_const_boolean_1))) and (ap_predicate_op64_read_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln40_fu_589_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            inStream_b_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_b_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    inStream_b_V_dest_V_0_vld_in <= inStream_b_TVALID;
    input_ch_idx_fu_1186_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln1598_4_fu_681_p3));

    kernel_bias_fp_0_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, ap_CS_fsm_state2, zext_ln203_fu_500_p1, zext_ln63_fu_1150_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            kernel_bias_fp_0_V_address0 <= zext_ln63_fu_1150_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_bias_fp_0_V_address0 <= zext_ln203_fu_500_p1(4 - 1 downto 0);
        else 
            kernel_bias_fp_0_V_address0 <= "XXXX";
        end if; 
    end process;


    kernel_bias_fp_0_V_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, ap_CS_fsm_state2, zext_ln203_1_fu_512_p1, zext_ln65_fu_1162_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            kernel_bias_fp_0_V_address1 <= zext_ln65_fu_1162_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_bias_fp_0_V_address1 <= zext_ln203_1_fu_512_p1(4 - 1 downto 0);
        else 
            kernel_bias_fp_0_V_address1 <= "XXXX";
        end if; 
    end process;


    kernel_bias_fp_0_V_ce0_assign_proc : process(inStream_b_V_data_0_vld_out, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state2, ap_predicate_op64_read_state2, ap_block_pp1_stage0_11001)
    begin
        if (((not(((inStream_b_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op64_read_state2 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            kernel_bias_fp_0_V_ce0 <= ap_const_logic_1;
        else 
            kernel_bias_fp_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_bias_fp_0_V_ce1_assign_proc : process(inStream_b_V_data_0_vld_out, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state2, ap_predicate_op64_read_state2, ap_block_pp1_stage0_11001)
    begin
        if (((not(((inStream_b_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op64_read_state2 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            kernel_bias_fp_0_V_ce1 <= ap_const_logic_1;
        else 
            kernel_bias_fp_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    kernel_bias_fp_0_V_d0 <= inStream_b_V_data_0_data_out(16 - 1 downto 0);
    kernel_bias_fp_0_V_d1 <= inStream_b_V_data_0_data_out(47 downto 32);

    kernel_bias_fp_0_V_we0_assign_proc : process(inStream_b_V_data_0_vld_out, ap_CS_fsm_state2, icmp_ln23_fu_476_p2, bias_en_V_read_reg_1225, ap_predicate_op64_read_state2)
    begin
        if ((not(((inStream_b_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op64_read_state2 = ap_const_boolean_1))) and (bias_en_V_read_reg_1225 = ap_const_lv1_1) and (icmp_ln23_fu_476_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            kernel_bias_fp_0_V_we0 <= ap_const_logic_1;
        else 
            kernel_bias_fp_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_bias_fp_0_V_we1_assign_proc : process(inStream_b_V_data_0_vld_out, ap_CS_fsm_state2, icmp_ln23_fu_476_p2, bias_en_V_read_reg_1225, ap_predicate_op64_read_state2)
    begin
        if ((not(((inStream_b_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op64_read_state2 = ap_const_boolean_1))) and (bias_en_V_read_reg_1225 = ap_const_lv1_1) and (icmp_ln23_fu_476_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            kernel_bias_fp_0_V_we1 <= ap_const_logic_1;
        else 
            kernel_bias_fp_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_bias_fp_1_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, ap_CS_fsm_state2, zext_ln203_fu_500_p1, zext_ln63_fu_1150_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            kernel_bias_fp_1_V_address0 <= zext_ln63_fu_1150_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_bias_fp_1_V_address0 <= zext_ln203_fu_500_p1(4 - 1 downto 0);
        else 
            kernel_bias_fp_1_V_address0 <= "XXXX";
        end if; 
    end process;


    kernel_bias_fp_1_V_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, ap_CS_fsm_state2, zext_ln203_1_fu_512_p1, zext_ln65_fu_1162_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            kernel_bias_fp_1_V_address1 <= zext_ln65_fu_1162_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_bias_fp_1_V_address1 <= zext_ln203_1_fu_512_p1(4 - 1 downto 0);
        else 
            kernel_bias_fp_1_V_address1 <= "XXXX";
        end if; 
    end process;


    kernel_bias_fp_1_V_ce0_assign_proc : process(inStream_b_V_data_0_vld_out, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state2, ap_predicate_op64_read_state2, ap_block_pp1_stage0_11001)
    begin
        if (((not(((inStream_b_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op64_read_state2 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            kernel_bias_fp_1_V_ce0 <= ap_const_logic_1;
        else 
            kernel_bias_fp_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_bias_fp_1_V_ce1_assign_proc : process(inStream_b_V_data_0_vld_out, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state2, ap_predicate_op64_read_state2, ap_block_pp1_stage0_11001)
    begin
        if (((not(((inStream_b_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op64_read_state2 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            kernel_bias_fp_1_V_ce1 <= ap_const_logic_1;
        else 
            kernel_bias_fp_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    kernel_bias_fp_1_V_d0 <= inStream_b_V_data_0_data_out(31 downto 16);
    kernel_bias_fp_1_V_d1 <= inStream_b_V_data_0_data_out(63 downto 48);

    kernel_bias_fp_1_V_we0_assign_proc : process(inStream_b_V_data_0_vld_out, ap_CS_fsm_state2, icmp_ln23_fu_476_p2, bias_en_V_read_reg_1225, ap_predicate_op64_read_state2)
    begin
        if ((not(((inStream_b_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op64_read_state2 = ap_const_boolean_1))) and (bias_en_V_read_reg_1225 = ap_const_lv1_1) and (icmp_ln23_fu_476_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            kernel_bias_fp_1_V_we0 <= ap_const_logic_1;
        else 
            kernel_bias_fp_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_bias_fp_1_V_we1_assign_proc : process(inStream_b_V_data_0_vld_out, ap_CS_fsm_state2, icmp_ln23_fu_476_p2, bias_en_V_read_reg_1225, ap_predicate_op64_read_state2)
    begin
        if ((not(((inStream_b_V_data_0_vld_out = ap_const_logic_0) and (ap_predicate_op64_read_state2 = ap_const_boolean_1))) and (bias_en_V_read_reg_1225 = ap_const_lv1_1) and (icmp_ln23_fu_476_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            kernel_bias_fp_1_V_we1 <= ap_const_logic_1;
        else 
            kernel_bias_fp_1_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

        lhs_V_1_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_4_fu_748_p4),17));

        lhs_V_2_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_8_fu_758_p4),17));

        lhs_V_3_fu_1052_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_13_fu_768_p4),17));

        lhs_V_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_fu_744_p1),17));

    mul_ln1354_1_fu_1219_p0 <= mul_ln1354_1_fu_1219_p00(13 - 1 downto 0);
    mul_ln1354_1_fu_1219_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1354_reg_1269),22));
    mul_ln1354_1_fu_1219_p1 <= mul_ln1354_1_fu_1219_p10(9 - 1 downto 0);
    mul_ln1354_1_fu_1219_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_h_V_read_reg_1255),22));
    mul_ln1354_fu_524_p0 <= mul_ln1354_fu_524_p00(4 - 1 downto 0);
    mul_ln1354_fu_524_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fold_input_ch_V_read_reg_1241),13));
    mul_ln1354_fu_524_p1 <= mul_ln1354_fu_524_p10(9 - 1 downto 0);
    mul_ln1354_fu_524_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_w_V_read_reg_1249),13));
    mul_ln1354_fu_524_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1354_fu_524_p0) * unsigned(mul_ln1354_fu_524_p1), 13));
    or_ln1598_fu_675_p2 <= (select_ln1598_3_fu_654_p3 or icmp_ln43_fu_600_p2);
    or_ln203_fu_506_p2 <= (tmp_1_fu_492_p3 or ap_const_lv5_1);
    or_ln340_1_fu_932_p2 <= (xor_ln340_1_fu_926_p2 or p_Result_3_fu_900_p3);
    or_ln340_2_fu_1022_p2 <= (xor_ln340_2_fu_1016_p2 or p_Result_5_fu_990_p3);
    or_ln340_3_fu_1112_p2 <= (xor_ln340_3_fu_1106_p2 or p_Result_7_fu_1080_p3);
    or_ln340_fu_842_p2 <= (xor_ln340_fu_836_p2 or p_Result_1_fu_810_p3);
    or_ln65_fu_1156_p2 <= (shl_ln1_fu_1142_p3 or ap_const_lv5_1);
    or_ln73_1_fu_1174_p2 <= (select_ln1598_5_fu_704_p3 or icmp_ln73_fu_1168_p2);
    or_ln73_2_fu_636_p2 <= (icmp_ln73_4_fu_623_p2 or icmp_ln73_3_reg_1292);
    or_ln73_3_fu_698_p2 <= (select_ln1598_1_fu_628_p3 or icmp_ln73_5_fu_693_p2);
    or_ln73_fu_583_p2 <= (icmp_ln73_2_fu_569_p2 or icmp_ln73_1_fu_578_p2);
    outStream_TDATA <= outStream_V_data_1_data_out;

    outStream_TDATA_blk_n_assign_proc : process(outStream_V_data_1_state, ap_block_pp1_stage0, ap_enable_reg_pp1_iter4, icmp_ln40_reg_1302_pp1_iter3_reg, ap_enable_reg_pp1_iter5, icmp_ln40_reg_1302_pp1_iter4_reg)
    begin
        if ((((icmp_ln40_reg_1302_pp1_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((icmp_ln40_reg_1302_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)))) then 
            outStream_TDATA_blk_n <= outStream_V_data_1_state(1);
        else 
            outStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_TDEST <= outStream_V_dest_V_1_data_out;
    outStream_TID <= outStream_V_id_V_1_data_out;
    outStream_TKEEP <= outStream_V_keep_V_1_data_out;
    outStream_TLAST <= outStream_V_last_V_1_data_out;
    outStream_TSTRB <= outStream_V_strb_V_1_data_out;
    outStream_TUSER <= outStream_V_user_V_1_data_out;
    outStream_TVALID <= outStream_V_dest_V_1_state(0);
    outStream_V_data_1_ack_in <= outStream_V_data_1_state(1);
    outStream_V_data_1_ack_out <= outStream_TREADY;

    outStream_V_data_1_data_out_assign_proc : process(outStream_V_data_1_payload_A, outStream_V_data_1_payload_B, outStream_V_data_1_sel)
    begin
        if ((outStream_V_data_1_sel = ap_const_logic_1)) then 
            outStream_V_data_1_data_out <= outStream_V_data_1_payload_B;
        else 
            outStream_V_data_1_data_out <= outStream_V_data_1_payload_A;
        end if; 
    end process;

    outStream_V_data_1_load_A <= (outStream_V_data_1_state_cmp_full and not(outStream_V_data_1_sel_wr));
    outStream_V_data_1_load_B <= (outStream_V_data_1_state_cmp_full and outStream_V_data_1_sel_wr);
    outStream_V_data_1_sel <= outStream_V_data_1_sel_rd;
    outStream_V_data_1_state_cmp_full <= '0' when (outStream_V_data_1_state = ap_const_lv2_1) else '1';

    outStream_V_data_1_vld_in_assign_proc : process(ap_enable_reg_pp1_iter4, icmp_ln40_reg_1302_pp1_iter3_reg, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln40_reg_1302_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            outStream_V_data_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_data_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_data_1_vld_out <= outStream_V_data_1_state(0);
    outStream_V_dest_V_1_ack_in <= outStream_V_dest_V_1_state(1);
    outStream_V_dest_V_1_ack_out <= outStream_TREADY;

    outStream_V_dest_V_1_data_out_assign_proc : process(outStream_V_dest_V_1_payload_A, outStream_V_dest_V_1_payload_B, outStream_V_dest_V_1_sel)
    begin
        if ((outStream_V_dest_V_1_sel = ap_const_logic_1)) then 
            outStream_V_dest_V_1_data_out <= outStream_V_dest_V_1_payload_B;
        else 
            outStream_V_dest_V_1_data_out <= outStream_V_dest_V_1_payload_A;
        end if; 
    end process;

    outStream_V_dest_V_1_load_A <= (outStream_V_dest_V_1_state_cmp_full and not(outStream_V_dest_V_1_sel_wr));
    outStream_V_dest_V_1_load_B <= (outStream_V_dest_V_1_state_cmp_full and outStream_V_dest_V_1_sel_wr);
    outStream_V_dest_V_1_sel <= outStream_V_dest_V_1_sel_rd;
    outStream_V_dest_V_1_state_cmp_full <= '0' when (outStream_V_dest_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_dest_V_1_vld_in_assign_proc : process(ap_enable_reg_pp1_iter4, icmp_ln40_reg_1302_pp1_iter3_reg, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln40_reg_1302_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            outStream_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_dest_V_1_vld_out <= outStream_V_dest_V_1_state(0);
    outStream_V_id_V_1_ack_in <= outStream_V_id_V_1_state(1);
    outStream_V_id_V_1_ack_out <= outStream_TREADY;

    outStream_V_id_V_1_data_out_assign_proc : process(outStream_V_id_V_1_payload_A, outStream_V_id_V_1_payload_B, outStream_V_id_V_1_sel)
    begin
        if ((outStream_V_id_V_1_sel = ap_const_logic_1)) then 
            outStream_V_id_V_1_data_out <= outStream_V_id_V_1_payload_B;
        else 
            outStream_V_id_V_1_data_out <= outStream_V_id_V_1_payload_A;
        end if; 
    end process;

    outStream_V_id_V_1_load_A <= (outStream_V_id_V_1_state_cmp_full and not(outStream_V_id_V_1_sel_wr));
    outStream_V_id_V_1_load_B <= (outStream_V_id_V_1_state_cmp_full and outStream_V_id_V_1_sel_wr);
    outStream_V_id_V_1_sel <= outStream_V_id_V_1_sel_rd;
    outStream_V_id_V_1_state_cmp_full <= '0' when (outStream_V_id_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_id_V_1_vld_in_assign_proc : process(ap_enable_reg_pp1_iter4, icmp_ln40_reg_1302_pp1_iter3_reg, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln40_reg_1302_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            outStream_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_id_V_1_vld_out <= outStream_V_id_V_1_state(0);
    outStream_V_keep_V_1_ack_in <= outStream_V_keep_V_1_state(1);
    outStream_V_keep_V_1_ack_out <= outStream_TREADY;

    outStream_V_keep_V_1_data_out_assign_proc : process(outStream_V_keep_V_1_payload_A, outStream_V_keep_V_1_payload_B, outStream_V_keep_V_1_sel)
    begin
        if ((outStream_V_keep_V_1_sel = ap_const_logic_1)) then 
            outStream_V_keep_V_1_data_out <= outStream_V_keep_V_1_payload_B;
        else 
            outStream_V_keep_V_1_data_out <= outStream_V_keep_V_1_payload_A;
        end if; 
    end process;

    outStream_V_keep_V_1_load_A <= (outStream_V_keep_V_1_state_cmp_full and not(outStream_V_keep_V_1_sel_wr));
    outStream_V_keep_V_1_load_B <= (outStream_V_keep_V_1_state_cmp_full and outStream_V_keep_V_1_sel_wr);
    outStream_V_keep_V_1_sel <= outStream_V_keep_V_1_sel_rd;
    outStream_V_keep_V_1_state_cmp_full <= '0' when (outStream_V_keep_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_keep_V_1_vld_in_assign_proc : process(ap_enable_reg_pp1_iter4, icmp_ln40_reg_1302_pp1_iter3_reg, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln40_reg_1302_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            outStream_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_keep_V_1_vld_out <= outStream_V_keep_V_1_state(0);
    outStream_V_last_V_1_ack_in <= outStream_V_last_V_1_state(1);
    outStream_V_last_V_1_ack_out <= outStream_TREADY;

    outStream_V_last_V_1_data_out_assign_proc : process(outStream_V_last_V_1_payload_A, outStream_V_last_V_1_payload_B, outStream_V_last_V_1_sel)
    begin
        if ((outStream_V_last_V_1_sel = ap_const_logic_1)) then 
            outStream_V_last_V_1_data_out <= outStream_V_last_V_1_payload_B;
        else 
            outStream_V_last_V_1_data_out <= outStream_V_last_V_1_payload_A;
        end if; 
    end process;

    outStream_V_last_V_1_load_A <= (outStream_V_last_V_1_state_cmp_full and not(outStream_V_last_V_1_sel_wr));
    outStream_V_last_V_1_load_B <= (outStream_V_last_V_1_state_cmp_full and outStream_V_last_V_1_sel_wr);
    outStream_V_last_V_1_sel <= outStream_V_last_V_1_sel_rd;
    outStream_V_last_V_1_state_cmp_full <= '0' when (outStream_V_last_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_last_V_1_vld_in_assign_proc : process(ap_enable_reg_pp1_iter4, icmp_ln40_reg_1302_pp1_iter3_reg, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln40_reg_1302_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            outStream_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_last_V_1_vld_out <= outStream_V_last_V_1_state(0);
    outStream_V_strb_V_1_ack_in <= outStream_V_strb_V_1_state(1);
    outStream_V_strb_V_1_ack_out <= outStream_TREADY;

    outStream_V_strb_V_1_data_out_assign_proc : process(outStream_V_strb_V_1_payload_A, outStream_V_strb_V_1_payload_B, outStream_V_strb_V_1_sel)
    begin
        if ((outStream_V_strb_V_1_sel = ap_const_logic_1)) then 
            outStream_V_strb_V_1_data_out <= outStream_V_strb_V_1_payload_B;
        else 
            outStream_V_strb_V_1_data_out <= outStream_V_strb_V_1_payload_A;
        end if; 
    end process;

    outStream_V_strb_V_1_load_A <= (outStream_V_strb_V_1_state_cmp_full and not(outStream_V_strb_V_1_sel_wr));
    outStream_V_strb_V_1_load_B <= (outStream_V_strb_V_1_state_cmp_full and outStream_V_strb_V_1_sel_wr);
    outStream_V_strb_V_1_sel <= outStream_V_strb_V_1_sel_rd;
    outStream_V_strb_V_1_state_cmp_full <= '0' when (outStream_V_strb_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_strb_V_1_vld_in_assign_proc : process(ap_enable_reg_pp1_iter4, icmp_ln40_reg_1302_pp1_iter3_reg, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln40_reg_1302_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            outStream_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_strb_V_1_vld_out <= outStream_V_strb_V_1_state(0);
    outStream_V_user_V_1_ack_in <= outStream_V_user_V_1_state(1);
    outStream_V_user_V_1_ack_out <= outStream_TREADY;

    outStream_V_user_V_1_data_out_assign_proc : process(outStream_V_user_V_1_payload_A, outStream_V_user_V_1_payload_B, outStream_V_user_V_1_sel)
    begin
        if ((outStream_V_user_V_1_sel = ap_const_logic_1)) then 
            outStream_V_user_V_1_data_out <= outStream_V_user_V_1_payload_B;
        else 
            outStream_V_user_V_1_data_out <= outStream_V_user_V_1_payload_A;
        end if; 
    end process;

    outStream_V_user_V_1_load_A <= (outStream_V_user_V_1_state_cmp_full and not(outStream_V_user_V_1_sel_wr));
    outStream_V_user_V_1_load_B <= (outStream_V_user_V_1_state_cmp_full and outStream_V_user_V_1_sel_wr);
    outStream_V_user_V_1_sel <= outStream_V_user_V_1_sel_rd;
    outStream_V_user_V_1_state_cmp_full <= '0' when (outStream_V_user_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_user_V_1_vld_in_assign_proc : process(ap_enable_reg_pp1_iter4, icmp_ln40_reg_1302_pp1_iter3_reg, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln40_reg_1302_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            outStream_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_user_V_1_vld_out <= outStream_V_user_V_1_state(0);
    output_acc_0_V_fu_864_p3 <= 
        select_ln340_fu_848_p3 when (or_ln340_fu_842_p2(0) = '1') else 
        select_ln388_fu_856_p3;
    output_acc_1_V_fu_954_p3 <= 
        select_ln340_1_fu_938_p3 when (or_ln340_1_fu_932_p2(0) = '1') else 
        select_ln388_1_fu_946_p3;
    output_acc_2_V_fu_1044_p3 <= 
        select_ln340_2_fu_1028_p3 when (or_ln340_2_fu_1022_p2(0) = '1') else 
        select_ln388_2_fu_1036_p3;
    output_acc_3_V_fu_1134_p3 <= 
        select_ln340_3_fu_1118_p3 when (or_ln340_3_fu_1112_p2(0) = '1') else 
        select_ln388_3_fu_1126_p3;
    p_Result_1_fu_810_p3 <= p_Val2_6_fu_804_p2(15 downto 15);
    p_Result_2_fu_886_p3 <= ret_V_1_fu_880_p2(16 downto 16);
    p_Result_3_fu_900_p3 <= p_Val2_10_fu_894_p2(15 downto 15);
    p_Result_4_fu_976_p3 <= ret_V_2_fu_970_p2(16 downto 16);
    p_Result_5_fu_990_p3 <= p_Val2_12_fu_984_p2(15 downto 15);
    p_Result_6_fu_1066_p3 <= ret_V_3_fu_1060_p2(16 downto 16);
    p_Result_7_fu_1080_p3 <= p_Val2_15_fu_1074_p2(15 downto 15);
    p_Result_s_fu_796_p3 <= ret_V_fu_790_p2(16 downto 16);
    p_Val2_10_fu_894_p1 <= grp_fu_443_p4;
    p_Val2_10_fu_894_p2 <= std_logic_vector(signed(p_Val2_4_fu_748_p4) + signed(p_Val2_10_fu_894_p1));
    p_Val2_12_fu_984_p1 <= grp_fu_454_p4;
    p_Val2_12_fu_984_p2 <= std_logic_vector(signed(p_Val2_8_fu_758_p4) + signed(p_Val2_12_fu_984_p1));
    p_Val2_13_fu_768_p4 <= inStream_a_V_data_0_data_out(63 downto 48);
    p_Val2_15_fu_1074_p1 <= grp_fu_465_p4;
    p_Val2_15_fu_1074_p2 <= std_logic_vector(signed(p_Val2_13_fu_768_p4) + signed(p_Val2_15_fu_1074_p1));
    p_Val2_1_fu_778_p1 <= inStream_b_V_data_0_data_out(16 - 1 downto 0);
    p_Val2_4_fu_748_p4 <= inStream_a_V_data_0_data_out(31 downto 16);
    p_Val2_6_fu_804_p2 <= std_logic_vector(signed(p_Val2_s_fu_744_p1) + signed(p_Val2_1_fu_778_p1));
    p_Val2_8_fu_758_p4 <= inStream_a_V_data_0_data_out(47 downto 32);
    p_Val2_s_fu_744_p1 <= inStream_a_V_data_0_data_out(16 - 1 downto 0);
    ret_V_1_fu_880_p2 <= std_logic_vector(signed(rhs_V_1_fu_876_p1) + signed(lhs_V_1_fu_872_p1));
    ret_V_2_fu_970_p2 <= std_logic_vector(signed(rhs_V_2_fu_966_p1) + signed(lhs_V_2_fu_962_p1));
    ret_V_3_fu_1060_p2 <= std_logic_vector(signed(rhs_V_3_fu_1056_p1) + signed(lhs_V_3_fu_1052_p1));
    ret_V_fu_790_p2 <= std_logic_vector(signed(rhs_V_fu_786_p1) + signed(lhs_V_fu_782_p1));
    rhs_V_1_fu_876_p0 <= grp_fu_443_p4;
        rhs_V_1_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_1_fu_876_p0),17));

    rhs_V_2_fu_966_p0 <= grp_fu_454_p4;
        rhs_V_2_fu_966_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_2_fu_966_p0),17));

    rhs_V_3_fu_1056_p0 <= grp_fu_465_p4;
        rhs_V_3_fu_1056_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_3_fu_1056_p0),17));

        rhs_V_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_fu_778_p1),17));

    select_ln1598_1_fu_628_p3 <= 
        icmp_ln73_4_fu_623_p2 when (icmp_ln43_fu_600_p2(0) = '1') else 
        icmp_ln73_2_fu_569_p2;
    select_ln1598_2_fu_641_p3 <= 
        or_ln73_2_fu_636_p2 when (icmp_ln43_fu_600_p2(0) = '1') else 
        or_ln73_fu_583_p2;
    select_ln1598_3_fu_654_p3 <= 
        icmp_ln46_reg_1297 when (icmp_ln43_fu_600_p2(0) = '1') else 
        icmp_ln46_1_fu_649_p2;
    select_ln1598_4_fu_681_p3 <= 
        ap_const_lv4_0 when (or_ln1598_fu_675_p2(0) = '1') else 
        i_op_assign_2_reg_392;
    select_ln1598_5_fu_704_p3 <= 
        or_ln73_3_fu_698_p2 when (select_ln1598_3_fu_654_p3(0) = '1') else 
        select_ln1598_2_fu_641_p3;
    select_ln1598_fu_605_p3 <= 
        ap_const_lv9_0 when (icmp_ln43_fu_600_p2(0) = '1') else 
        i_op_assign_1_reg_381;
    select_ln340_1_fu_938_p3 <= 
        ap_const_lv16_7FFF when (xor_ln340_5_fu_920_p2(0) = '1') else 
        p_Val2_10_fu_894_p2;
    select_ln340_2_fu_1028_p3 <= 
        ap_const_lv16_7FFF when (xor_ln340_6_fu_1010_p2(0) = '1') else 
        p_Val2_12_fu_984_p2;
    select_ln340_3_fu_1118_p3 <= 
        ap_const_lv16_7FFF when (xor_ln340_7_fu_1100_p2(0) = '1') else 
        p_Val2_15_fu_1074_p2;
    select_ln340_fu_848_p3 <= 
        ap_const_lv16_7FFF when (xor_ln340_4_fu_830_p2(0) = '1') else 
        p_Val2_6_fu_804_p2;
    select_ln388_1_fu_946_p3 <= 
        ap_const_lv16_8000 when (underflow_1_fu_914_p2(0) = '1') else 
        p_Val2_10_fu_894_p2;
    select_ln388_2_fu_1036_p3 <= 
        ap_const_lv16_8000 when (underflow_2_fu_1004_p2(0) = '1') else 
        p_Val2_12_fu_984_p2;
    select_ln388_3_fu_1126_p3 <= 
        ap_const_lv16_8000 when (underflow_3_fu_1094_p2(0) = '1') else 
        p_Val2_15_fu_1074_p2;
    select_ln388_fu_856_p3 <= 
        ap_const_lv16_8000 when (underflow_fu_824_p2(0) = '1') else 
        p_Val2_6_fu_804_p2;
    select_ln40_fu_661_p3 <= 
        add_ln40_1_fu_613_p2 when (icmp_ln43_fu_600_p2(0) = '1') else 
        i_op_assign_reg_359;
    select_ln43_1_fu_1198_p3 <= 
        ap_const_lv13_1 when (icmp_ln43_fu_600_p2(0) = '1') else 
        add_ln43_1_fu_1192_p2;
    select_ln43_fu_712_p3 <= 
        col_idx_fu_669_p2 when (select_ln1598_3_fu_654_p3(0) = '1') else 
        select_ln1598_fu_605_p3;
    shl_ln1_fu_1142_p3 <= (select_ln1598_4_fu_681_p3 & ap_const_lv1_0);
    tmp_1_fu_492_p3 <= (t_V_reg_337 & ap_const_lv1_0);
    tmp_data_3_fu_1206_p5 <= (((grp_post_process_unit_fu_430_ap_return & grp_post_process_unit_fu_421_ap_return) & grp_post_process_unit_fu_412_ap_return) & grp_post_process_unit_fu_403_ap_return);
    tmp_last_V_fu_1180_p2 <= (or_ln73_1_fu_1174_p2 xor ap_const_lv1_1);
    underflow_1_fu_914_p2 <= (xor_ln786_1_fu_908_p2 and p_Result_2_fu_886_p3);
    underflow_2_fu_1004_p2 <= (xor_ln786_2_fu_998_p2 and p_Result_4_fu_976_p3);
    underflow_3_fu_1094_p2 <= (xor_ln786_3_fu_1088_p2 and p_Result_6_fu_1066_p3);
    underflow_fu_824_p2 <= (xor_ln786_fu_818_p2 and p_Result_s_fu_796_p3);
    xor_ln340_1_fu_926_p2 <= (p_Result_2_fu_886_p3 xor ap_const_lv1_1);
    xor_ln340_2_fu_1016_p2 <= (p_Result_4_fu_976_p3 xor ap_const_lv1_1);
    xor_ln340_3_fu_1106_p2 <= (p_Result_6_fu_1066_p3 xor ap_const_lv1_1);
    xor_ln340_4_fu_830_p2 <= (p_Result_s_fu_796_p3 xor p_Result_1_fu_810_p3);
    xor_ln340_5_fu_920_p2 <= (p_Result_3_fu_900_p3 xor p_Result_2_fu_886_p3);
    xor_ln340_6_fu_1010_p2 <= (p_Result_5_fu_990_p3 xor p_Result_4_fu_976_p3);
    xor_ln340_7_fu_1100_p2 <= (p_Result_7_fu_1080_p3 xor p_Result_6_fu_1066_p3);
    xor_ln340_fu_836_p2 <= (p_Result_s_fu_796_p3 xor ap_const_lv1_1);
    xor_ln786_1_fu_908_p2 <= (p_Result_3_fu_900_p3 xor ap_const_lv1_1);
    xor_ln786_2_fu_998_p2 <= (p_Result_5_fu_990_p3 xor ap_const_lv1_1);
    xor_ln786_3_fu_1088_p2 <= (p_Result_7_fu_1080_p3 xor ap_const_lv1_1);
    xor_ln786_fu_818_p2 <= (p_Result_1_fu_810_p3 xor ap_const_lv1_1);
    zext_ln1354_1_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_h_V_read_reg_1255),10));
    zext_ln1354_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_w_V_read_reg_1249),10));
    zext_ln203_1_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln203_fu_506_p2),64));
    zext_ln203_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_492_p3),64));
    zext_ln43_1_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_1_fu_613_p2),10));
    zext_ln43_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_359),10));
    zext_ln46_1_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_idx_fu_669_p2),10));
    zext_ln46_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_1_reg_381),10));
    zext_ln63_fu_1150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_1142_p3),64));
    zext_ln65_fu_1162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln65_fu_1156_p2),64));
end behav;
