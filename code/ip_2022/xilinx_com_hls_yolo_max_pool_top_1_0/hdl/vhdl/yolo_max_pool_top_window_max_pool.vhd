-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yolo_max_pool_top_window_max_pool is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of yolo_max_pool_top_window_max_pool is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;

attribute shreg_extract : string;
    signal p_read_reg_72 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln160_1_fu_54_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln160_1_reg_78 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln1649_fu_34_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln160_fu_40_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1649_1_fu_48_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1649_2_fu_62_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_V_fu_66_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal ap_return_int_reg : STD_LOGIC_VECTOR (15 downto 0);


begin




    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= max_V_fu_66_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_read_reg_72 <= p_read4;
                select_ln160_1_reg_78 <= select_ln160_1_fu_54_p3;
            end if;
        end if;
    end process;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(max_V_fu_66_p3, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= max_V_fu_66_p3;
        else 
            ap_return <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln1649_1_fu_48_p2 <= "1" when (signed(select_ln160_fu_40_p3) < signed(p_read3)) else "0";
    icmp_ln1649_2_fu_62_p2 <= "1" when (signed(select_ln160_1_reg_78) < signed(p_read_reg_72)) else "0";
    icmp_ln1649_fu_34_p2 <= "1" when (signed(p_read2) > signed(p_read1)) else "0";
    max_V_fu_66_p3 <= 
        p_read_reg_72 when (icmp_ln1649_2_fu_62_p2(0) = '1') else 
        select_ln160_1_reg_78;
    select_ln160_1_fu_54_p3 <= 
        p_read3 when (icmp_ln1649_1_fu_48_p2(0) = '1') else 
        select_ln160_fu_40_p3;
    select_ln160_fu_40_p3 <= 
        p_read2 when (icmp_ln1649_fu_34_p2(0) = '1') else 
        p_read1;
end behav;
