// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="yolo_yolo_top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=1384,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=8,HLS_SYN_FF=10988,HLS_SYN_LUT=7117,HLS_VERSION=2019_1}" *)

module yolo_yolo_top (
        ap_clk,
        ap_rst_n,
        inStream_TDATA,
        inStream_TVALID,
        inStream_TREADY,
        inStream_TKEEP,
        inStream_TSTRB,
        inStream_TUSER,
        inStream_TLAST,
        inStream_TID,
        inStream_TDEST,
        outStream_TDATA,
        outStream_TVALID,
        outStream_TREADY,
        outStream_TKEEP,
        outStream_TSTRB,
        outStream_TUSER,
        outStream_TLAST,
        outStream_TID,
        outStream_TDEST,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state34 = 3'd4;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [63:0] inStream_TDATA;
input   inStream_TVALID;
output   inStream_TREADY;
input  [7:0] inStream_TKEEP;
input  [7:0] inStream_TSTRB;
input  [1:0] inStream_TUSER;
input  [0:0] inStream_TLAST;
input  [4:0] inStream_TID;
input  [5:0] inStream_TDEST;
output  [63:0] outStream_TDATA;
output   outStream_TVALID;
input   outStream_TREADY;
output  [7:0] outStream_TKEEP;
output  [7:0] outStream_TSTRB;
output  [1:0] outStream_TUSER;
output  [0:0] outStream_TLAST;
output  [4:0] outStream_TID;
output  [5:0] outStream_TDEST;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [63:0] inStream_V_data_0_data_out;
wire    inStream_V_data_0_vld_in;
wire    inStream_V_data_0_vld_out;
wire    inStream_V_data_0_ack_in;
reg    inStream_V_data_0_ack_out;
reg   [63:0] inStream_V_data_0_payload_A;
reg   [63:0] inStream_V_data_0_payload_B;
reg    inStream_V_data_0_sel_rd;
reg    inStream_V_data_0_sel_wr;
wire    inStream_V_data_0_sel;
wire    inStream_V_data_0_load_A;
wire    inStream_V_data_0_load_B;
reg   [1:0] inStream_V_data_0_state;
wire    inStream_V_data_0_state_cmp_full;
reg   [7:0] inStream_V_keep_V_0_data_out;
wire    inStream_V_keep_V_0_vld_in;
wire    inStream_V_keep_V_0_vld_out;
wire    inStream_V_keep_V_0_ack_in;
reg    inStream_V_keep_V_0_ack_out;
reg   [7:0] inStream_V_keep_V_0_payload_A;
reg   [7:0] inStream_V_keep_V_0_payload_B;
reg    inStream_V_keep_V_0_sel_rd;
reg    inStream_V_keep_V_0_sel_wr;
wire    inStream_V_keep_V_0_sel;
wire    inStream_V_keep_V_0_load_A;
wire    inStream_V_keep_V_0_load_B;
reg   [1:0] inStream_V_keep_V_0_state;
wire    inStream_V_keep_V_0_state_cmp_full;
reg   [7:0] inStream_V_strb_V_0_data_out;
wire    inStream_V_strb_V_0_vld_in;
wire    inStream_V_strb_V_0_vld_out;
wire    inStream_V_strb_V_0_ack_in;
reg    inStream_V_strb_V_0_ack_out;
reg   [7:0] inStream_V_strb_V_0_payload_A;
reg   [7:0] inStream_V_strb_V_0_payload_B;
reg    inStream_V_strb_V_0_sel_rd;
reg    inStream_V_strb_V_0_sel_wr;
wire    inStream_V_strb_V_0_sel;
wire    inStream_V_strb_V_0_load_A;
wire    inStream_V_strb_V_0_load_B;
reg   [1:0] inStream_V_strb_V_0_state;
wire    inStream_V_strb_V_0_state_cmp_full;
reg   [1:0] inStream_V_user_V_0_data_out;
wire    inStream_V_user_V_0_vld_in;
wire    inStream_V_user_V_0_vld_out;
wire    inStream_V_user_V_0_ack_in;
reg    inStream_V_user_V_0_ack_out;
reg   [1:0] inStream_V_user_V_0_payload_A;
reg   [1:0] inStream_V_user_V_0_payload_B;
reg    inStream_V_user_V_0_sel_rd;
reg    inStream_V_user_V_0_sel_wr;
wire    inStream_V_user_V_0_sel;
wire    inStream_V_user_V_0_load_A;
wire    inStream_V_user_V_0_load_B;
reg   [1:0] inStream_V_user_V_0_state;
wire    inStream_V_user_V_0_state_cmp_full;
reg   [4:0] inStream_V_id_V_0_data_out;
wire    inStream_V_id_V_0_vld_in;
wire    inStream_V_id_V_0_vld_out;
wire    inStream_V_id_V_0_ack_in;
reg    inStream_V_id_V_0_ack_out;
reg   [4:0] inStream_V_id_V_0_payload_A;
reg   [4:0] inStream_V_id_V_0_payload_B;
reg    inStream_V_id_V_0_sel_rd;
reg    inStream_V_id_V_0_sel_wr;
wire    inStream_V_id_V_0_sel;
wire    inStream_V_id_V_0_load_A;
wire    inStream_V_id_V_0_load_B;
reg   [1:0] inStream_V_id_V_0_state;
wire    inStream_V_id_V_0_state_cmp_full;
reg   [5:0] inStream_V_dest_V_0_data_out;
wire    inStream_V_dest_V_0_vld_in;
wire    inStream_V_dest_V_0_vld_out;
wire    inStream_V_dest_V_0_ack_in;
reg    inStream_V_dest_V_0_ack_out;
reg   [5:0] inStream_V_dest_V_0_payload_A;
reg   [5:0] inStream_V_dest_V_0_payload_B;
reg    inStream_V_dest_V_0_sel_rd;
reg    inStream_V_dest_V_0_sel_wr;
wire    inStream_V_dest_V_0_sel;
wire    inStream_V_dest_V_0_load_A;
wire    inStream_V_dest_V_0_load_B;
reg   [1:0] inStream_V_dest_V_0_state;
wire    inStream_V_dest_V_0_state_cmp_full;
reg   [63:0] outStream_V_data_1_data_out;
reg    outStream_V_data_1_vld_in;
wire    outStream_V_data_1_vld_out;
wire    outStream_V_data_1_ack_in;
wire    outStream_V_data_1_ack_out;
reg   [63:0] outStream_V_data_1_payload_A;
reg   [63:0] outStream_V_data_1_payload_B;
reg    outStream_V_data_1_sel_rd;
reg    outStream_V_data_1_sel_wr;
wire    outStream_V_data_1_sel;
wire    outStream_V_data_1_load_A;
wire    outStream_V_data_1_load_B;
reg   [1:0] outStream_V_data_1_state;
wire    outStream_V_data_1_state_cmp_full;
reg   [7:0] outStream_V_keep_V_1_data_out;
reg    outStream_V_keep_V_1_vld_in;
wire    outStream_V_keep_V_1_vld_out;
wire    outStream_V_keep_V_1_ack_in;
wire    outStream_V_keep_V_1_ack_out;
reg   [7:0] outStream_V_keep_V_1_payload_A;
reg   [7:0] outStream_V_keep_V_1_payload_B;
reg    outStream_V_keep_V_1_sel_rd;
reg    outStream_V_keep_V_1_sel_wr;
wire    outStream_V_keep_V_1_sel;
wire    outStream_V_keep_V_1_load_A;
wire    outStream_V_keep_V_1_load_B;
reg   [1:0] outStream_V_keep_V_1_state;
wire    outStream_V_keep_V_1_state_cmp_full;
reg   [7:0] outStream_V_strb_V_1_data_out;
reg    outStream_V_strb_V_1_vld_in;
wire    outStream_V_strb_V_1_vld_out;
wire    outStream_V_strb_V_1_ack_in;
wire    outStream_V_strb_V_1_ack_out;
reg   [7:0] outStream_V_strb_V_1_payload_A;
reg   [7:0] outStream_V_strb_V_1_payload_B;
reg    outStream_V_strb_V_1_sel_rd;
reg    outStream_V_strb_V_1_sel_wr;
wire    outStream_V_strb_V_1_sel;
wire    outStream_V_strb_V_1_load_A;
wire    outStream_V_strb_V_1_load_B;
reg   [1:0] outStream_V_strb_V_1_state;
wire    outStream_V_strb_V_1_state_cmp_full;
reg   [1:0] outStream_V_user_V_1_data_out;
reg    outStream_V_user_V_1_vld_in;
wire    outStream_V_user_V_1_vld_out;
wire    outStream_V_user_V_1_ack_in;
wire    outStream_V_user_V_1_ack_out;
reg   [1:0] outStream_V_user_V_1_payload_A;
reg   [1:0] outStream_V_user_V_1_payload_B;
reg    outStream_V_user_V_1_sel_rd;
reg    outStream_V_user_V_1_sel_wr;
wire    outStream_V_user_V_1_sel;
wire    outStream_V_user_V_1_load_A;
wire    outStream_V_user_V_1_load_B;
reg   [1:0] outStream_V_user_V_1_state;
wire    outStream_V_user_V_1_state_cmp_full;
reg   [0:0] outStream_V_last_V_1_data_out;
reg    outStream_V_last_V_1_vld_in;
wire    outStream_V_last_V_1_vld_out;
wire    outStream_V_last_V_1_ack_in;
wire    outStream_V_last_V_1_ack_out;
reg   [0:0] outStream_V_last_V_1_payload_A;
reg   [0:0] outStream_V_last_V_1_payload_B;
reg    outStream_V_last_V_1_sel_rd;
reg    outStream_V_last_V_1_sel_wr;
wire    outStream_V_last_V_1_sel;
wire    outStream_V_last_V_1_load_A;
wire    outStream_V_last_V_1_load_B;
reg   [1:0] outStream_V_last_V_1_state;
wire    outStream_V_last_V_1_state_cmp_full;
reg   [4:0] outStream_V_id_V_1_data_out;
reg    outStream_V_id_V_1_vld_in;
wire    outStream_V_id_V_1_vld_out;
wire    outStream_V_id_V_1_ack_in;
wire    outStream_V_id_V_1_ack_out;
reg   [4:0] outStream_V_id_V_1_payload_A;
reg   [4:0] outStream_V_id_V_1_payload_B;
reg    outStream_V_id_V_1_sel_rd;
reg    outStream_V_id_V_1_sel_wr;
wire    outStream_V_id_V_1_sel;
wire    outStream_V_id_V_1_load_A;
wire    outStream_V_id_V_1_load_B;
reg   [1:0] outStream_V_id_V_1_state;
wire    outStream_V_id_V_1_state_cmp_full;
reg   [5:0] outStream_V_dest_V_1_data_out;
reg    outStream_V_dest_V_1_vld_in;
wire    outStream_V_dest_V_1_vld_out;
wire    outStream_V_dest_V_1_ack_in;
wire    outStream_V_dest_V_1_ack_out;
reg   [5:0] outStream_V_dest_V_1_payload_A;
reg   [5:0] outStream_V_dest_V_1_payload_B;
reg    outStream_V_dest_V_1_sel_rd;
reg    outStream_V_dest_V_1_sel_wr;
wire    outStream_V_dest_V_1_sel;
wire    outStream_V_dest_V_1_load_A;
wire    outStream_V_dest_V_1_load_B;
reg   [1:0] outStream_V_dest_V_1_state;
wire    outStream_V_dest_V_1_state_cmp_full;
wire   [31:0] activate_en_V;
wire   [4:0] input_h_V;
wire   [4:0] input_w_V;
reg    inStream_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln14_fu_420_p2;
reg    outStream_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter30;
reg   [0:0] icmp_ln14_reg_819;
reg   [0:0] icmp_ln14_reg_819_pp0_iter29_reg;
reg    ap_enable_reg_pp0_iter31;
reg   [0:0] icmp_ln14_reg_819_pp0_iter30_reg;
reg   [12:0] indvar_flatten17_reg_205;
reg   [4:0] i_op_assign_reg_216;
reg   [8:0] indvar_flatten_reg_227;
reg   [4:0] i_op_assign_1_reg_238;
reg   [3:0] input_ch_idx_0_reg_249;
reg   [31:0] activate_en_V_read_reg_780;
wire   [5:0] add_ln1354_fu_344_p2;
reg   [5:0] add_ln1354_reg_787;
wire   [5:0] add_ln1354_1_fu_354_p2;
reg   [5:0] add_ln1354_1_reg_793;
wire   [28:0] trunc_ln791_fu_360_p1;
reg   [28:0] trunc_ln791_reg_799;
wire   [8:0] bound_fu_372_p1;
reg   [8:0] bound_reg_804;
wire   [12:0] bound4_fu_384_p2;
reg   [12:0] bound4_reg_809;
wire   [0:0] icmp_ln54_3_fu_390_p2;
reg   [0:0] icmp_ln54_3_reg_814;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
wire    ap_block_state23_pp0_stage0_iter21;
wire    ap_block_state24_pp0_stage0_iter22;
wire    ap_block_state25_pp0_stage0_iter23;
wire    ap_block_state26_pp0_stage0_iter24;
wire    ap_block_state27_pp0_stage0_iter25;
wire    ap_block_state28_pp0_stage0_iter26;
wire    ap_block_state29_pp0_stage0_iter27;
wire    ap_block_state30_pp0_stage0_iter28;
wire    ap_block_state31_pp0_stage0_iter29;
wire    ap_block_state32_pp0_stage0_iter30;
reg    ap_block_state32_io;
wire    ap_block_state33_pp0_stage0_iter31;
reg    ap_block_state33_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln14_reg_819_pp0_iter1_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter2_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter3_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter4_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter5_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter6_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter7_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter8_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter9_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter10_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter11_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter12_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter13_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter14_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter15_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter16_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter17_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter18_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter19_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter20_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter21_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter22_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter23_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter24_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter25_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter26_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter27_reg;
reg   [0:0] icmp_ln14_reg_819_pp0_iter28_reg;
wire   [12:0] add_ln14_fu_425_p2;
wire   [4:0] select_ln14_fu_498_p3;
wire   [4:0] select_ln17_fu_549_p3;
reg   [7:0] tmp_keep_V_reg_838;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter1_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter2_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter3_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter4_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter5_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter6_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter7_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter8_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter9_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter10_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter11_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter12_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter13_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter14_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter15_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter16_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter17_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter18_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter19_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter20_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter21_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter22_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter23_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter24_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter25_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter26_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter27_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter28_reg;
reg   [7:0] tmp_keep_V_reg_838_pp0_iter29_reg;
reg   [7:0] tmp_strb_V_reg_843;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter1_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter2_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter3_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter4_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter5_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter6_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter7_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter8_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter9_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter10_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter11_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter12_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter13_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter14_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter15_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter16_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter17_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter18_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter19_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter20_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter21_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter22_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter23_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter24_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter25_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter26_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter27_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter28_reg;
reg   [7:0] tmp_strb_V_reg_843_pp0_iter29_reg;
reg   [1:0] tmp_user_V_reg_848;
reg   [1:0] tmp_user_V_reg_848_pp0_iter1_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter2_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter3_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter4_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter5_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter6_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter7_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter8_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter9_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter10_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter11_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter12_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter13_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter14_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter15_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter16_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter17_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter18_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter19_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter20_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter21_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter22_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter23_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter24_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter25_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter26_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter27_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter28_reg;
reg   [1:0] tmp_user_V_reg_848_pp0_iter29_reg;
reg   [4:0] tmp_id_V_reg_853;
reg   [4:0] tmp_id_V_reg_853_pp0_iter1_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter2_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter3_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter4_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter5_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter6_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter7_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter8_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter9_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter10_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter11_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter12_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter13_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter14_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter15_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter16_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter17_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter18_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter19_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter20_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter21_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter22_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter23_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter24_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter25_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter26_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter27_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter28_reg;
reg   [4:0] tmp_id_V_reg_853_pp0_iter29_reg;
reg   [5:0] tmp_dest_V_reg_858;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter1_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter2_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter3_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter4_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter5_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter6_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter7_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter8_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter9_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter10_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter11_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter12_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter13_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter14_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter15_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter16_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter17_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter18_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter19_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter20_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter21_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter22_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter23_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter24_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter25_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter26_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter27_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter28_reg;
reg   [5:0] tmp_dest_V_reg_858_pp0_iter29_reg;
wire   [15:0] trunc_ln203_fu_581_p1;
reg   [15:0] trunc_ln203_reg_863;
reg   [15:0] p_02_new8_reg_869;
reg   [15:0] p_01_new_reg_875;
reg   [15:0] p_0_new_reg_881;
wire   [0:0] p_Result_s_fu_642_p2;
reg   [0:0] p_Result_s_reg_887;
reg   [0:0] p_Result_s_reg_887_pp0_iter1_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter2_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter3_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter4_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter5_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter6_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter7_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter8_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter9_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter10_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter11_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter12_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter13_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter14_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter15_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter16_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter17_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter18_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter19_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter20_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter21_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter22_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter23_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter24_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter25_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter26_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter27_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter28_reg;
reg   [0:0] p_Result_s_reg_887_pp0_iter29_reg;
wire   [0:0] p_Result_1_fu_669_p2;
reg   [0:0] p_Result_1_reg_891;
reg   [0:0] p_Result_1_reg_891_pp0_iter1_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter2_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter3_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter4_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter5_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter6_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter7_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter8_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter9_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter10_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter11_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter12_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter13_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter14_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter15_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter16_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter17_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter18_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter19_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter20_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter21_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter22_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter23_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter24_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter25_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter26_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter27_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter28_reg;
reg   [0:0] p_Result_1_reg_891_pp0_iter29_reg;
wire   [0:0] p_Result_2_fu_696_p2;
reg   [0:0] p_Result_2_reg_895;
reg   [0:0] p_Result_2_reg_895_pp0_iter1_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter2_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter3_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter4_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter5_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter6_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter7_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter8_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter9_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter10_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter11_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter12_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter13_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter14_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter15_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter16_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter17_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter18_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter19_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter20_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter21_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter22_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter23_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter24_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter25_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter26_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter27_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter28_reg;
reg   [0:0] p_Result_2_reg_895_pp0_iter29_reg;
wire   [0:0] p_Result_3_fu_723_p2;
reg   [0:0] p_Result_3_reg_899;
reg   [0:0] p_Result_3_reg_899_pp0_iter1_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter2_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter3_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter4_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter5_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter6_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter7_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter8_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter9_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter10_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter11_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter12_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter13_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter14_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter15_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter16_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter17_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter18_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter19_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter20_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter21_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter22_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter23_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter24_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter25_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter26_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter27_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter28_reg;
reg   [0:0] p_Result_3_reg_899_pp0_iter29_reg;
wire   [0:0] tmp_last_V_fu_741_p2;
reg   [0:0] tmp_last_V_reg_903;
reg   [0:0] tmp_last_V_reg_903_pp0_iter1_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter2_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter3_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter4_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter5_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter6_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter7_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter8_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter9_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter10_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter11_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter12_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter13_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter14_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter15_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter16_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter17_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter18_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter19_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter20_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter21_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter22_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter23_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter24_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter25_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter26_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter27_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter28_reg;
reg   [0:0] tmp_last_V_reg_903_pp0_iter29_reg;
wire   [3:0] input_ch_idx_fu_747_p2;
wire   [8:0] select_ln17_1_fu_759_p3;
wire   [15:0] grp_logistic_activate_fu_296_ap_return;
reg   [15:0] op_V_assign_reg_918;
wire   [15:0] grp_logistic_activate_fu_307_ap_return;
reg   [15:0] op_V_assign_1_reg_923;
wire   [15:0] grp_logistic_activate_fu_318_ap_return;
reg   [15:0] op_V_assign_2_reg_928;
wire   [15:0] grp_logistic_activate_fu_329_ap_return;
reg   [15:0] op_V_assign_3_reg_933;
wire   [63:0] tmp_data_1_fu_767_p5;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
wire    grp_logistic_activate_fu_296_ap_start;
wire    grp_logistic_activate_fu_296_ap_done;
wire    grp_logistic_activate_fu_296_ap_idle;
wire    grp_logistic_activate_fu_296_ap_ready;
reg    grp_logistic_activate_fu_296_ap_ce;
reg    ap_predicate_op149_call_state3;
reg    ap_block_state2_pp0_stage0_iter0_ignore_call0;
wire    ap_block_state3_pp0_stage0_iter1_ignore_call0;
wire    ap_block_state4_pp0_stage0_iter2_ignore_call0;
wire    ap_block_state5_pp0_stage0_iter3_ignore_call0;
wire    ap_block_state6_pp0_stage0_iter4_ignore_call0;
wire    ap_block_state7_pp0_stage0_iter5_ignore_call0;
wire    ap_block_state8_pp0_stage0_iter6_ignore_call0;
wire    ap_block_state9_pp0_stage0_iter7_ignore_call0;
wire    ap_block_state10_pp0_stage0_iter8_ignore_call0;
wire    ap_block_state11_pp0_stage0_iter9_ignore_call0;
wire    ap_block_state12_pp0_stage0_iter10_ignore_call0;
wire    ap_block_state13_pp0_stage0_iter11_ignore_call0;
wire    ap_block_state14_pp0_stage0_iter12_ignore_call0;
wire    ap_block_state15_pp0_stage0_iter13_ignore_call0;
wire    ap_block_state16_pp0_stage0_iter14_ignore_call0;
wire    ap_block_state17_pp0_stage0_iter15_ignore_call0;
wire    ap_block_state18_pp0_stage0_iter16_ignore_call0;
wire    ap_block_state19_pp0_stage0_iter17_ignore_call0;
wire    ap_block_state20_pp0_stage0_iter18_ignore_call0;
wire    ap_block_state21_pp0_stage0_iter19_ignore_call0;
wire    ap_block_state22_pp0_stage0_iter20_ignore_call0;
wire    ap_block_state23_pp0_stage0_iter21_ignore_call0;
wire    ap_block_state24_pp0_stage0_iter22_ignore_call0;
wire    ap_block_state25_pp0_stage0_iter23_ignore_call0;
wire    ap_block_state26_pp0_stage0_iter24_ignore_call0;
wire    ap_block_state27_pp0_stage0_iter25_ignore_call0;
wire    ap_block_state28_pp0_stage0_iter26_ignore_call0;
wire    ap_block_state29_pp0_stage0_iter27_ignore_call0;
wire    ap_block_state30_pp0_stage0_iter28_ignore_call0;
wire    ap_block_state31_pp0_stage0_iter29_ignore_call0;
wire    ap_block_state32_pp0_stage0_iter30_ignore_call0;
wire    ap_block_state33_pp0_stage0_iter31_ignore_call0;
reg    ap_block_pp0_stage0_11001_ignoreCallOp149;
wire    grp_logistic_activate_fu_307_ap_start;
wire    grp_logistic_activate_fu_307_ap_done;
wire    grp_logistic_activate_fu_307_ap_idle;
wire    grp_logistic_activate_fu_307_ap_ready;
reg    grp_logistic_activate_fu_307_ap_ce;
reg    ap_predicate_op150_call_state3;
reg    ap_block_pp0_stage0_11001_ignoreCallOp150;
wire    grp_logistic_activate_fu_318_ap_start;
wire    grp_logistic_activate_fu_318_ap_done;
wire    grp_logistic_activate_fu_318_ap_idle;
wire    grp_logistic_activate_fu_318_ap_ready;
reg    grp_logistic_activate_fu_318_ap_ce;
reg    ap_predicate_op151_call_state3;
reg    ap_block_pp0_stage0_11001_ignoreCallOp151;
wire    grp_logistic_activate_fu_329_ap_start;
wire    grp_logistic_activate_fu_329_ap_done;
wire    grp_logistic_activate_fu_329_ap_idle;
wire    grp_logistic_activate_fu_329_ap_ready;
reg    grp_logistic_activate_fu_329_ap_ce;
reg    ap_predicate_op152_call_state3;
reg    ap_block_pp0_stage0_11001_ignoreCallOp152;
reg   [15:0] ap_phi_mux_tmp_data_sub_data_0_s_phi_fu_263_p4;
reg   [15:0] ap_phi_reg_pp0_iter30_tmp_data_sub_data_0_s_reg_260;
wire   [15:0] ap_phi_reg_pp0_iter0_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter1_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter2_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter3_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter4_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter5_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter6_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter7_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter8_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter9_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter10_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter11_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter12_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter13_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter14_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter15_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter16_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter17_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter18_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter19_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter20_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter21_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter22_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter23_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter24_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter25_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter26_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter27_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter28_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_reg_pp0_iter29_tmp_data_sub_data_0_s_reg_260;
reg   [15:0] ap_phi_mux_tmp_data_sub_data_1_s_phi_fu_272_p4;
reg   [15:0] ap_phi_reg_pp0_iter30_tmp_data_sub_data_1_s_reg_269;
wire   [15:0] ap_phi_reg_pp0_iter0_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter1_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter2_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter3_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter4_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter5_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter6_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter7_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter8_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter9_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter10_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter11_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter12_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter13_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter14_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter15_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter16_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter17_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter18_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter19_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter20_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter21_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter22_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter23_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter24_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter25_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter26_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter27_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter28_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_reg_pp0_iter29_tmp_data_sub_data_1_s_reg_269;
reg   [15:0] ap_phi_mux_tmp_data_sub_data_2_s_phi_fu_281_p4;
reg   [15:0] ap_phi_reg_pp0_iter30_tmp_data_sub_data_2_s_reg_278;
wire   [15:0] ap_phi_reg_pp0_iter0_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter1_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter2_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter3_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter4_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter5_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter6_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter7_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter8_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter9_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter10_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter11_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter12_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter13_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter14_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter15_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter16_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter17_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter18_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter19_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter20_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter21_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter22_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter23_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter24_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter25_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter26_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter27_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter28_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_reg_pp0_iter29_tmp_data_sub_data_2_s_reg_278;
reg   [15:0] ap_phi_mux_tmp_data_sub_data_3_s_phi_fu_290_p4;
reg   [15:0] ap_phi_reg_pp0_iter30_tmp_data_sub_data_3_s_reg_287;
wire   [15:0] ap_phi_reg_pp0_iter0_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter1_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter2_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter3_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter4_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter5_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter6_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter7_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter8_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter9_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter10_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter11_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter12_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter13_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter14_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter15_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter16_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter17_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter18_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter19_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter20_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter21_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter22_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter23_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter24_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter25_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter26_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter27_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter28_tmp_data_sub_data_3_s_reg_287;
reg   [15:0] ap_phi_reg_pp0_iter29_tmp_data_sub_data_3_s_reg_287;
reg    grp_logistic_activate_fu_296_ap_start_reg;
reg    ap_predicate_op149_call_state3_state2;
reg    grp_logistic_activate_fu_307_ap_start_reg;
reg    ap_predicate_op150_call_state3_state2;
reg    grp_logistic_activate_fu_318_ap_start_reg;
reg    ap_predicate_op151_call_state3_state2;
reg    grp_logistic_activate_fu_329_ap_start_reg;
reg    ap_predicate_op152_call_state3_state2;
reg    ap_block_pp0_stage0_01001;
wire   [5:0] zext_ln1354_fu_340_p1;
wire   [5:0] zext_ln1354_1_fu_350_p1;
wire   [7:0] tmp_fu_364_p3;
wire   [7:0] bound4_fu_384_p0;
wire   [4:0] bound4_fu_384_p1;
wire   [5:0] zext_ln17_fu_396_p1;
wire   [5:0] zext_ln20_fu_405_p1;
wire   [0:0] icmp_ln54_1_fu_409_p2;
wire   [0:0] icmp_ln54_2_fu_400_p2;
wire   [0:0] icmp_ln17_fu_431_p2;
wire   [4:0] add_ln14_1_fu_444_p2;
wire   [5:0] zext_ln17_1_fu_450_p1;
wire   [0:0] icmp_ln54_4_fu_454_p2;
wire   [0:0] or_ln54_2_fu_467_p2;
wire   [0:0] or_ln54_fu_414_p2;
wire   [0:0] icmp_ln20_fu_486_p2;
wire   [0:0] xor_ln1598_fu_480_p2;
wire   [4:0] select_ln1598_fu_436_p3;
wire   [0:0] and_ln1598_fu_492_p2;
wire   [0:0] or_ln1598_fu_512_p2;
wire   [4:0] col_idx_fu_506_p2;
wire   [5:0] zext_ln20_1_fu_526_p1;
wire   [0:0] icmp_ln54_5_fu_530_p2;
wire   [0:0] select_ln1598_1_fu_459_p3;
wire   [0:0] or_ln54_3_fu_535_p2;
wire   [0:0] select_ln1598_2_fu_472_p3;
wire   [3:0] select_ln1598_3_fu_518_p3;
wire   [2:0] trunc_ln29_fu_615_p1;
wire   [4:0] bvh_d_index_fu_619_p3;
wire   [28:0] zext_ln29_fu_627_p1;
wire   [28:0] shl_ln791_fu_631_p2;
wire   [28:0] and_ln791_fu_637_p2;
wire   [4:0] bvh_d_index_1_fu_648_p2;
wire   [31:0] zext_ln34_fu_654_p1;
wire   [31:0] shl_ln791_1_fu_658_p2;
wire   [31:0] and_ln791_1_fu_664_p2;
wire   [4:0] bvh_d_index_2_fu_675_p2;
wire   [31:0] zext_ln39_fu_681_p1;
wire   [31:0] shl_ln791_2_fu_685_p2;
wire   [31:0] and_ln791_2_fu_691_p2;
wire   [4:0] bvh_d_index_3_fu_702_p2;
wire   [31:0] zext_ln44_fu_708_p1;
wire   [31:0] shl_ln791_3_fu_712_p2;
wire   [31:0] and_ln791_3_fu_718_p2;
wire   [0:0] select_ln1598_4_fu_541_p3;
wire   [0:0] icmp_ln54_fu_729_p2;
wire   [0:0] or_ln54_1_fu_735_p2;
wire   [8:0] add_ln17_fu_753_p2;
wire    ap_CS_fsm_state34;
reg    ap_block_state34;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [12:0] bound4_fu_384_p00;
wire   [12:0] bound4_fu_384_p10;
reg    ap_condition_1020;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 inStream_V_data_0_sel_rd = 1'b0;
#0 inStream_V_data_0_sel_wr = 1'b0;
#0 inStream_V_data_0_state = 2'd0;
#0 inStream_V_keep_V_0_sel_rd = 1'b0;
#0 inStream_V_keep_V_0_sel_wr = 1'b0;
#0 inStream_V_keep_V_0_state = 2'd0;
#0 inStream_V_strb_V_0_sel_rd = 1'b0;
#0 inStream_V_strb_V_0_sel_wr = 1'b0;
#0 inStream_V_strb_V_0_state = 2'd0;
#0 inStream_V_user_V_0_sel_rd = 1'b0;
#0 inStream_V_user_V_0_sel_wr = 1'b0;
#0 inStream_V_user_V_0_state = 2'd0;
#0 inStream_V_id_V_0_sel_rd = 1'b0;
#0 inStream_V_id_V_0_sel_wr = 1'b0;
#0 inStream_V_id_V_0_state = 2'd0;
#0 inStream_V_dest_V_0_sel_rd = 1'b0;
#0 inStream_V_dest_V_0_sel_wr = 1'b0;
#0 inStream_V_dest_V_0_state = 2'd0;
#0 outStream_V_data_1_sel_rd = 1'b0;
#0 outStream_V_data_1_sel_wr = 1'b0;
#0 outStream_V_data_1_state = 2'd0;
#0 outStream_V_keep_V_1_sel_rd = 1'b0;
#0 outStream_V_keep_V_1_sel_wr = 1'b0;
#0 outStream_V_keep_V_1_state = 2'd0;
#0 outStream_V_strb_V_1_sel_rd = 1'b0;
#0 outStream_V_strb_V_1_sel_wr = 1'b0;
#0 outStream_V_strb_V_1_state = 2'd0;
#0 outStream_V_user_V_1_sel_rd = 1'b0;
#0 outStream_V_user_V_1_sel_wr = 1'b0;
#0 outStream_V_user_V_1_state = 2'd0;
#0 outStream_V_last_V_1_sel_rd = 1'b0;
#0 outStream_V_last_V_1_sel_wr = 1'b0;
#0 outStream_V_last_V_1_state = 2'd0;
#0 outStream_V_id_V_1_sel_rd = 1'b0;
#0 outStream_V_id_V_1_sel_wr = 1'b0;
#0 outStream_V_id_V_1_state = 2'd0;
#0 outStream_V_dest_V_1_sel_rd = 1'b0;
#0 outStream_V_dest_V_1_sel_wr = 1'b0;
#0 outStream_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 grp_logistic_activate_fu_296_ap_start_reg = 1'b0;
#0 grp_logistic_activate_fu_307_ap_start_reg = 1'b0;
#0 grp_logistic_activate_fu_318_ap_start_reg = 1'b0;
#0 grp_logistic_activate_fu_329_ap_start_reg = 1'b0;
end

yolo_yolo_top_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
yolo_yolo_top_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .activate_en_V(activate_en_V),
    .input_h_V(input_h_V),
    .input_w_V(input_w_V)
);

logistic_activate grp_logistic_activate_fu_296(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_logistic_activate_fu_296_ap_start),
    .ap_done(grp_logistic_activate_fu_296_ap_done),
    .ap_idle(grp_logistic_activate_fu_296_ap_idle),
    .ap_ready(grp_logistic_activate_fu_296_ap_ready),
    .ap_ce(grp_logistic_activate_fu_296_ap_ce),
    .val_in_V(trunc_ln203_reg_863),
    .ap_return(grp_logistic_activate_fu_296_ap_return)
);

logistic_activate grp_logistic_activate_fu_307(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_logistic_activate_fu_307_ap_start),
    .ap_done(grp_logistic_activate_fu_307_ap_done),
    .ap_idle(grp_logistic_activate_fu_307_ap_idle),
    .ap_ready(grp_logistic_activate_fu_307_ap_ready),
    .ap_ce(grp_logistic_activate_fu_307_ap_ce),
    .val_in_V(p_02_new8_reg_869),
    .ap_return(grp_logistic_activate_fu_307_ap_return)
);

logistic_activate grp_logistic_activate_fu_318(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_logistic_activate_fu_318_ap_start),
    .ap_done(grp_logistic_activate_fu_318_ap_done),
    .ap_idle(grp_logistic_activate_fu_318_ap_idle),
    .ap_ready(grp_logistic_activate_fu_318_ap_ready),
    .ap_ce(grp_logistic_activate_fu_318_ap_ce),
    .val_in_V(p_01_new_reg_875),
    .ap_return(grp_logistic_activate_fu_318_ap_return)
);

logistic_activate grp_logistic_activate_fu_329(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_logistic_activate_fu_329_ap_start),
    .ap_done(grp_logistic_activate_fu_329_ap_done),
    .ap_idle(grp_logistic_activate_fu_329_ap_idle),
    .ap_ready(grp_logistic_activate_fu_329_ap_ready),
    .ap_ce(grp_logistic_activate_fu_329_ap_ce),
    .val_in_V(p_0_new_reg_881),
    .ap_return(grp_logistic_activate_fu_329_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter31 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_logistic_activate_fu_296_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op149_call_state3_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_logistic_activate_fu_296_ap_start_reg <= 1'b1;
        end else if ((grp_logistic_activate_fu_296_ap_ready == 1'b1)) begin
            grp_logistic_activate_fu_296_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_logistic_activate_fu_307_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op150_call_state3_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_logistic_activate_fu_307_ap_start_reg <= 1'b1;
        end else if ((grp_logistic_activate_fu_307_ap_ready == 1'b1)) begin
            grp_logistic_activate_fu_307_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_logistic_activate_fu_318_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op151_call_state3_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_logistic_activate_fu_318_ap_start_reg <= 1'b1;
        end else if ((grp_logistic_activate_fu_318_ap_ready == 1'b1)) begin
            grp_logistic_activate_fu_318_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_logistic_activate_fu_329_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op152_call_state3_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_logistic_activate_fu_329_ap_start_reg <= 1'b1;
        end else if ((grp_logistic_activate_fu_329_ap_ready == 1'b1)) begin
            grp_logistic_activate_fu_329_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_data_0_ack_out == 1'b1) & (inStream_V_data_0_vld_out == 1'b1))) begin
            inStream_V_data_0_sel_rd <= ~inStream_V_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_data_0_ack_in == 1'b1) & (inStream_V_data_0_vld_in == 1'b1))) begin
            inStream_V_data_0_sel_wr <= ~inStream_V_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_data_0_state == 2'd2) & (inStream_V_data_0_vld_in == 1'b0)) | ((inStream_V_data_0_state == 2'd3) & (inStream_V_data_0_vld_in == 1'b0) & (inStream_V_data_0_ack_out == 1'b1)))) begin
            inStream_V_data_0_state <= 2'd2;
        end else if ((((inStream_V_data_0_state == 2'd1) & (inStream_V_data_0_ack_out == 1'b0)) | ((inStream_V_data_0_state == 2'd3) & (inStream_V_data_0_ack_out == 1'b0) & (inStream_V_data_0_vld_in == 1'b1)))) begin
            inStream_V_data_0_state <= 2'd1;
        end else if (((~((inStream_V_data_0_vld_in == 1'b0) & (inStream_V_data_0_ack_out == 1'b1)) & ~((inStream_V_data_0_ack_out == 1'b0) & (inStream_V_data_0_vld_in == 1'b1)) & (inStream_V_data_0_state == 2'd3)) | ((inStream_V_data_0_state == 2'd1) & (inStream_V_data_0_ack_out == 1'b1)) | ((inStream_V_data_0_state == 2'd2) & (inStream_V_data_0_vld_in == 1'b1)))) begin
            inStream_V_data_0_state <= 2'd3;
        end else begin
            inStream_V_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_out == 1'b1) & (inStream_V_dest_V_0_vld_out == 1'b1))) begin
            inStream_V_dest_V_0_sel_rd <= ~inStream_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_in == 1'b1) & (inStream_V_dest_V_0_vld_in == 1'b1))) begin
            inStream_V_dest_V_0_sel_wr <= ~inStream_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_dest_V_0_state == 2'd2) & (inStream_V_dest_V_0_vld_in == 1'b0)) | ((inStream_V_dest_V_0_state == 2'd3) & (inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd2;
        end else if ((((inStream_V_dest_V_0_state == 2'd1) & (inStream_V_dest_V_0_ack_out == 1'b0)) | ((inStream_V_dest_V_0_state == 2'd3) & (inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd1;
        end else if (((~((inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1)) & ~((inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1)) & (inStream_V_dest_V_0_state == 2'd3)) | ((inStream_V_dest_V_0_state == 2'd1) & (inStream_V_dest_V_0_ack_out == 1'b1)) | ((inStream_V_dest_V_0_state == 2'd2) & (inStream_V_dest_V_0_vld_in == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd3;
        end else begin
            inStream_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_id_V_0_ack_out == 1'b1) & (inStream_V_id_V_0_vld_out == 1'b1))) begin
            inStream_V_id_V_0_sel_rd <= ~inStream_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_id_V_0_ack_in == 1'b1) & (inStream_V_id_V_0_vld_in == 1'b1))) begin
            inStream_V_id_V_0_sel_wr <= ~inStream_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_id_V_0_state == 2'd2) & (inStream_V_id_V_0_vld_in == 1'b0)) | ((inStream_V_id_V_0_state == 2'd3) & (inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_ack_out == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd2;
        end else if ((((inStream_V_id_V_0_state == 2'd1) & (inStream_V_id_V_0_ack_out == 1'b0)) | ((inStream_V_id_V_0_state == 2'd3) & (inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_vld_in == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd1;
        end else if (((~((inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_ack_out == 1'b1)) & ~((inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_vld_in == 1'b1)) & (inStream_V_id_V_0_state == 2'd3)) | ((inStream_V_id_V_0_state == 2'd1) & (inStream_V_id_V_0_ack_out == 1'b1)) | ((inStream_V_id_V_0_state == 2'd2) & (inStream_V_id_V_0_vld_in == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd3;
        end else begin
            inStream_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_ack_out == 1'b1) & (inStream_V_keep_V_0_vld_out == 1'b1))) begin
            inStream_V_keep_V_0_sel_rd <= ~inStream_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_ack_in == 1'b1) & (inStream_V_keep_V_0_vld_in == 1'b1))) begin
            inStream_V_keep_V_0_sel_wr <= ~inStream_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_keep_V_0_state == 2'd2) & (inStream_V_keep_V_0_vld_in == 1'b0)) | ((inStream_V_keep_V_0_state == 2'd3) & (inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd2;
        end else if ((((inStream_V_keep_V_0_state == 2'd1) & (inStream_V_keep_V_0_ack_out == 1'b0)) | ((inStream_V_keep_V_0_state == 2'd3) & (inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd1;
        end else if (((~((inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1)) & ~((inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1)) & (inStream_V_keep_V_0_state == 2'd3)) | ((inStream_V_keep_V_0_state == 2'd1) & (inStream_V_keep_V_0_ack_out == 1'b1)) | ((inStream_V_keep_V_0_state == 2'd2) & (inStream_V_keep_V_0_vld_in == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd3;
        end else begin
            inStream_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_out == 1'b1) & (inStream_V_strb_V_0_vld_out == 1'b1))) begin
            inStream_V_strb_V_0_sel_rd <= ~inStream_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_in == 1'b1) & (inStream_V_strb_V_0_vld_in == 1'b1))) begin
            inStream_V_strb_V_0_sel_wr <= ~inStream_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_strb_V_0_state == 2'd2) & (inStream_V_strb_V_0_vld_in == 1'b0)) | ((inStream_V_strb_V_0_state == 2'd3) & (inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd2;
        end else if ((((inStream_V_strb_V_0_state == 2'd1) & (inStream_V_strb_V_0_ack_out == 1'b0)) | ((inStream_V_strb_V_0_state == 2'd3) & (inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd1;
        end else if (((~((inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1)) & ~((inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1)) & (inStream_V_strb_V_0_state == 2'd3)) | ((inStream_V_strb_V_0_state == 2'd1) & (inStream_V_strb_V_0_ack_out == 1'b1)) | ((inStream_V_strb_V_0_state == 2'd2) & (inStream_V_strb_V_0_vld_in == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd3;
        end else begin
            inStream_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_out == 1'b1) & (inStream_V_user_V_0_vld_out == 1'b1))) begin
            inStream_V_user_V_0_sel_rd <= ~inStream_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_in == 1'b1) & (inStream_V_user_V_0_vld_in == 1'b1))) begin
            inStream_V_user_V_0_sel_wr <= ~inStream_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_user_V_0_state == 2'd2) & (inStream_V_user_V_0_vld_in == 1'b0)) | ((inStream_V_user_V_0_state == 2'd3) & (inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd2;
        end else if ((((inStream_V_user_V_0_state == 2'd1) & (inStream_V_user_V_0_ack_out == 1'b0)) | ((inStream_V_user_V_0_state == 2'd3) & (inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd1;
        end else if (((~((inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1)) & ~((inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1)) & (inStream_V_user_V_0_state == 2'd3)) | ((inStream_V_user_V_0_state == 2'd1) & (inStream_V_user_V_0_ack_out == 1'b1)) | ((inStream_V_user_V_0_state == 2'd2) & (inStream_V_user_V_0_vld_in == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd3;
        end else begin
            inStream_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_data_1_ack_out == 1'b1) & (outStream_V_data_1_vld_out == 1'b1))) begin
            outStream_V_data_1_sel_rd <= ~outStream_V_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_data_1_ack_in == 1'b1) & (outStream_V_data_1_vld_in == 1'b1))) begin
            outStream_V_data_1_sel_wr <= ~outStream_V_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_data_1_state == 2'd2) & (outStream_V_data_1_vld_in == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_V_data_1_vld_in == 1'b0) & (outStream_V_data_1_ack_out == 1'b1)))) begin
            outStream_V_data_1_state <= 2'd2;
        end else if ((((outStream_V_data_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_data_1_vld_in == 1'b1)))) begin
            outStream_V_data_1_state <= 2'd1;
        end else if (((~((outStream_V_data_1_vld_in == 1'b0) & (outStream_V_data_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_data_1_vld_in == 1'b1)) & (outStream_V_data_1_state == 2'd3)) | ((outStream_V_data_1_state == 2'd1) & (outStream_V_data_1_ack_out == 1'b1)) | ((outStream_V_data_1_state == 2'd2) & (outStream_V_data_1_vld_in == 1'b1)))) begin
            outStream_V_data_1_state <= 2'd3;
        end else begin
            outStream_V_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_out == 1'b1) & (outStream_V_dest_V_1_vld_out == 1'b1))) begin
            outStream_V_dest_V_1_sel_rd <= ~outStream_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_in == 1'b1) & (outStream_V_dest_V_1_vld_in == 1'b1))) begin
            outStream_V_dest_V_1_sel_wr <= ~outStream_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_dest_V_1_state == 2'd2) & (outStream_V_dest_V_1_vld_in == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd2;
        end else if ((((outStream_V_dest_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd1;
        end else if (((~((outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)) & (outStream_V_dest_V_1_state == 2'd3)) | ((outStream_V_dest_V_1_state == 2'd1) & (outStream_V_dest_V_1_ack_out == 1'b1)) | ((outStream_V_dest_V_1_state == 2'd2) & (outStream_V_dest_V_1_vld_in == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd3;
        end else begin
            outStream_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_out == 1'b1) & (outStream_V_id_V_1_vld_out == 1'b1))) begin
            outStream_V_id_V_1_sel_rd <= ~outStream_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_in == 1'b1) & (outStream_V_id_V_1_vld_in == 1'b1))) begin
            outStream_V_id_V_1_sel_wr <= ~outStream_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_id_V_1_state == 2'd2) & (outStream_V_id_V_1_vld_in == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd2;
        end else if ((((outStream_V_id_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd1;
        end else if (((~((outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)) & (outStream_V_id_V_1_state == 2'd3)) | ((outStream_V_id_V_1_state == 2'd1) & (outStream_V_id_V_1_ack_out == 1'b1)) | ((outStream_V_id_V_1_state == 2'd2) & (outStream_V_id_V_1_vld_in == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd3;
        end else begin
            outStream_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_out == 1'b1) & (outStream_V_keep_V_1_vld_out == 1'b1))) begin
            outStream_V_keep_V_1_sel_rd <= ~outStream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_in == 1'b1) & (outStream_V_keep_V_1_vld_in == 1'b1))) begin
            outStream_V_keep_V_1_sel_wr <= ~outStream_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_keep_V_1_state == 2'd2) & (outStream_V_keep_V_1_vld_in == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd2;
        end else if ((((outStream_V_keep_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd1;
        end else if (((~((outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)) & (outStream_V_keep_V_1_state == 2'd3)) | ((outStream_V_keep_V_1_state == 2'd1) & (outStream_V_keep_V_1_ack_out == 1'b1)) | ((outStream_V_keep_V_1_state == 2'd2) & (outStream_V_keep_V_1_vld_in == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd3;
        end else begin
            outStream_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_out == 1'b1) & (outStream_V_last_V_1_vld_out == 1'b1))) begin
            outStream_V_last_V_1_sel_rd <= ~outStream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_in == 1'b1) & (outStream_V_last_V_1_vld_in == 1'b1))) begin
            outStream_V_last_V_1_sel_wr <= ~outStream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_last_V_1_state == 2'd2) & (outStream_V_last_V_1_vld_in == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd2;
        end else if ((((outStream_V_last_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd1;
        end else if (((~((outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)) & (outStream_V_last_V_1_state == 2'd3)) | ((outStream_V_last_V_1_state == 2'd1) & (outStream_V_last_V_1_ack_out == 1'b1)) | ((outStream_V_last_V_1_state == 2'd2) & (outStream_V_last_V_1_vld_in == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd3;
        end else begin
            outStream_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_out == 1'b1) & (outStream_V_strb_V_1_vld_out == 1'b1))) begin
            outStream_V_strb_V_1_sel_rd <= ~outStream_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_in == 1'b1) & (outStream_V_strb_V_1_vld_in == 1'b1))) begin
            outStream_V_strb_V_1_sel_wr <= ~outStream_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_strb_V_1_state == 2'd2) & (outStream_V_strb_V_1_vld_in == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd2;
        end else if ((((outStream_V_strb_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd1;
        end else if (((~((outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)) & (outStream_V_strb_V_1_state == 2'd3)) | ((outStream_V_strb_V_1_state == 2'd1) & (outStream_V_strb_V_1_ack_out == 1'b1)) | ((outStream_V_strb_V_1_state == 2'd2) & (outStream_V_strb_V_1_vld_in == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd3;
        end else begin
            outStream_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_out == 1'b1) & (outStream_V_user_V_1_vld_out == 1'b1))) begin
            outStream_V_user_V_1_sel_rd <= ~outStream_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_in == 1'b1) & (outStream_V_user_V_1_vld_in == 1'b1))) begin
            outStream_V_user_V_1_sel_wr <= ~outStream_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_user_V_1_state == 2'd2) & (outStream_V_user_V_1_vld_in == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd2;
        end else if ((((outStream_V_user_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd1;
        end else if (((~((outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)) & (outStream_V_user_V_1_state == 2'd3)) | ((outStream_V_user_V_1_state == 2'd1) & (outStream_V_user_V_1_ack_out == 1'b1)) | ((outStream_V_user_V_1_state == 2'd2) & (outStream_V_user_V_1_vld_in == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd3;
        end else begin
            outStream_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1020)) begin
        if (((p_Result_s_fu_642_p2 == 1'd1) & (icmp_ln14_fu_420_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_tmp_data_sub_data_0_s_reg_260 <= trunc_ln203_fu_581_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter0_tmp_data_sub_data_0_s_reg_260;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1020)) begin
        if (((p_Result_1_fu_669_p2 == 1'd1) & (icmp_ln14_fu_420_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_tmp_data_sub_data_1_s_reg_269 <= {{inStream_V_data_0_data_out[31:16]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter0_tmp_data_sub_data_1_s_reg_269;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1020)) begin
        if (((p_Result_2_fu_696_p2 == 1'd1) & (icmp_ln14_fu_420_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_tmp_data_sub_data_2_s_reg_278 <= {{inStream_V_data_0_data_out[47:32]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter0_tmp_data_sub_data_2_s_reg_278;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1020)) begin
        if (((p_Result_3_fu_723_p2 == 1'd1) & (icmp_ln14_fu_420_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_tmp_data_sub_data_3_s_reg_287 <= {{inStream_V_data_0_data_out[63:48]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter0_tmp_data_sub_data_3_s_reg_287;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_420_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_op_assign_1_reg_238 <= select_ln17_fu_549_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_op_assign_1_reg_238 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_420_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_op_assign_reg_216 <= select_ln14_fu_498_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_op_assign_reg_216 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_420_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten17_reg_205 <= add_ln14_fu_425_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten17_reg_205 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_420_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_227 <= select_ln17_1_fu_759_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_227 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_420_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_ch_idx_0_reg_249 <= input_ch_idx_fu_747_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        input_ch_idx_0_reg_249 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        activate_en_V_read_reg_780 <= activate_en_V;
        add_ln1354_1_reg_793 <= add_ln1354_1_fu_354_p2;
        add_ln1354_reg_787 <= add_ln1354_fu_344_p2;
        bound4_reg_809 <= bound4_fu_384_p2;
        bound_reg_804[7 : 3] <= bound_fu_372_p1[7 : 3];
        icmp_ln54_3_reg_814 <= icmp_ln54_3_fu_390_p2;
        trunc_ln791_reg_799 <= trunc_ln791_fu_360_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        ap_phi_reg_pp0_iter10_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter9_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter10_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter9_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter10_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter9_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter10_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter9_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        ap_phi_reg_pp0_iter11_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter10_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter11_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter10_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter11_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter10_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter11_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter10_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        ap_phi_reg_pp0_iter12_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter11_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter12_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter11_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter12_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter11_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter12_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter11_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        ap_phi_reg_pp0_iter13_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter12_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter13_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter12_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter13_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter12_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter13_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter12_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
        ap_phi_reg_pp0_iter14_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter13_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter14_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter13_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter14_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter13_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter14_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter13_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter14 == 1'b1))) begin
        ap_phi_reg_pp0_iter15_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter14_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter15_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter14_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter15_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter14_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter15_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter14_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter15 == 1'b1))) begin
        ap_phi_reg_pp0_iter16_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter15_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter16_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter15_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter16_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter15_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter16_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter15_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        ap_phi_reg_pp0_iter17_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter16_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter17_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter16_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter17_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter16_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter17_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter16_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter17 == 1'b1))) begin
        ap_phi_reg_pp0_iter18_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter17_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter18_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter17_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter18_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter17_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter18_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter17_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        ap_phi_reg_pp0_iter19_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter18_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter19_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter18_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter19_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter18_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter19_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter18_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter19 == 1'b1))) begin
        ap_phi_reg_pp0_iter20_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter19_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter20_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter19_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter20_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter19_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter20_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter19_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter20 == 1'b1))) begin
        ap_phi_reg_pp0_iter21_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter20_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter21_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter20_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter21_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter20_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter21_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter20_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1))) begin
        ap_phi_reg_pp0_iter22_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter21_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter22_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter21_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter22_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter21_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter22_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter21_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter22 == 1'b1))) begin
        ap_phi_reg_pp0_iter23_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter22_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter23_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter22_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter23_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter22_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter23_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter22_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        ap_phi_reg_pp0_iter24_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter23_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter24_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter23_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter24_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter23_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter24_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter23_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        ap_phi_reg_pp0_iter25_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter24_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter25_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter24_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter25_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter24_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter25_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter24_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter25 == 1'b1))) begin
        ap_phi_reg_pp0_iter26_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter25_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter26_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter25_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter26_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter25_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter26_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter25_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter26 == 1'b1))) begin
        ap_phi_reg_pp0_iter27_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter26_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter27_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter26_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter27_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter26_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter27_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter26_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter27 == 1'b1))) begin
        ap_phi_reg_pp0_iter28_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter27_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter28_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter27_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter28_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter27_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter28_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter27_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter28 == 1'b1))) begin
        ap_phi_reg_pp0_iter29_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter28_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter29_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter28_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter29_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter28_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter29_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter28_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter2_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter1_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter2_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter1_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter2_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter1_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter2_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter1_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter29 == 1'b1))) begin
        ap_phi_reg_pp0_iter30_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter29_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter30_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter29_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter30_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter29_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter30_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter29_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_reg_pp0_iter3_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter2_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter3_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter2_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter3_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter2_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter3_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter2_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_reg_pp0_iter4_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter3_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter4_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter3_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter4_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter3_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter4_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter3_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ap_phi_reg_pp0_iter5_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter4_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter5_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter4_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter5_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter4_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter5_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter4_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        ap_phi_reg_pp0_iter6_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter5_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter6_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter5_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter6_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter5_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter6_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter5_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        ap_phi_reg_pp0_iter7_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter6_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter7_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter6_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter7_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter6_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter7_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter6_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        ap_phi_reg_pp0_iter8_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter7_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter8_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter7_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter8_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter7_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter8_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter7_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        ap_phi_reg_pp0_iter9_tmp_data_sub_data_0_s_reg_260 <= ap_phi_reg_pp0_iter8_tmp_data_sub_data_0_s_reg_260;
        ap_phi_reg_pp0_iter9_tmp_data_sub_data_1_s_reg_269 <= ap_phi_reg_pp0_iter8_tmp_data_sub_data_1_s_reg_269;
        ap_phi_reg_pp0_iter9_tmp_data_sub_data_2_s_reg_278 <= ap_phi_reg_pp0_iter8_tmp_data_sub_data_2_s_reg_278;
        ap_phi_reg_pp0_iter9_tmp_data_sub_data_3_s_reg_287 <= ap_phi_reg_pp0_iter8_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln14_reg_819 <= icmp_ln14_fu_420_p2;
        icmp_ln14_reg_819_pp0_iter1_reg <= icmp_ln14_reg_819;
        p_Result_1_reg_891_pp0_iter1_reg <= p_Result_1_reg_891;
        p_Result_2_reg_895_pp0_iter1_reg <= p_Result_2_reg_895;
        p_Result_3_reg_899_pp0_iter1_reg <= p_Result_3_reg_899;
        p_Result_s_reg_887_pp0_iter1_reg <= p_Result_s_reg_887;
        tmp_dest_V_reg_858_pp0_iter1_reg <= tmp_dest_V_reg_858;
        tmp_id_V_reg_853_pp0_iter1_reg <= tmp_id_V_reg_853;
        tmp_keep_V_reg_838_pp0_iter1_reg <= tmp_keep_V_reg_838;
        tmp_last_V_reg_903_pp0_iter1_reg <= tmp_last_V_reg_903;
        tmp_strb_V_reg_843_pp0_iter1_reg <= tmp_strb_V_reg_843;
        tmp_user_V_reg_848_pp0_iter1_reg <= tmp_user_V_reg_848;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln14_reg_819_pp0_iter10_reg <= icmp_ln14_reg_819_pp0_iter9_reg;
        icmp_ln14_reg_819_pp0_iter11_reg <= icmp_ln14_reg_819_pp0_iter10_reg;
        icmp_ln14_reg_819_pp0_iter12_reg <= icmp_ln14_reg_819_pp0_iter11_reg;
        icmp_ln14_reg_819_pp0_iter13_reg <= icmp_ln14_reg_819_pp0_iter12_reg;
        icmp_ln14_reg_819_pp0_iter14_reg <= icmp_ln14_reg_819_pp0_iter13_reg;
        icmp_ln14_reg_819_pp0_iter15_reg <= icmp_ln14_reg_819_pp0_iter14_reg;
        icmp_ln14_reg_819_pp0_iter16_reg <= icmp_ln14_reg_819_pp0_iter15_reg;
        icmp_ln14_reg_819_pp0_iter17_reg <= icmp_ln14_reg_819_pp0_iter16_reg;
        icmp_ln14_reg_819_pp0_iter18_reg <= icmp_ln14_reg_819_pp0_iter17_reg;
        icmp_ln14_reg_819_pp0_iter19_reg <= icmp_ln14_reg_819_pp0_iter18_reg;
        icmp_ln14_reg_819_pp0_iter20_reg <= icmp_ln14_reg_819_pp0_iter19_reg;
        icmp_ln14_reg_819_pp0_iter21_reg <= icmp_ln14_reg_819_pp0_iter20_reg;
        icmp_ln14_reg_819_pp0_iter22_reg <= icmp_ln14_reg_819_pp0_iter21_reg;
        icmp_ln14_reg_819_pp0_iter23_reg <= icmp_ln14_reg_819_pp0_iter22_reg;
        icmp_ln14_reg_819_pp0_iter24_reg <= icmp_ln14_reg_819_pp0_iter23_reg;
        icmp_ln14_reg_819_pp0_iter25_reg <= icmp_ln14_reg_819_pp0_iter24_reg;
        icmp_ln14_reg_819_pp0_iter26_reg <= icmp_ln14_reg_819_pp0_iter25_reg;
        icmp_ln14_reg_819_pp0_iter27_reg <= icmp_ln14_reg_819_pp0_iter26_reg;
        icmp_ln14_reg_819_pp0_iter28_reg <= icmp_ln14_reg_819_pp0_iter27_reg;
        icmp_ln14_reg_819_pp0_iter29_reg <= icmp_ln14_reg_819_pp0_iter28_reg;
        icmp_ln14_reg_819_pp0_iter2_reg <= icmp_ln14_reg_819_pp0_iter1_reg;
        icmp_ln14_reg_819_pp0_iter30_reg <= icmp_ln14_reg_819_pp0_iter29_reg;
        icmp_ln14_reg_819_pp0_iter3_reg <= icmp_ln14_reg_819_pp0_iter2_reg;
        icmp_ln14_reg_819_pp0_iter4_reg <= icmp_ln14_reg_819_pp0_iter3_reg;
        icmp_ln14_reg_819_pp0_iter5_reg <= icmp_ln14_reg_819_pp0_iter4_reg;
        icmp_ln14_reg_819_pp0_iter6_reg <= icmp_ln14_reg_819_pp0_iter5_reg;
        icmp_ln14_reg_819_pp0_iter7_reg <= icmp_ln14_reg_819_pp0_iter6_reg;
        icmp_ln14_reg_819_pp0_iter8_reg <= icmp_ln14_reg_819_pp0_iter7_reg;
        icmp_ln14_reg_819_pp0_iter9_reg <= icmp_ln14_reg_819_pp0_iter8_reg;
        p_Result_1_reg_891_pp0_iter10_reg <= p_Result_1_reg_891_pp0_iter9_reg;
        p_Result_1_reg_891_pp0_iter11_reg <= p_Result_1_reg_891_pp0_iter10_reg;
        p_Result_1_reg_891_pp0_iter12_reg <= p_Result_1_reg_891_pp0_iter11_reg;
        p_Result_1_reg_891_pp0_iter13_reg <= p_Result_1_reg_891_pp0_iter12_reg;
        p_Result_1_reg_891_pp0_iter14_reg <= p_Result_1_reg_891_pp0_iter13_reg;
        p_Result_1_reg_891_pp0_iter15_reg <= p_Result_1_reg_891_pp0_iter14_reg;
        p_Result_1_reg_891_pp0_iter16_reg <= p_Result_1_reg_891_pp0_iter15_reg;
        p_Result_1_reg_891_pp0_iter17_reg <= p_Result_1_reg_891_pp0_iter16_reg;
        p_Result_1_reg_891_pp0_iter18_reg <= p_Result_1_reg_891_pp0_iter17_reg;
        p_Result_1_reg_891_pp0_iter19_reg <= p_Result_1_reg_891_pp0_iter18_reg;
        p_Result_1_reg_891_pp0_iter20_reg <= p_Result_1_reg_891_pp0_iter19_reg;
        p_Result_1_reg_891_pp0_iter21_reg <= p_Result_1_reg_891_pp0_iter20_reg;
        p_Result_1_reg_891_pp0_iter22_reg <= p_Result_1_reg_891_pp0_iter21_reg;
        p_Result_1_reg_891_pp0_iter23_reg <= p_Result_1_reg_891_pp0_iter22_reg;
        p_Result_1_reg_891_pp0_iter24_reg <= p_Result_1_reg_891_pp0_iter23_reg;
        p_Result_1_reg_891_pp0_iter25_reg <= p_Result_1_reg_891_pp0_iter24_reg;
        p_Result_1_reg_891_pp0_iter26_reg <= p_Result_1_reg_891_pp0_iter25_reg;
        p_Result_1_reg_891_pp0_iter27_reg <= p_Result_1_reg_891_pp0_iter26_reg;
        p_Result_1_reg_891_pp0_iter28_reg <= p_Result_1_reg_891_pp0_iter27_reg;
        p_Result_1_reg_891_pp0_iter29_reg <= p_Result_1_reg_891_pp0_iter28_reg;
        p_Result_1_reg_891_pp0_iter2_reg <= p_Result_1_reg_891_pp0_iter1_reg;
        p_Result_1_reg_891_pp0_iter3_reg <= p_Result_1_reg_891_pp0_iter2_reg;
        p_Result_1_reg_891_pp0_iter4_reg <= p_Result_1_reg_891_pp0_iter3_reg;
        p_Result_1_reg_891_pp0_iter5_reg <= p_Result_1_reg_891_pp0_iter4_reg;
        p_Result_1_reg_891_pp0_iter6_reg <= p_Result_1_reg_891_pp0_iter5_reg;
        p_Result_1_reg_891_pp0_iter7_reg <= p_Result_1_reg_891_pp0_iter6_reg;
        p_Result_1_reg_891_pp0_iter8_reg <= p_Result_1_reg_891_pp0_iter7_reg;
        p_Result_1_reg_891_pp0_iter9_reg <= p_Result_1_reg_891_pp0_iter8_reg;
        p_Result_2_reg_895_pp0_iter10_reg <= p_Result_2_reg_895_pp0_iter9_reg;
        p_Result_2_reg_895_pp0_iter11_reg <= p_Result_2_reg_895_pp0_iter10_reg;
        p_Result_2_reg_895_pp0_iter12_reg <= p_Result_2_reg_895_pp0_iter11_reg;
        p_Result_2_reg_895_pp0_iter13_reg <= p_Result_2_reg_895_pp0_iter12_reg;
        p_Result_2_reg_895_pp0_iter14_reg <= p_Result_2_reg_895_pp0_iter13_reg;
        p_Result_2_reg_895_pp0_iter15_reg <= p_Result_2_reg_895_pp0_iter14_reg;
        p_Result_2_reg_895_pp0_iter16_reg <= p_Result_2_reg_895_pp0_iter15_reg;
        p_Result_2_reg_895_pp0_iter17_reg <= p_Result_2_reg_895_pp0_iter16_reg;
        p_Result_2_reg_895_pp0_iter18_reg <= p_Result_2_reg_895_pp0_iter17_reg;
        p_Result_2_reg_895_pp0_iter19_reg <= p_Result_2_reg_895_pp0_iter18_reg;
        p_Result_2_reg_895_pp0_iter20_reg <= p_Result_2_reg_895_pp0_iter19_reg;
        p_Result_2_reg_895_pp0_iter21_reg <= p_Result_2_reg_895_pp0_iter20_reg;
        p_Result_2_reg_895_pp0_iter22_reg <= p_Result_2_reg_895_pp0_iter21_reg;
        p_Result_2_reg_895_pp0_iter23_reg <= p_Result_2_reg_895_pp0_iter22_reg;
        p_Result_2_reg_895_pp0_iter24_reg <= p_Result_2_reg_895_pp0_iter23_reg;
        p_Result_2_reg_895_pp0_iter25_reg <= p_Result_2_reg_895_pp0_iter24_reg;
        p_Result_2_reg_895_pp0_iter26_reg <= p_Result_2_reg_895_pp0_iter25_reg;
        p_Result_2_reg_895_pp0_iter27_reg <= p_Result_2_reg_895_pp0_iter26_reg;
        p_Result_2_reg_895_pp0_iter28_reg <= p_Result_2_reg_895_pp0_iter27_reg;
        p_Result_2_reg_895_pp0_iter29_reg <= p_Result_2_reg_895_pp0_iter28_reg;
        p_Result_2_reg_895_pp0_iter2_reg <= p_Result_2_reg_895_pp0_iter1_reg;
        p_Result_2_reg_895_pp0_iter3_reg <= p_Result_2_reg_895_pp0_iter2_reg;
        p_Result_2_reg_895_pp0_iter4_reg <= p_Result_2_reg_895_pp0_iter3_reg;
        p_Result_2_reg_895_pp0_iter5_reg <= p_Result_2_reg_895_pp0_iter4_reg;
        p_Result_2_reg_895_pp0_iter6_reg <= p_Result_2_reg_895_pp0_iter5_reg;
        p_Result_2_reg_895_pp0_iter7_reg <= p_Result_2_reg_895_pp0_iter6_reg;
        p_Result_2_reg_895_pp0_iter8_reg <= p_Result_2_reg_895_pp0_iter7_reg;
        p_Result_2_reg_895_pp0_iter9_reg <= p_Result_2_reg_895_pp0_iter8_reg;
        p_Result_3_reg_899_pp0_iter10_reg <= p_Result_3_reg_899_pp0_iter9_reg;
        p_Result_3_reg_899_pp0_iter11_reg <= p_Result_3_reg_899_pp0_iter10_reg;
        p_Result_3_reg_899_pp0_iter12_reg <= p_Result_3_reg_899_pp0_iter11_reg;
        p_Result_3_reg_899_pp0_iter13_reg <= p_Result_3_reg_899_pp0_iter12_reg;
        p_Result_3_reg_899_pp0_iter14_reg <= p_Result_3_reg_899_pp0_iter13_reg;
        p_Result_3_reg_899_pp0_iter15_reg <= p_Result_3_reg_899_pp0_iter14_reg;
        p_Result_3_reg_899_pp0_iter16_reg <= p_Result_3_reg_899_pp0_iter15_reg;
        p_Result_3_reg_899_pp0_iter17_reg <= p_Result_3_reg_899_pp0_iter16_reg;
        p_Result_3_reg_899_pp0_iter18_reg <= p_Result_3_reg_899_pp0_iter17_reg;
        p_Result_3_reg_899_pp0_iter19_reg <= p_Result_3_reg_899_pp0_iter18_reg;
        p_Result_3_reg_899_pp0_iter20_reg <= p_Result_3_reg_899_pp0_iter19_reg;
        p_Result_3_reg_899_pp0_iter21_reg <= p_Result_3_reg_899_pp0_iter20_reg;
        p_Result_3_reg_899_pp0_iter22_reg <= p_Result_3_reg_899_pp0_iter21_reg;
        p_Result_3_reg_899_pp0_iter23_reg <= p_Result_3_reg_899_pp0_iter22_reg;
        p_Result_3_reg_899_pp0_iter24_reg <= p_Result_3_reg_899_pp0_iter23_reg;
        p_Result_3_reg_899_pp0_iter25_reg <= p_Result_3_reg_899_pp0_iter24_reg;
        p_Result_3_reg_899_pp0_iter26_reg <= p_Result_3_reg_899_pp0_iter25_reg;
        p_Result_3_reg_899_pp0_iter27_reg <= p_Result_3_reg_899_pp0_iter26_reg;
        p_Result_3_reg_899_pp0_iter28_reg <= p_Result_3_reg_899_pp0_iter27_reg;
        p_Result_3_reg_899_pp0_iter29_reg <= p_Result_3_reg_899_pp0_iter28_reg;
        p_Result_3_reg_899_pp0_iter2_reg <= p_Result_3_reg_899_pp0_iter1_reg;
        p_Result_3_reg_899_pp0_iter3_reg <= p_Result_3_reg_899_pp0_iter2_reg;
        p_Result_3_reg_899_pp0_iter4_reg <= p_Result_3_reg_899_pp0_iter3_reg;
        p_Result_3_reg_899_pp0_iter5_reg <= p_Result_3_reg_899_pp0_iter4_reg;
        p_Result_3_reg_899_pp0_iter6_reg <= p_Result_3_reg_899_pp0_iter5_reg;
        p_Result_3_reg_899_pp0_iter7_reg <= p_Result_3_reg_899_pp0_iter6_reg;
        p_Result_3_reg_899_pp0_iter8_reg <= p_Result_3_reg_899_pp0_iter7_reg;
        p_Result_3_reg_899_pp0_iter9_reg <= p_Result_3_reg_899_pp0_iter8_reg;
        p_Result_s_reg_887_pp0_iter10_reg <= p_Result_s_reg_887_pp0_iter9_reg;
        p_Result_s_reg_887_pp0_iter11_reg <= p_Result_s_reg_887_pp0_iter10_reg;
        p_Result_s_reg_887_pp0_iter12_reg <= p_Result_s_reg_887_pp0_iter11_reg;
        p_Result_s_reg_887_pp0_iter13_reg <= p_Result_s_reg_887_pp0_iter12_reg;
        p_Result_s_reg_887_pp0_iter14_reg <= p_Result_s_reg_887_pp0_iter13_reg;
        p_Result_s_reg_887_pp0_iter15_reg <= p_Result_s_reg_887_pp0_iter14_reg;
        p_Result_s_reg_887_pp0_iter16_reg <= p_Result_s_reg_887_pp0_iter15_reg;
        p_Result_s_reg_887_pp0_iter17_reg <= p_Result_s_reg_887_pp0_iter16_reg;
        p_Result_s_reg_887_pp0_iter18_reg <= p_Result_s_reg_887_pp0_iter17_reg;
        p_Result_s_reg_887_pp0_iter19_reg <= p_Result_s_reg_887_pp0_iter18_reg;
        p_Result_s_reg_887_pp0_iter20_reg <= p_Result_s_reg_887_pp0_iter19_reg;
        p_Result_s_reg_887_pp0_iter21_reg <= p_Result_s_reg_887_pp0_iter20_reg;
        p_Result_s_reg_887_pp0_iter22_reg <= p_Result_s_reg_887_pp0_iter21_reg;
        p_Result_s_reg_887_pp0_iter23_reg <= p_Result_s_reg_887_pp0_iter22_reg;
        p_Result_s_reg_887_pp0_iter24_reg <= p_Result_s_reg_887_pp0_iter23_reg;
        p_Result_s_reg_887_pp0_iter25_reg <= p_Result_s_reg_887_pp0_iter24_reg;
        p_Result_s_reg_887_pp0_iter26_reg <= p_Result_s_reg_887_pp0_iter25_reg;
        p_Result_s_reg_887_pp0_iter27_reg <= p_Result_s_reg_887_pp0_iter26_reg;
        p_Result_s_reg_887_pp0_iter28_reg <= p_Result_s_reg_887_pp0_iter27_reg;
        p_Result_s_reg_887_pp0_iter29_reg <= p_Result_s_reg_887_pp0_iter28_reg;
        p_Result_s_reg_887_pp0_iter2_reg <= p_Result_s_reg_887_pp0_iter1_reg;
        p_Result_s_reg_887_pp0_iter3_reg <= p_Result_s_reg_887_pp0_iter2_reg;
        p_Result_s_reg_887_pp0_iter4_reg <= p_Result_s_reg_887_pp0_iter3_reg;
        p_Result_s_reg_887_pp0_iter5_reg <= p_Result_s_reg_887_pp0_iter4_reg;
        p_Result_s_reg_887_pp0_iter6_reg <= p_Result_s_reg_887_pp0_iter5_reg;
        p_Result_s_reg_887_pp0_iter7_reg <= p_Result_s_reg_887_pp0_iter6_reg;
        p_Result_s_reg_887_pp0_iter8_reg <= p_Result_s_reg_887_pp0_iter7_reg;
        p_Result_s_reg_887_pp0_iter9_reg <= p_Result_s_reg_887_pp0_iter8_reg;
        tmp_dest_V_reg_858_pp0_iter10_reg <= tmp_dest_V_reg_858_pp0_iter9_reg;
        tmp_dest_V_reg_858_pp0_iter11_reg <= tmp_dest_V_reg_858_pp0_iter10_reg;
        tmp_dest_V_reg_858_pp0_iter12_reg <= tmp_dest_V_reg_858_pp0_iter11_reg;
        tmp_dest_V_reg_858_pp0_iter13_reg <= tmp_dest_V_reg_858_pp0_iter12_reg;
        tmp_dest_V_reg_858_pp0_iter14_reg <= tmp_dest_V_reg_858_pp0_iter13_reg;
        tmp_dest_V_reg_858_pp0_iter15_reg <= tmp_dest_V_reg_858_pp0_iter14_reg;
        tmp_dest_V_reg_858_pp0_iter16_reg <= tmp_dest_V_reg_858_pp0_iter15_reg;
        tmp_dest_V_reg_858_pp0_iter17_reg <= tmp_dest_V_reg_858_pp0_iter16_reg;
        tmp_dest_V_reg_858_pp0_iter18_reg <= tmp_dest_V_reg_858_pp0_iter17_reg;
        tmp_dest_V_reg_858_pp0_iter19_reg <= tmp_dest_V_reg_858_pp0_iter18_reg;
        tmp_dest_V_reg_858_pp0_iter20_reg <= tmp_dest_V_reg_858_pp0_iter19_reg;
        tmp_dest_V_reg_858_pp0_iter21_reg <= tmp_dest_V_reg_858_pp0_iter20_reg;
        tmp_dest_V_reg_858_pp0_iter22_reg <= tmp_dest_V_reg_858_pp0_iter21_reg;
        tmp_dest_V_reg_858_pp0_iter23_reg <= tmp_dest_V_reg_858_pp0_iter22_reg;
        tmp_dest_V_reg_858_pp0_iter24_reg <= tmp_dest_V_reg_858_pp0_iter23_reg;
        tmp_dest_V_reg_858_pp0_iter25_reg <= tmp_dest_V_reg_858_pp0_iter24_reg;
        tmp_dest_V_reg_858_pp0_iter26_reg <= tmp_dest_V_reg_858_pp0_iter25_reg;
        tmp_dest_V_reg_858_pp0_iter27_reg <= tmp_dest_V_reg_858_pp0_iter26_reg;
        tmp_dest_V_reg_858_pp0_iter28_reg <= tmp_dest_V_reg_858_pp0_iter27_reg;
        tmp_dest_V_reg_858_pp0_iter29_reg <= tmp_dest_V_reg_858_pp0_iter28_reg;
        tmp_dest_V_reg_858_pp0_iter2_reg <= tmp_dest_V_reg_858_pp0_iter1_reg;
        tmp_dest_V_reg_858_pp0_iter3_reg <= tmp_dest_V_reg_858_pp0_iter2_reg;
        tmp_dest_V_reg_858_pp0_iter4_reg <= tmp_dest_V_reg_858_pp0_iter3_reg;
        tmp_dest_V_reg_858_pp0_iter5_reg <= tmp_dest_V_reg_858_pp0_iter4_reg;
        tmp_dest_V_reg_858_pp0_iter6_reg <= tmp_dest_V_reg_858_pp0_iter5_reg;
        tmp_dest_V_reg_858_pp0_iter7_reg <= tmp_dest_V_reg_858_pp0_iter6_reg;
        tmp_dest_V_reg_858_pp0_iter8_reg <= tmp_dest_V_reg_858_pp0_iter7_reg;
        tmp_dest_V_reg_858_pp0_iter9_reg <= tmp_dest_V_reg_858_pp0_iter8_reg;
        tmp_id_V_reg_853_pp0_iter10_reg <= tmp_id_V_reg_853_pp0_iter9_reg;
        tmp_id_V_reg_853_pp0_iter11_reg <= tmp_id_V_reg_853_pp0_iter10_reg;
        tmp_id_V_reg_853_pp0_iter12_reg <= tmp_id_V_reg_853_pp0_iter11_reg;
        tmp_id_V_reg_853_pp0_iter13_reg <= tmp_id_V_reg_853_pp0_iter12_reg;
        tmp_id_V_reg_853_pp0_iter14_reg <= tmp_id_V_reg_853_pp0_iter13_reg;
        tmp_id_V_reg_853_pp0_iter15_reg <= tmp_id_V_reg_853_pp0_iter14_reg;
        tmp_id_V_reg_853_pp0_iter16_reg <= tmp_id_V_reg_853_pp0_iter15_reg;
        tmp_id_V_reg_853_pp0_iter17_reg <= tmp_id_V_reg_853_pp0_iter16_reg;
        tmp_id_V_reg_853_pp0_iter18_reg <= tmp_id_V_reg_853_pp0_iter17_reg;
        tmp_id_V_reg_853_pp0_iter19_reg <= tmp_id_V_reg_853_pp0_iter18_reg;
        tmp_id_V_reg_853_pp0_iter20_reg <= tmp_id_V_reg_853_pp0_iter19_reg;
        tmp_id_V_reg_853_pp0_iter21_reg <= tmp_id_V_reg_853_pp0_iter20_reg;
        tmp_id_V_reg_853_pp0_iter22_reg <= tmp_id_V_reg_853_pp0_iter21_reg;
        tmp_id_V_reg_853_pp0_iter23_reg <= tmp_id_V_reg_853_pp0_iter22_reg;
        tmp_id_V_reg_853_pp0_iter24_reg <= tmp_id_V_reg_853_pp0_iter23_reg;
        tmp_id_V_reg_853_pp0_iter25_reg <= tmp_id_V_reg_853_pp0_iter24_reg;
        tmp_id_V_reg_853_pp0_iter26_reg <= tmp_id_V_reg_853_pp0_iter25_reg;
        tmp_id_V_reg_853_pp0_iter27_reg <= tmp_id_V_reg_853_pp0_iter26_reg;
        tmp_id_V_reg_853_pp0_iter28_reg <= tmp_id_V_reg_853_pp0_iter27_reg;
        tmp_id_V_reg_853_pp0_iter29_reg <= tmp_id_V_reg_853_pp0_iter28_reg;
        tmp_id_V_reg_853_pp0_iter2_reg <= tmp_id_V_reg_853_pp0_iter1_reg;
        tmp_id_V_reg_853_pp0_iter3_reg <= tmp_id_V_reg_853_pp0_iter2_reg;
        tmp_id_V_reg_853_pp0_iter4_reg <= tmp_id_V_reg_853_pp0_iter3_reg;
        tmp_id_V_reg_853_pp0_iter5_reg <= tmp_id_V_reg_853_pp0_iter4_reg;
        tmp_id_V_reg_853_pp0_iter6_reg <= tmp_id_V_reg_853_pp0_iter5_reg;
        tmp_id_V_reg_853_pp0_iter7_reg <= tmp_id_V_reg_853_pp0_iter6_reg;
        tmp_id_V_reg_853_pp0_iter8_reg <= tmp_id_V_reg_853_pp0_iter7_reg;
        tmp_id_V_reg_853_pp0_iter9_reg <= tmp_id_V_reg_853_pp0_iter8_reg;
        tmp_keep_V_reg_838_pp0_iter10_reg <= tmp_keep_V_reg_838_pp0_iter9_reg;
        tmp_keep_V_reg_838_pp0_iter11_reg <= tmp_keep_V_reg_838_pp0_iter10_reg;
        tmp_keep_V_reg_838_pp0_iter12_reg <= tmp_keep_V_reg_838_pp0_iter11_reg;
        tmp_keep_V_reg_838_pp0_iter13_reg <= tmp_keep_V_reg_838_pp0_iter12_reg;
        tmp_keep_V_reg_838_pp0_iter14_reg <= tmp_keep_V_reg_838_pp0_iter13_reg;
        tmp_keep_V_reg_838_pp0_iter15_reg <= tmp_keep_V_reg_838_pp0_iter14_reg;
        tmp_keep_V_reg_838_pp0_iter16_reg <= tmp_keep_V_reg_838_pp0_iter15_reg;
        tmp_keep_V_reg_838_pp0_iter17_reg <= tmp_keep_V_reg_838_pp0_iter16_reg;
        tmp_keep_V_reg_838_pp0_iter18_reg <= tmp_keep_V_reg_838_pp0_iter17_reg;
        tmp_keep_V_reg_838_pp0_iter19_reg <= tmp_keep_V_reg_838_pp0_iter18_reg;
        tmp_keep_V_reg_838_pp0_iter20_reg <= tmp_keep_V_reg_838_pp0_iter19_reg;
        tmp_keep_V_reg_838_pp0_iter21_reg <= tmp_keep_V_reg_838_pp0_iter20_reg;
        tmp_keep_V_reg_838_pp0_iter22_reg <= tmp_keep_V_reg_838_pp0_iter21_reg;
        tmp_keep_V_reg_838_pp0_iter23_reg <= tmp_keep_V_reg_838_pp0_iter22_reg;
        tmp_keep_V_reg_838_pp0_iter24_reg <= tmp_keep_V_reg_838_pp0_iter23_reg;
        tmp_keep_V_reg_838_pp0_iter25_reg <= tmp_keep_V_reg_838_pp0_iter24_reg;
        tmp_keep_V_reg_838_pp0_iter26_reg <= tmp_keep_V_reg_838_pp0_iter25_reg;
        tmp_keep_V_reg_838_pp0_iter27_reg <= tmp_keep_V_reg_838_pp0_iter26_reg;
        tmp_keep_V_reg_838_pp0_iter28_reg <= tmp_keep_V_reg_838_pp0_iter27_reg;
        tmp_keep_V_reg_838_pp0_iter29_reg <= tmp_keep_V_reg_838_pp0_iter28_reg;
        tmp_keep_V_reg_838_pp0_iter2_reg <= tmp_keep_V_reg_838_pp0_iter1_reg;
        tmp_keep_V_reg_838_pp0_iter3_reg <= tmp_keep_V_reg_838_pp0_iter2_reg;
        tmp_keep_V_reg_838_pp0_iter4_reg <= tmp_keep_V_reg_838_pp0_iter3_reg;
        tmp_keep_V_reg_838_pp0_iter5_reg <= tmp_keep_V_reg_838_pp0_iter4_reg;
        tmp_keep_V_reg_838_pp0_iter6_reg <= tmp_keep_V_reg_838_pp0_iter5_reg;
        tmp_keep_V_reg_838_pp0_iter7_reg <= tmp_keep_V_reg_838_pp0_iter6_reg;
        tmp_keep_V_reg_838_pp0_iter8_reg <= tmp_keep_V_reg_838_pp0_iter7_reg;
        tmp_keep_V_reg_838_pp0_iter9_reg <= tmp_keep_V_reg_838_pp0_iter8_reg;
        tmp_last_V_reg_903_pp0_iter10_reg <= tmp_last_V_reg_903_pp0_iter9_reg;
        tmp_last_V_reg_903_pp0_iter11_reg <= tmp_last_V_reg_903_pp0_iter10_reg;
        tmp_last_V_reg_903_pp0_iter12_reg <= tmp_last_V_reg_903_pp0_iter11_reg;
        tmp_last_V_reg_903_pp0_iter13_reg <= tmp_last_V_reg_903_pp0_iter12_reg;
        tmp_last_V_reg_903_pp0_iter14_reg <= tmp_last_V_reg_903_pp0_iter13_reg;
        tmp_last_V_reg_903_pp0_iter15_reg <= tmp_last_V_reg_903_pp0_iter14_reg;
        tmp_last_V_reg_903_pp0_iter16_reg <= tmp_last_V_reg_903_pp0_iter15_reg;
        tmp_last_V_reg_903_pp0_iter17_reg <= tmp_last_V_reg_903_pp0_iter16_reg;
        tmp_last_V_reg_903_pp0_iter18_reg <= tmp_last_V_reg_903_pp0_iter17_reg;
        tmp_last_V_reg_903_pp0_iter19_reg <= tmp_last_V_reg_903_pp0_iter18_reg;
        tmp_last_V_reg_903_pp0_iter20_reg <= tmp_last_V_reg_903_pp0_iter19_reg;
        tmp_last_V_reg_903_pp0_iter21_reg <= tmp_last_V_reg_903_pp0_iter20_reg;
        tmp_last_V_reg_903_pp0_iter22_reg <= tmp_last_V_reg_903_pp0_iter21_reg;
        tmp_last_V_reg_903_pp0_iter23_reg <= tmp_last_V_reg_903_pp0_iter22_reg;
        tmp_last_V_reg_903_pp0_iter24_reg <= tmp_last_V_reg_903_pp0_iter23_reg;
        tmp_last_V_reg_903_pp0_iter25_reg <= tmp_last_V_reg_903_pp0_iter24_reg;
        tmp_last_V_reg_903_pp0_iter26_reg <= tmp_last_V_reg_903_pp0_iter25_reg;
        tmp_last_V_reg_903_pp0_iter27_reg <= tmp_last_V_reg_903_pp0_iter26_reg;
        tmp_last_V_reg_903_pp0_iter28_reg <= tmp_last_V_reg_903_pp0_iter27_reg;
        tmp_last_V_reg_903_pp0_iter29_reg <= tmp_last_V_reg_903_pp0_iter28_reg;
        tmp_last_V_reg_903_pp0_iter2_reg <= tmp_last_V_reg_903_pp0_iter1_reg;
        tmp_last_V_reg_903_pp0_iter3_reg <= tmp_last_V_reg_903_pp0_iter2_reg;
        tmp_last_V_reg_903_pp0_iter4_reg <= tmp_last_V_reg_903_pp0_iter3_reg;
        tmp_last_V_reg_903_pp0_iter5_reg <= tmp_last_V_reg_903_pp0_iter4_reg;
        tmp_last_V_reg_903_pp0_iter6_reg <= tmp_last_V_reg_903_pp0_iter5_reg;
        tmp_last_V_reg_903_pp0_iter7_reg <= tmp_last_V_reg_903_pp0_iter6_reg;
        tmp_last_V_reg_903_pp0_iter8_reg <= tmp_last_V_reg_903_pp0_iter7_reg;
        tmp_last_V_reg_903_pp0_iter9_reg <= tmp_last_V_reg_903_pp0_iter8_reg;
        tmp_strb_V_reg_843_pp0_iter10_reg <= tmp_strb_V_reg_843_pp0_iter9_reg;
        tmp_strb_V_reg_843_pp0_iter11_reg <= tmp_strb_V_reg_843_pp0_iter10_reg;
        tmp_strb_V_reg_843_pp0_iter12_reg <= tmp_strb_V_reg_843_pp0_iter11_reg;
        tmp_strb_V_reg_843_pp0_iter13_reg <= tmp_strb_V_reg_843_pp0_iter12_reg;
        tmp_strb_V_reg_843_pp0_iter14_reg <= tmp_strb_V_reg_843_pp0_iter13_reg;
        tmp_strb_V_reg_843_pp0_iter15_reg <= tmp_strb_V_reg_843_pp0_iter14_reg;
        tmp_strb_V_reg_843_pp0_iter16_reg <= tmp_strb_V_reg_843_pp0_iter15_reg;
        tmp_strb_V_reg_843_pp0_iter17_reg <= tmp_strb_V_reg_843_pp0_iter16_reg;
        tmp_strb_V_reg_843_pp0_iter18_reg <= tmp_strb_V_reg_843_pp0_iter17_reg;
        tmp_strb_V_reg_843_pp0_iter19_reg <= tmp_strb_V_reg_843_pp0_iter18_reg;
        tmp_strb_V_reg_843_pp0_iter20_reg <= tmp_strb_V_reg_843_pp0_iter19_reg;
        tmp_strb_V_reg_843_pp0_iter21_reg <= tmp_strb_V_reg_843_pp0_iter20_reg;
        tmp_strb_V_reg_843_pp0_iter22_reg <= tmp_strb_V_reg_843_pp0_iter21_reg;
        tmp_strb_V_reg_843_pp0_iter23_reg <= tmp_strb_V_reg_843_pp0_iter22_reg;
        tmp_strb_V_reg_843_pp0_iter24_reg <= tmp_strb_V_reg_843_pp0_iter23_reg;
        tmp_strb_V_reg_843_pp0_iter25_reg <= tmp_strb_V_reg_843_pp0_iter24_reg;
        tmp_strb_V_reg_843_pp0_iter26_reg <= tmp_strb_V_reg_843_pp0_iter25_reg;
        tmp_strb_V_reg_843_pp0_iter27_reg <= tmp_strb_V_reg_843_pp0_iter26_reg;
        tmp_strb_V_reg_843_pp0_iter28_reg <= tmp_strb_V_reg_843_pp0_iter27_reg;
        tmp_strb_V_reg_843_pp0_iter29_reg <= tmp_strb_V_reg_843_pp0_iter28_reg;
        tmp_strb_V_reg_843_pp0_iter2_reg <= tmp_strb_V_reg_843_pp0_iter1_reg;
        tmp_strb_V_reg_843_pp0_iter3_reg <= tmp_strb_V_reg_843_pp0_iter2_reg;
        tmp_strb_V_reg_843_pp0_iter4_reg <= tmp_strb_V_reg_843_pp0_iter3_reg;
        tmp_strb_V_reg_843_pp0_iter5_reg <= tmp_strb_V_reg_843_pp0_iter4_reg;
        tmp_strb_V_reg_843_pp0_iter6_reg <= tmp_strb_V_reg_843_pp0_iter5_reg;
        tmp_strb_V_reg_843_pp0_iter7_reg <= tmp_strb_V_reg_843_pp0_iter6_reg;
        tmp_strb_V_reg_843_pp0_iter8_reg <= tmp_strb_V_reg_843_pp0_iter7_reg;
        tmp_strb_V_reg_843_pp0_iter9_reg <= tmp_strb_V_reg_843_pp0_iter8_reg;
        tmp_user_V_reg_848_pp0_iter10_reg <= tmp_user_V_reg_848_pp0_iter9_reg;
        tmp_user_V_reg_848_pp0_iter11_reg <= tmp_user_V_reg_848_pp0_iter10_reg;
        tmp_user_V_reg_848_pp0_iter12_reg <= tmp_user_V_reg_848_pp0_iter11_reg;
        tmp_user_V_reg_848_pp0_iter13_reg <= tmp_user_V_reg_848_pp0_iter12_reg;
        tmp_user_V_reg_848_pp0_iter14_reg <= tmp_user_V_reg_848_pp0_iter13_reg;
        tmp_user_V_reg_848_pp0_iter15_reg <= tmp_user_V_reg_848_pp0_iter14_reg;
        tmp_user_V_reg_848_pp0_iter16_reg <= tmp_user_V_reg_848_pp0_iter15_reg;
        tmp_user_V_reg_848_pp0_iter17_reg <= tmp_user_V_reg_848_pp0_iter16_reg;
        tmp_user_V_reg_848_pp0_iter18_reg <= tmp_user_V_reg_848_pp0_iter17_reg;
        tmp_user_V_reg_848_pp0_iter19_reg <= tmp_user_V_reg_848_pp0_iter18_reg;
        tmp_user_V_reg_848_pp0_iter20_reg <= tmp_user_V_reg_848_pp0_iter19_reg;
        tmp_user_V_reg_848_pp0_iter21_reg <= tmp_user_V_reg_848_pp0_iter20_reg;
        tmp_user_V_reg_848_pp0_iter22_reg <= tmp_user_V_reg_848_pp0_iter21_reg;
        tmp_user_V_reg_848_pp0_iter23_reg <= tmp_user_V_reg_848_pp0_iter22_reg;
        tmp_user_V_reg_848_pp0_iter24_reg <= tmp_user_V_reg_848_pp0_iter23_reg;
        tmp_user_V_reg_848_pp0_iter25_reg <= tmp_user_V_reg_848_pp0_iter24_reg;
        tmp_user_V_reg_848_pp0_iter26_reg <= tmp_user_V_reg_848_pp0_iter25_reg;
        tmp_user_V_reg_848_pp0_iter27_reg <= tmp_user_V_reg_848_pp0_iter26_reg;
        tmp_user_V_reg_848_pp0_iter28_reg <= tmp_user_V_reg_848_pp0_iter27_reg;
        tmp_user_V_reg_848_pp0_iter29_reg <= tmp_user_V_reg_848_pp0_iter28_reg;
        tmp_user_V_reg_848_pp0_iter2_reg <= tmp_user_V_reg_848_pp0_iter1_reg;
        tmp_user_V_reg_848_pp0_iter3_reg <= tmp_user_V_reg_848_pp0_iter2_reg;
        tmp_user_V_reg_848_pp0_iter4_reg <= tmp_user_V_reg_848_pp0_iter3_reg;
        tmp_user_V_reg_848_pp0_iter5_reg <= tmp_user_V_reg_848_pp0_iter4_reg;
        tmp_user_V_reg_848_pp0_iter6_reg <= tmp_user_V_reg_848_pp0_iter5_reg;
        tmp_user_V_reg_848_pp0_iter7_reg <= tmp_user_V_reg_848_pp0_iter6_reg;
        tmp_user_V_reg_848_pp0_iter8_reg <= tmp_user_V_reg_848_pp0_iter7_reg;
        tmp_user_V_reg_848_pp0_iter9_reg <= tmp_user_V_reg_848_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_0_load_A == 1'b1)) begin
        inStream_V_data_0_payload_A <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_0_load_B == 1'b1)) begin
        inStream_V_data_0_payload_B <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_A == 1'b1)) begin
        inStream_V_dest_V_0_payload_A <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_B == 1'b1)) begin
        inStream_V_dest_V_0_payload_B <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_id_V_0_load_A == 1'b1)) begin
        inStream_V_id_V_0_payload_A <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_id_V_0_load_B == 1'b1)) begin
        inStream_V_id_V_0_payload_B <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_A == 1'b1)) begin
        inStream_V_keep_V_0_payload_A <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_B == 1'b1)) begin
        inStream_V_keep_V_0_payload_B <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_A == 1'b1)) begin
        inStream_V_strb_V_0_payload_A <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_B == 1'b1)) begin
        inStream_V_strb_V_0_payload_B <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_A == 1'b1)) begin
        inStream_V_user_V_0_payload_A <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_B == 1'b1)) begin
        inStream_V_user_V_0_payload_B <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (p_Result_1_reg_891_pp0_iter28_reg == 1'd0) & (icmp_ln14_reg_819_pp0_iter28_reg == 1'd0))) begin
        op_V_assign_1_reg_923 <= grp_logistic_activate_fu_307_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (p_Result_2_reg_895_pp0_iter28_reg == 1'd0) & (icmp_ln14_reg_819_pp0_iter28_reg == 1'd0))) begin
        op_V_assign_2_reg_928 <= grp_logistic_activate_fu_318_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (p_Result_3_reg_899_pp0_iter28_reg == 1'd0) & (icmp_ln14_reg_819_pp0_iter28_reg == 1'd0))) begin
        op_V_assign_3_reg_933 <= grp_logistic_activate_fu_329_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (p_Result_s_reg_887_pp0_iter28_reg == 1'd0) & (icmp_ln14_reg_819_pp0_iter28_reg == 1'd0))) begin
        op_V_assign_reg_918 <= grp_logistic_activate_fu_296_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_1_load_A == 1'b1)) begin
        outStream_V_data_1_payload_A <= tmp_data_1_fu_767_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_1_load_B == 1'b1)) begin
        outStream_V_data_1_payload_B <= tmp_data_1_fu_767_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_A == 1'b1)) begin
        outStream_V_dest_V_1_payload_A <= tmp_dest_V_reg_858_pp0_iter29_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_B == 1'b1)) begin
        outStream_V_dest_V_1_payload_B <= tmp_dest_V_reg_858_pp0_iter29_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_A == 1'b1)) begin
        outStream_V_id_V_1_payload_A <= tmp_id_V_reg_853_pp0_iter29_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_B == 1'b1)) begin
        outStream_V_id_V_1_payload_B <= tmp_id_V_reg_853_pp0_iter29_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_A == 1'b1)) begin
        outStream_V_keep_V_1_payload_A <= tmp_keep_V_reg_838_pp0_iter29_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_B == 1'b1)) begin
        outStream_V_keep_V_1_payload_B <= tmp_keep_V_reg_838_pp0_iter29_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_A == 1'b1)) begin
        outStream_V_last_V_1_payload_A <= tmp_last_V_reg_903_pp0_iter29_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_B == 1'b1)) begin
        outStream_V_last_V_1_payload_B <= tmp_last_V_reg_903_pp0_iter29_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_A == 1'b1)) begin
        outStream_V_strb_V_1_payload_A <= tmp_strb_V_reg_843_pp0_iter29_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_B == 1'b1)) begin
        outStream_V_strb_V_1_payload_B <= tmp_strb_V_reg_843_pp0_iter29_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_A == 1'b1)) begin
        outStream_V_user_V_1_payload_A <= tmp_user_V_reg_848_pp0_iter29_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_B == 1'b1)) begin
        outStream_V_user_V_1_payload_B <= tmp_user_V_reg_848_pp0_iter29_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_420_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_01_new_reg_875 <= {{inStream_V_data_0_data_out[47:32]}};
        p_02_new8_reg_869 <= {{inStream_V_data_0_data_out[31:16]}};
        p_0_new_reg_881 <= {{inStream_V_data_0_data_out[63:48]}};
        p_Result_1_reg_891 <= p_Result_1_fu_669_p2;
        p_Result_2_reg_895 <= p_Result_2_fu_696_p2;
        p_Result_3_reg_899 <= p_Result_3_fu_723_p2;
        p_Result_s_reg_887 <= p_Result_s_fu_642_p2;
        tmp_dest_V_reg_858 <= inStream_V_dest_V_0_data_out;
        tmp_id_V_reg_853 <= inStream_V_id_V_0_data_out;
        tmp_keep_V_reg_838 <= inStream_V_keep_V_0_data_out;
        tmp_last_V_reg_903 <= tmp_last_V_fu_741_p2;
        tmp_strb_V_reg_843 <= inStream_V_strb_V_0_data_out;
        tmp_user_V_reg_848 <= inStream_V_user_V_0_data_out;
        trunc_ln203_reg_863 <= trunc_ln203_fu_581_p1;
    end
end

always @ (*) begin
    if ((icmp_ln14_fu_420_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | (outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state34))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln14_reg_819_pp0_iter29_reg == 1'd0) & (p_Result_s_reg_887_pp0_iter29_reg == 1'd0) & (ap_enable_reg_pp0_iter30 == 1'b1))) begin
        ap_phi_mux_tmp_data_sub_data_0_s_phi_fu_263_p4 = op_V_assign_reg_918;
    end else begin
        ap_phi_mux_tmp_data_sub_data_0_s_phi_fu_263_p4 = ap_phi_reg_pp0_iter30_tmp_data_sub_data_0_s_reg_260;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln14_reg_819_pp0_iter29_reg == 1'd0) & (p_Result_1_reg_891_pp0_iter29_reg == 1'd0) & (ap_enable_reg_pp0_iter30 == 1'b1))) begin
        ap_phi_mux_tmp_data_sub_data_1_s_phi_fu_272_p4 = op_V_assign_1_reg_923;
    end else begin
        ap_phi_mux_tmp_data_sub_data_1_s_phi_fu_272_p4 = ap_phi_reg_pp0_iter30_tmp_data_sub_data_1_s_reg_269;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln14_reg_819_pp0_iter29_reg == 1'd0) & (p_Result_2_reg_895_pp0_iter29_reg == 1'd0) & (ap_enable_reg_pp0_iter30 == 1'b1))) begin
        ap_phi_mux_tmp_data_sub_data_2_s_phi_fu_281_p4 = op_V_assign_2_reg_928;
    end else begin
        ap_phi_mux_tmp_data_sub_data_2_s_phi_fu_281_p4 = ap_phi_reg_pp0_iter30_tmp_data_sub_data_2_s_reg_278;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln14_reg_819_pp0_iter29_reg == 1'd0) & (p_Result_3_reg_899_pp0_iter29_reg == 1'd0) & (ap_enable_reg_pp0_iter30 == 1'b1))) begin
        ap_phi_mux_tmp_data_sub_data_3_s_phi_fu_290_p4 = op_V_assign_3_reg_933;
    end else begin
        ap_phi_mux_tmp_data_sub_data_3_s_phi_fu_290_p4 = ap_phi_reg_pp0_iter30_tmp_data_sub_data_3_s_reg_287;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | (outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state34))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp149))) begin
        grp_logistic_activate_fu_296_ap_ce = 1'b1;
    end else begin
        grp_logistic_activate_fu_296_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp150))) begin
        grp_logistic_activate_fu_307_ap_ce = 1'b1;
    end else begin
        grp_logistic_activate_fu_307_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp151))) begin
        grp_logistic_activate_fu_318_ap_ce = 1'b1;
    end else begin
        grp_logistic_activate_fu_318_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp152) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_logistic_activate_fu_329_ap_ce = 1'b1;
    end else begin
        grp_logistic_activate_fu_329_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln14_fu_420_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_TDATA_blk_n = inStream_V_data_0_state[1'd0];
    end else begin
        inStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_420_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_V_data_0_ack_out = 1'b1;
    end else begin
        inStream_V_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_data_0_sel == 1'b1)) begin
        inStream_V_data_0_data_out = inStream_V_data_0_payload_B;
    end else begin
        inStream_V_data_0_data_out = inStream_V_data_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_420_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_V_dest_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_dest_V_0_sel == 1'b1)) begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_B;
    end else begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_420_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_V_id_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_id_V_0_sel == 1'b1)) begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_B;
    end else begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_420_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_V_keep_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_keep_V_0_sel == 1'b1)) begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_B;
    end else begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_420_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_V_strb_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_strb_V_0_sel == 1'b1)) begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_B;
    end else begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_420_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_V_user_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_user_V_0_sel == 1'b1)) begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_B;
    end else begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (icmp_ln14_reg_819_pp0_iter30_reg == 1'd0) & (ap_enable_reg_pp0_iter31 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (icmp_ln14_reg_819_pp0_iter29_reg == 1'd0) & (ap_enable_reg_pp0_iter30 == 1'b1)))) begin
        outStream_TDATA_blk_n = outStream_V_data_1_state[1'd1];
    end else begin
        outStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((outStream_V_data_1_sel == 1'b1)) begin
        outStream_V_data_1_data_out = outStream_V_data_1_payload_B;
    end else begin
        outStream_V_data_1_data_out = outStream_V_data_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_819_pp0_iter29_reg == 1'd0) & (ap_enable_reg_pp0_iter30 == 1'b1))) begin
        outStream_V_data_1_vld_in = 1'b1;
    end else begin
        outStream_V_data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_dest_V_1_sel == 1'b1)) begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_B;
    end else begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_819_pp0_iter29_reg == 1'd0) & (ap_enable_reg_pp0_iter30 == 1'b1))) begin
        outStream_V_dest_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_id_V_1_sel == 1'b1)) begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_B;
    end else begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_819_pp0_iter29_reg == 1'd0) & (ap_enable_reg_pp0_iter30 == 1'b1))) begin
        outStream_V_id_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_keep_V_1_sel == 1'b1)) begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_B;
    end else begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_819_pp0_iter29_reg == 1'd0) & (ap_enable_reg_pp0_iter30 == 1'b1))) begin
        outStream_V_keep_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_last_V_1_sel == 1'b1)) begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_B;
    end else begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_819_pp0_iter29_reg == 1'd0) & (ap_enable_reg_pp0_iter30 == 1'b1))) begin
        outStream_V_last_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_strb_V_1_sel == 1'b1)) begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_B;
    end else begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_819_pp0_iter29_reg == 1'd0) & (ap_enable_reg_pp0_iter30 == 1'b1))) begin
        outStream_V_strb_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_user_V_1_sel == 1'b1)) begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_B;
    end else begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_819_pp0_iter29_reg == 1'd0) & (ap_enable_reg_pp0_iter30 == 1'b1))) begin
        outStream_V_user_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln14_fu_420_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln14_fu_420_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state34 : begin
            if ((~((outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | (outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1354_1_fu_354_p2 = ($signed(6'd63) + $signed(zext_ln1354_1_fu_350_p1));

assign add_ln1354_fu_344_p2 = ($signed(6'd63) + $signed(zext_ln1354_fu_340_p1));

assign add_ln14_1_fu_444_p2 = (5'd1 + i_op_assign_reg_216);

assign add_ln14_fu_425_p2 = (indvar_flatten17_reg_205 + 13'd1);

assign add_ln17_fu_753_p2 = (indvar_flatten_reg_227 + 9'd1);

assign and_ln1598_fu_492_p2 = (xor_ln1598_fu_480_p2 & icmp_ln20_fu_486_p2);

assign and_ln791_1_fu_664_p2 = (shl_ln791_1_fu_658_p2 & activate_en_V_read_reg_780);

assign and_ln791_2_fu_691_p2 = (shl_ln791_2_fu_685_p2 & activate_en_V_read_reg_780);

assign and_ln791_3_fu_718_p2 = (shl_ln791_3_fu_712_p2 & activate_en_V_read_reg_780);

assign and_ln791_fu_637_p2 = (trunc_ln791_reg_799 & shl_ln791_fu_631_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln14_fu_420_p2 == 1'd0) & (inStream_V_data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state33_io) & (ap_enable_reg_pp0_iter31 == 1'b1)) | ((1'b1 == ap_block_state32_io) & (ap_enable_reg_pp0_iter30 == 1'b1)) | ((icmp_ln14_fu_420_p2 == 1'd0) & (inStream_V_data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp149 = (((1'b1 == ap_block_state33_io) & (ap_enable_reg_pp0_iter31 == 1'b1)) | ((1'b1 == ap_block_state32_io) & (ap_enable_reg_pp0_iter30 == 1'b1)) | ((icmp_ln14_fu_420_p2 == 1'd0) & (inStream_V_data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp150 = (((1'b1 == ap_block_state33_io) & (ap_enable_reg_pp0_iter31 == 1'b1)) | ((1'b1 == ap_block_state32_io) & (ap_enable_reg_pp0_iter30 == 1'b1)) | ((icmp_ln14_fu_420_p2 == 1'd0) & (inStream_V_data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp151 = (((1'b1 == ap_block_state33_io) & (ap_enable_reg_pp0_iter31 == 1'b1)) | ((1'b1 == ap_block_state32_io) & (ap_enable_reg_pp0_iter30 == 1'b1)) | ((icmp_ln14_fu_420_p2 == 1'd0) & (inStream_V_data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp152 = (((1'b1 == ap_block_state33_io) & (ap_enable_reg_pp0_iter31 == 1'b1)) | ((1'b1 == ap_block_state32_io) & (ap_enable_reg_pp0_iter30 == 1'b1)) | ((icmp_ln14_fu_420_p2 == 1'd0) & (inStream_V_data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state33_io) & (ap_enable_reg_pp0_iter31 == 1'b1)) | ((1'b1 == ap_block_state32_io) & (ap_enable_reg_pp0_iter30 == 1'b1)) | ((icmp_ln14_fu_420_p2 == 1'd0) & (inStream_V_data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter22_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter23_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter24_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter25_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter26_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter27_ignore_call0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln14_fu_420_p2 == 1'd0) & (inStream_V_data_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0_ignore_call0 = ((icmp_ln14_fu_420_p2 == 1'd0) & (inStream_V_data_0_vld_out == 1'b0));
end

assign ap_block_state30_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter28_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter29_ignore_call0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state32_io = ((icmp_ln14_reg_819_pp0_iter29_reg == 1'd0) & (outStream_V_data_1_ack_in == 1'b0));
end

assign ap_block_state32_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter30_ignore_call0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state33_io = ((icmp_ln14_reg_819_pp0_iter30_reg == 1'd0) & (outStream_V_data_1_ack_in == 1'b0));
end

assign ap_block_state33_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter31_ignore_call0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state34 = ((outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | (outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0)));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6_ignore_call0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7_ignore_call0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1020 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_tmp_data_sub_data_0_s_reg_260 = 'bx;

assign ap_phi_reg_pp0_iter0_tmp_data_sub_data_1_s_reg_269 = 'bx;

assign ap_phi_reg_pp0_iter0_tmp_data_sub_data_2_s_reg_278 = 'bx;

assign ap_phi_reg_pp0_iter0_tmp_data_sub_data_3_s_reg_287 = 'bx;

always @ (*) begin
    ap_predicate_op149_call_state3 = ((icmp_ln14_reg_819 == 1'd0) & (p_Result_s_reg_887 == 1'd0));
end

always @ (*) begin
    ap_predicate_op149_call_state3_state2 = ((icmp_ln14_fu_420_p2 == 1'd0) & (p_Result_s_fu_642_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op150_call_state3 = ((icmp_ln14_reg_819 == 1'd0) & (p_Result_1_reg_891 == 1'd0));
end

always @ (*) begin
    ap_predicate_op150_call_state3_state2 = ((icmp_ln14_fu_420_p2 == 1'd0) & (p_Result_1_fu_669_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op151_call_state3 = ((icmp_ln14_reg_819 == 1'd0) & (p_Result_2_reg_895 == 1'd0));
end

always @ (*) begin
    ap_predicate_op151_call_state3_state2 = ((icmp_ln14_fu_420_p2 == 1'd0) & (p_Result_2_fu_696_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op152_call_state3 = ((icmp_ln14_reg_819 == 1'd0) & (p_Result_3_reg_899 == 1'd0));
end

always @ (*) begin
    ap_predicate_op152_call_state3_state2 = ((icmp_ln14_fu_420_p2 == 1'd0) & (p_Result_3_fu_723_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bound4_fu_384_p0 = bound4_fu_384_p00;

assign bound4_fu_384_p00 = tmp_fu_364_p3;

assign bound4_fu_384_p1 = bound4_fu_384_p10;

assign bound4_fu_384_p10 = input_h_V;

assign bound4_fu_384_p2 = (bound4_fu_384_p0 * bound4_fu_384_p1);

assign bound_fu_372_p1 = tmp_fu_364_p3;

assign bvh_d_index_1_fu_648_p2 = (bvh_d_index_fu_619_p3 | 5'd1);

assign bvh_d_index_2_fu_675_p2 = (bvh_d_index_fu_619_p3 | 5'd2);

assign bvh_d_index_3_fu_702_p2 = (bvh_d_index_fu_619_p3 | 5'd3);

assign bvh_d_index_fu_619_p3 = {{trunc_ln29_fu_615_p1}, {2'd0}};

assign col_idx_fu_506_p2 = (5'd1 + select_ln1598_fu_436_p3);

assign grp_logistic_activate_fu_296_ap_start = grp_logistic_activate_fu_296_ap_start_reg;

assign grp_logistic_activate_fu_307_ap_start = grp_logistic_activate_fu_307_ap_start_reg;

assign grp_logistic_activate_fu_318_ap_start = grp_logistic_activate_fu_318_ap_start_reg;

assign grp_logistic_activate_fu_329_ap_start = grp_logistic_activate_fu_329_ap_start_reg;

assign icmp_ln14_fu_420_p2 = ((indvar_flatten17_reg_205 == bound4_reg_809) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_431_p2 = ((indvar_flatten_reg_227 == bound_reg_804) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_486_p2 = ((input_ch_idx_0_reg_249 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln54_1_fu_409_p2 = ((zext_ln20_fu_405_p1 != add_ln1354_reg_787) ? 1'b1 : 1'b0);

assign icmp_ln54_2_fu_400_p2 = ((zext_ln17_fu_396_p1 != add_ln1354_1_reg_793) ? 1'b1 : 1'b0);

assign icmp_ln54_3_fu_390_p2 = ((add_ln1354_fu_344_p2 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln54_4_fu_454_p2 = ((zext_ln17_1_fu_450_p1 != add_ln1354_1_reg_793) ? 1'b1 : 1'b0);

assign icmp_ln54_5_fu_530_p2 = ((zext_ln20_1_fu_526_p1 != add_ln1354_reg_787) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_729_p2 = ((select_ln1598_3_fu_518_p3 != 4'd7) ? 1'b1 : 1'b0);

assign inStream_TREADY = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_data_0_ack_in = inStream_V_data_0_state[1'd1];

assign inStream_V_data_0_load_A = (inStream_V_data_0_state_cmp_full & ~inStream_V_data_0_sel_wr);

assign inStream_V_data_0_load_B = (inStream_V_data_0_state_cmp_full & inStream_V_data_0_sel_wr);

assign inStream_V_data_0_sel = inStream_V_data_0_sel_rd;

assign inStream_V_data_0_state_cmp_full = ((inStream_V_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_data_0_vld_in = inStream_TVALID;

assign inStream_V_data_0_vld_out = inStream_V_data_0_state[1'd0];

assign inStream_V_dest_V_0_ack_in = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_dest_V_0_load_A = (inStream_V_dest_V_0_state_cmp_full & ~inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_load_B = (inStream_V_dest_V_0_state_cmp_full & inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_sel = inStream_V_dest_V_0_sel_rd;

assign inStream_V_dest_V_0_state_cmp_full = ((inStream_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_dest_V_0_vld_in = inStream_TVALID;

assign inStream_V_dest_V_0_vld_out = inStream_V_dest_V_0_state[1'd0];

assign inStream_V_id_V_0_ack_in = inStream_V_id_V_0_state[1'd1];

assign inStream_V_id_V_0_load_A = (inStream_V_id_V_0_state_cmp_full & ~inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_load_B = (inStream_V_id_V_0_state_cmp_full & inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_sel = inStream_V_id_V_0_sel_rd;

assign inStream_V_id_V_0_state_cmp_full = ((inStream_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_id_V_0_vld_in = inStream_TVALID;

assign inStream_V_id_V_0_vld_out = inStream_V_id_V_0_state[1'd0];

assign inStream_V_keep_V_0_ack_in = inStream_V_keep_V_0_state[1'd1];

assign inStream_V_keep_V_0_load_A = (inStream_V_keep_V_0_state_cmp_full & ~inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_load_B = (inStream_V_keep_V_0_state_cmp_full & inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_sel = inStream_V_keep_V_0_sel_rd;

assign inStream_V_keep_V_0_state_cmp_full = ((inStream_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_keep_V_0_vld_in = inStream_TVALID;

assign inStream_V_keep_V_0_vld_out = inStream_V_keep_V_0_state[1'd0];

assign inStream_V_strb_V_0_ack_in = inStream_V_strb_V_0_state[1'd1];

assign inStream_V_strb_V_0_load_A = (inStream_V_strb_V_0_state_cmp_full & ~inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_load_B = (inStream_V_strb_V_0_state_cmp_full & inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_sel = inStream_V_strb_V_0_sel_rd;

assign inStream_V_strb_V_0_state_cmp_full = ((inStream_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_strb_V_0_vld_in = inStream_TVALID;

assign inStream_V_strb_V_0_vld_out = inStream_V_strb_V_0_state[1'd0];

assign inStream_V_user_V_0_ack_in = inStream_V_user_V_0_state[1'd1];

assign inStream_V_user_V_0_load_A = (inStream_V_user_V_0_state_cmp_full & ~inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_load_B = (inStream_V_user_V_0_state_cmp_full & inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_sel = inStream_V_user_V_0_sel_rd;

assign inStream_V_user_V_0_state_cmp_full = ((inStream_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_user_V_0_vld_in = inStream_TVALID;

assign inStream_V_user_V_0_vld_out = inStream_V_user_V_0_state[1'd0];

assign input_ch_idx_fu_747_p2 = (select_ln1598_3_fu_518_p3 + 4'd1);

assign or_ln1598_fu_512_p2 = (icmp_ln17_fu_431_p2 | and_ln1598_fu_492_p2);

assign or_ln54_1_fu_735_p2 = (select_ln1598_4_fu_541_p3 | icmp_ln54_fu_729_p2);

assign or_ln54_2_fu_467_p2 = (icmp_ln54_4_fu_454_p2 | icmp_ln54_3_reg_814);

assign or_ln54_3_fu_535_p2 = (select_ln1598_1_fu_459_p3 | icmp_ln54_5_fu_530_p2);

assign or_ln54_fu_414_p2 = (icmp_ln54_2_fu_400_p2 | icmp_ln54_1_fu_409_p2);

assign outStream_TDATA = outStream_V_data_1_data_out;

assign outStream_TDEST = outStream_V_dest_V_1_data_out;

assign outStream_TID = outStream_V_id_V_1_data_out;

assign outStream_TKEEP = outStream_V_keep_V_1_data_out;

assign outStream_TLAST = outStream_V_last_V_1_data_out;

assign outStream_TSTRB = outStream_V_strb_V_1_data_out;

assign outStream_TUSER = outStream_V_user_V_1_data_out;

assign outStream_TVALID = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_data_1_ack_in = outStream_V_data_1_state[1'd1];

assign outStream_V_data_1_ack_out = outStream_TREADY;

assign outStream_V_data_1_load_A = (outStream_V_data_1_state_cmp_full & ~outStream_V_data_1_sel_wr);

assign outStream_V_data_1_load_B = (outStream_V_data_1_state_cmp_full & outStream_V_data_1_sel_wr);

assign outStream_V_data_1_sel = outStream_V_data_1_sel_rd;

assign outStream_V_data_1_state_cmp_full = ((outStream_V_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_data_1_vld_out = outStream_V_data_1_state[1'd0];

assign outStream_V_dest_V_1_ack_in = outStream_V_dest_V_1_state[1'd1];

assign outStream_V_dest_V_1_ack_out = outStream_TREADY;

assign outStream_V_dest_V_1_load_A = (outStream_V_dest_V_1_state_cmp_full & ~outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_load_B = (outStream_V_dest_V_1_state_cmp_full & outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_sel = outStream_V_dest_V_1_sel_rd;

assign outStream_V_dest_V_1_state_cmp_full = ((outStream_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_dest_V_1_vld_out = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_id_V_1_ack_in = outStream_V_id_V_1_state[1'd1];

assign outStream_V_id_V_1_ack_out = outStream_TREADY;

assign outStream_V_id_V_1_load_A = (outStream_V_id_V_1_state_cmp_full & ~outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_load_B = (outStream_V_id_V_1_state_cmp_full & outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_sel = outStream_V_id_V_1_sel_rd;

assign outStream_V_id_V_1_state_cmp_full = ((outStream_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_id_V_1_vld_out = outStream_V_id_V_1_state[1'd0];

assign outStream_V_keep_V_1_ack_in = outStream_V_keep_V_1_state[1'd1];

assign outStream_V_keep_V_1_ack_out = outStream_TREADY;

assign outStream_V_keep_V_1_load_A = (outStream_V_keep_V_1_state_cmp_full & ~outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_load_B = (outStream_V_keep_V_1_state_cmp_full & outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_sel = outStream_V_keep_V_1_sel_rd;

assign outStream_V_keep_V_1_state_cmp_full = ((outStream_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_keep_V_1_vld_out = outStream_V_keep_V_1_state[1'd0];

assign outStream_V_last_V_1_ack_in = outStream_V_last_V_1_state[1'd1];

assign outStream_V_last_V_1_ack_out = outStream_TREADY;

assign outStream_V_last_V_1_load_A = (outStream_V_last_V_1_state_cmp_full & ~outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_load_B = (outStream_V_last_V_1_state_cmp_full & outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_sel = outStream_V_last_V_1_sel_rd;

assign outStream_V_last_V_1_state_cmp_full = ((outStream_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_last_V_1_vld_out = outStream_V_last_V_1_state[1'd0];

assign outStream_V_strb_V_1_ack_in = outStream_V_strb_V_1_state[1'd1];

assign outStream_V_strb_V_1_ack_out = outStream_TREADY;

assign outStream_V_strb_V_1_load_A = (outStream_V_strb_V_1_state_cmp_full & ~outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_load_B = (outStream_V_strb_V_1_state_cmp_full & outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_sel = outStream_V_strb_V_1_sel_rd;

assign outStream_V_strb_V_1_state_cmp_full = ((outStream_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_strb_V_1_vld_out = outStream_V_strb_V_1_state[1'd0];

assign outStream_V_user_V_1_ack_in = outStream_V_user_V_1_state[1'd1];

assign outStream_V_user_V_1_ack_out = outStream_TREADY;

assign outStream_V_user_V_1_load_A = (outStream_V_user_V_1_state_cmp_full & ~outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_load_B = (outStream_V_user_V_1_state_cmp_full & outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_sel = outStream_V_user_V_1_sel_rd;

assign outStream_V_user_V_1_state_cmp_full = ((outStream_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_user_V_1_vld_out = outStream_V_user_V_1_state[1'd0];

assign p_Result_1_fu_669_p2 = ((and_ln791_1_fu_664_p2 == 32'd0) ? 1'b1 : 1'b0);

assign p_Result_2_fu_696_p2 = ((and_ln791_2_fu_691_p2 == 32'd0) ? 1'b1 : 1'b0);

assign p_Result_3_fu_723_p2 = ((and_ln791_3_fu_718_p2 == 32'd0) ? 1'b1 : 1'b0);

assign p_Result_s_fu_642_p2 = ((and_ln791_fu_637_p2 == 29'd0) ? 1'b1 : 1'b0);

assign select_ln14_fu_498_p3 = ((icmp_ln17_fu_431_p2[0:0] === 1'b1) ? add_ln14_1_fu_444_p2 : i_op_assign_reg_216);

assign select_ln1598_1_fu_459_p3 = ((icmp_ln17_fu_431_p2[0:0] === 1'b1) ? icmp_ln54_4_fu_454_p2 : icmp_ln54_2_fu_400_p2);

assign select_ln1598_2_fu_472_p3 = ((icmp_ln17_fu_431_p2[0:0] === 1'b1) ? or_ln54_2_fu_467_p2 : or_ln54_fu_414_p2);

assign select_ln1598_3_fu_518_p3 = ((or_ln1598_fu_512_p2[0:0] === 1'b1) ? 4'd0 : input_ch_idx_0_reg_249);

assign select_ln1598_4_fu_541_p3 = ((and_ln1598_fu_492_p2[0:0] === 1'b1) ? or_ln54_3_fu_535_p2 : select_ln1598_2_fu_472_p3);

assign select_ln1598_fu_436_p3 = ((icmp_ln17_fu_431_p2[0:0] === 1'b1) ? 5'd0 : i_op_assign_1_reg_238);

assign select_ln17_1_fu_759_p3 = ((icmp_ln17_fu_431_p2[0:0] === 1'b1) ? 9'd1 : add_ln17_fu_753_p2);

assign select_ln17_fu_549_p3 = ((and_ln1598_fu_492_p2[0:0] === 1'b1) ? col_idx_fu_506_p2 : select_ln1598_fu_436_p3);

assign shl_ln791_1_fu_658_p2 = 32'd1 << zext_ln34_fu_654_p1;

assign shl_ln791_2_fu_685_p2 = 32'd1 << zext_ln39_fu_681_p1;

assign shl_ln791_3_fu_712_p2 = 32'd1 << zext_ln44_fu_708_p1;

assign shl_ln791_fu_631_p2 = 29'd1 << zext_ln29_fu_627_p1;

assign tmp_data_1_fu_767_p5 = {{{{ap_phi_mux_tmp_data_sub_data_3_s_phi_fu_290_p4}, {ap_phi_mux_tmp_data_sub_data_2_s_phi_fu_281_p4}}, {ap_phi_mux_tmp_data_sub_data_1_s_phi_fu_272_p4}}, {ap_phi_mux_tmp_data_sub_data_0_s_phi_fu_263_p4}};

assign tmp_fu_364_p3 = {{input_w_V}, {3'd0}};

assign tmp_last_V_fu_741_p2 = (or_ln54_1_fu_735_p2 ^ 1'd1);

assign trunc_ln203_fu_581_p1 = inStream_V_data_0_data_out[15:0];

assign trunc_ln29_fu_615_p1 = select_ln1598_3_fu_518_p3[2:0];

assign trunc_ln791_fu_360_p1 = activate_en_V[28:0];

assign xor_ln1598_fu_480_p2 = (icmp_ln17_fu_431_p2 ^ 1'd1);

assign zext_ln1354_1_fu_350_p1 = input_h_V;

assign zext_ln1354_fu_340_p1 = input_w_V;

assign zext_ln17_1_fu_450_p1 = add_ln14_1_fu_444_p2;

assign zext_ln17_fu_396_p1 = i_op_assign_reg_216;

assign zext_ln20_1_fu_526_p1 = col_idx_fu_506_p2;

assign zext_ln20_fu_405_p1 = i_op_assign_1_reg_238;

assign zext_ln29_fu_627_p1 = bvh_d_index_fu_619_p3;

assign zext_ln34_fu_654_p1 = bvh_d_index_1_fu_648_p2;

assign zext_ln39_fu_681_p1 = bvh_d_index_2_fu_675_p2;

assign zext_ln44_fu_708_p1 = bvh_d_index_3_fu_702_p2;

always @ (posedge ap_clk) begin
    bound_reg_804[2:0] <= 3'b000;
    bound_reg_804[8] <= 1'b0;
end

endmodule //yolo_yolo_top
