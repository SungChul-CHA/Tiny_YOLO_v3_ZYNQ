// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="yolo_max_pool_top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.118500,HLS_SYN_LAT=1384491,HLS_SYN_TPT=none,HLS_SYN_MEM=32,HLS_SYN_DSP=1,HLS_SYN_FF=2105,HLS_SYN_LUT=3422,HLS_VERSION=2019_1}" *)

module yolo_max_pool_top (
        ap_clk,
        ap_rst_n,
        inStream_TDATA,
        inStream_TVALID,
        inStream_TREADY,
        inStream_TKEEP,
        inStream_TSTRB,
        inStream_TUSER,
        inStream_TLAST,
        inStream_TID,
        inStream_TDEST,
        outStream_TDATA,
        outStream_TVALID,
        outStream_TREADY,
        outStream_TKEEP,
        outStream_TSTRB,
        outStream_TUSER,
        outStream_TLAST,
        outStream_TID,
        outStream_TDEST,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_pp0_stage0 = 10'd128;
parameter    ap_ST_fsm_pp0_stage1 = 10'd256;
parameter    ap_ST_fsm_state18 = 10'd512;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [63:0] inStream_TDATA;
input   inStream_TVALID;
output   inStream_TREADY;
input  [7:0] inStream_TKEEP;
input  [7:0] inStream_TSTRB;
input  [1:0] inStream_TUSER;
input  [0:0] inStream_TLAST;
input  [4:0] inStream_TID;
input  [5:0] inStream_TDEST;
output  [63:0] outStream_TDATA;
output   outStream_TVALID;
input   outStream_TREADY;
output  [7:0] outStream_TKEEP;
output  [7:0] outStream_TSTRB;
output  [1:0] outStream_TUSER;
output  [0:0] outStream_TLAST;
output  [4:0] outStream_TID;
output  [5:0] outStream_TDEST;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [63:0] inStream_V_data_0_data_out;
wire    inStream_V_data_0_vld_in;
wire    inStream_V_data_0_vld_out;
wire    inStream_V_data_0_ack_in;
reg    inStream_V_data_0_ack_out;
reg   [63:0] inStream_V_data_0_payload_A;
reg   [63:0] inStream_V_data_0_payload_B;
reg    inStream_V_data_0_sel_rd;
reg    inStream_V_data_0_sel_wr;
wire    inStream_V_data_0_sel;
wire    inStream_V_data_0_load_A;
wire    inStream_V_data_0_load_B;
reg   [1:0] inStream_V_data_0_state;
wire    inStream_V_data_0_state_cmp_full;
reg   [7:0] inStream_V_keep_V_0_data_out;
wire    inStream_V_keep_V_0_vld_in;
wire    inStream_V_keep_V_0_vld_out;
wire    inStream_V_keep_V_0_ack_in;
reg    inStream_V_keep_V_0_ack_out;
reg   [7:0] inStream_V_keep_V_0_payload_A;
reg   [7:0] inStream_V_keep_V_0_payload_B;
reg    inStream_V_keep_V_0_sel_rd;
reg    inStream_V_keep_V_0_sel_wr;
wire    inStream_V_keep_V_0_sel;
wire    inStream_V_keep_V_0_load_A;
wire    inStream_V_keep_V_0_load_B;
reg   [1:0] inStream_V_keep_V_0_state;
wire    inStream_V_keep_V_0_state_cmp_full;
reg   [7:0] inStream_V_strb_V_0_data_out;
wire    inStream_V_strb_V_0_vld_in;
wire    inStream_V_strb_V_0_vld_out;
wire    inStream_V_strb_V_0_ack_in;
reg    inStream_V_strb_V_0_ack_out;
reg   [7:0] inStream_V_strb_V_0_payload_A;
reg   [7:0] inStream_V_strb_V_0_payload_B;
reg    inStream_V_strb_V_0_sel_rd;
reg    inStream_V_strb_V_0_sel_wr;
wire    inStream_V_strb_V_0_sel;
wire    inStream_V_strb_V_0_load_A;
wire    inStream_V_strb_V_0_load_B;
reg   [1:0] inStream_V_strb_V_0_state;
wire    inStream_V_strb_V_0_state_cmp_full;
reg   [1:0] inStream_V_user_V_0_data_out;
wire    inStream_V_user_V_0_vld_in;
wire    inStream_V_user_V_0_vld_out;
wire    inStream_V_user_V_0_ack_in;
reg    inStream_V_user_V_0_ack_out;
reg   [1:0] inStream_V_user_V_0_payload_A;
reg   [1:0] inStream_V_user_V_0_payload_B;
reg    inStream_V_user_V_0_sel_rd;
reg    inStream_V_user_V_0_sel_wr;
wire    inStream_V_user_V_0_sel;
wire    inStream_V_user_V_0_load_A;
wire    inStream_V_user_V_0_load_B;
reg   [1:0] inStream_V_user_V_0_state;
wire    inStream_V_user_V_0_state_cmp_full;
reg   [4:0] inStream_V_id_V_0_data_out;
wire    inStream_V_id_V_0_vld_in;
wire    inStream_V_id_V_0_vld_out;
wire    inStream_V_id_V_0_ack_in;
reg    inStream_V_id_V_0_ack_out;
reg   [4:0] inStream_V_id_V_0_payload_A;
reg   [4:0] inStream_V_id_V_0_payload_B;
reg    inStream_V_id_V_0_sel_rd;
reg    inStream_V_id_V_0_sel_wr;
wire    inStream_V_id_V_0_sel;
wire    inStream_V_id_V_0_load_A;
wire    inStream_V_id_V_0_load_B;
reg   [1:0] inStream_V_id_V_0_state;
wire    inStream_V_id_V_0_state_cmp_full;
reg   [5:0] inStream_V_dest_V_0_data_out;
wire    inStream_V_dest_V_0_vld_in;
wire    inStream_V_dest_V_0_vld_out;
wire    inStream_V_dest_V_0_ack_in;
reg    inStream_V_dest_V_0_ack_out;
reg   [5:0] inStream_V_dest_V_0_payload_A;
reg   [5:0] inStream_V_dest_V_0_payload_B;
reg    inStream_V_dest_V_0_sel_rd;
reg    inStream_V_dest_V_0_sel_wr;
wire    inStream_V_dest_V_0_sel;
wire    inStream_V_dest_V_0_load_A;
wire    inStream_V_dest_V_0_load_B;
reg   [1:0] inStream_V_dest_V_0_state;
wire    inStream_V_dest_V_0_state_cmp_full;
reg   [63:0] outStream_V_data_1_data_out;
wire    outStream_V_data_1_vld_in;
wire    outStream_V_data_1_vld_out;
wire    outStream_V_data_1_ack_in;
wire    outStream_V_data_1_ack_out;
reg   [63:0] outStream_V_data_1_payload_A;
reg   [63:0] outStream_V_data_1_payload_B;
reg    outStream_V_data_1_sel_rd;
reg    outStream_V_data_1_sel_wr;
wire    outStream_V_data_1_sel;
wire    outStream_V_data_1_load_A;
wire    outStream_V_data_1_load_B;
reg   [1:0] outStream_V_data_1_state;
wire    outStream_V_data_1_state_cmp_full;
reg   [7:0] outStream_V_keep_V_1_data_out;
wire    outStream_V_keep_V_1_vld_in;
wire    outStream_V_keep_V_1_vld_out;
wire    outStream_V_keep_V_1_ack_in;
wire    outStream_V_keep_V_1_ack_out;
reg   [7:0] outStream_V_keep_V_1_payload_A;
reg   [7:0] outStream_V_keep_V_1_payload_B;
reg    outStream_V_keep_V_1_sel_rd;
reg    outStream_V_keep_V_1_sel_wr;
wire    outStream_V_keep_V_1_sel;
wire    outStream_V_keep_V_1_load_A;
wire    outStream_V_keep_V_1_load_B;
reg   [1:0] outStream_V_keep_V_1_state;
wire    outStream_V_keep_V_1_state_cmp_full;
reg   [7:0] outStream_V_strb_V_1_data_out;
wire    outStream_V_strb_V_1_vld_in;
wire    outStream_V_strb_V_1_vld_out;
wire    outStream_V_strb_V_1_ack_in;
wire    outStream_V_strb_V_1_ack_out;
reg   [7:0] outStream_V_strb_V_1_payload_A;
reg   [7:0] outStream_V_strb_V_1_payload_B;
reg    outStream_V_strb_V_1_sel_rd;
reg    outStream_V_strb_V_1_sel_wr;
wire    outStream_V_strb_V_1_sel;
wire    outStream_V_strb_V_1_load_A;
wire    outStream_V_strb_V_1_load_B;
reg   [1:0] outStream_V_strb_V_1_state;
wire    outStream_V_strb_V_1_state_cmp_full;
reg   [1:0] outStream_V_user_V_1_data_out;
wire    outStream_V_user_V_1_vld_in;
wire    outStream_V_user_V_1_vld_out;
wire    outStream_V_user_V_1_ack_in;
wire    outStream_V_user_V_1_ack_out;
reg   [1:0] outStream_V_user_V_1_payload_A;
reg   [1:0] outStream_V_user_V_1_payload_B;
reg    outStream_V_user_V_1_sel_rd;
reg    outStream_V_user_V_1_sel_wr;
wire    outStream_V_user_V_1_sel;
wire    outStream_V_user_V_1_load_A;
wire    outStream_V_user_V_1_load_B;
reg   [1:0] outStream_V_user_V_1_state;
wire    outStream_V_user_V_1_state_cmp_full;
reg   [0:0] outStream_V_last_V_1_data_out;
wire    outStream_V_last_V_1_vld_in;
wire    outStream_V_last_V_1_vld_out;
wire    outStream_V_last_V_1_ack_in;
wire    outStream_V_last_V_1_ack_out;
reg   [0:0] outStream_V_last_V_1_payload_A;
reg   [0:0] outStream_V_last_V_1_payload_B;
reg    outStream_V_last_V_1_sel_rd;
reg    outStream_V_last_V_1_sel_wr;
wire    outStream_V_last_V_1_sel;
wire    outStream_V_last_V_1_load_A;
wire    outStream_V_last_V_1_load_B;
reg   [1:0] outStream_V_last_V_1_state;
wire    outStream_V_last_V_1_state_cmp_full;
reg   [4:0] outStream_V_id_V_1_data_out;
wire    outStream_V_id_V_1_vld_in;
wire    outStream_V_id_V_1_vld_out;
wire    outStream_V_id_V_1_ack_in;
wire    outStream_V_id_V_1_ack_out;
reg   [4:0] outStream_V_id_V_1_payload_A;
reg   [4:0] outStream_V_id_V_1_payload_B;
reg    outStream_V_id_V_1_sel_rd;
reg    outStream_V_id_V_1_sel_wr;
wire    outStream_V_id_V_1_sel;
wire    outStream_V_id_V_1_load_A;
wire    outStream_V_id_V_1_load_B;
reg   [1:0] outStream_V_id_V_1_state;
wire    outStream_V_id_V_1_state_cmp_full;
reg   [5:0] outStream_V_dest_V_1_data_out;
wire    outStream_V_dest_V_1_vld_in;
wire    outStream_V_dest_V_1_vld_out;
wire    outStream_V_dest_V_1_ack_in;
wire    outStream_V_dest_V_1_ack_out;
reg   [5:0] outStream_V_dest_V_1_payload_A;
reg   [5:0] outStream_V_dest_V_1_payload_B;
reg    outStream_V_dest_V_1_sel_rd;
reg    outStream_V_dest_V_1_sel_wr;
wire    outStream_V_dest_V_1_sel;
wire    outStream_V_dest_V_1_load_A;
wire    outStream_V_dest_V_1_load_B;
reg   [1:0] outStream_V_dest_V_1_state;
wire    outStream_V_dest_V_1_state_cmp_full;
wire   [8:0] output_h_V;
wire   [8:0] output_w_V;
wire   [8:0] input_h_V;
wire   [8:0] input_w_V;
wire   [3:0] input_fold_ch_V;
wire   [1:0] stride_V;
reg    inStream_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln27_reg_2469;
reg   [0:0] icmp_ln27_reg_2469_pp0_iter1_reg;
reg   [0:0] select_ln1598_32_reg_2696;
wire    call_ln112_write_output_fu_778_outStream_TDATA_blk_n;
reg    outStream_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] select_ln1598_33_reg_2700;
reg   [0:0] select_ln1598_33_reg_2700_pp0_iter4_reg;
reg   [25:0] indvar_flatten308_reg_624;
reg   [8:0] i_op_assign_reg_636;
reg   [16:0] indvar_flatten180_reg_648;
reg   [14:0] indvar_flatten79_reg_660;
reg   [8:0] i_op_assign_2_reg_672;
reg   [5:0] indvar_flatten_reg_684;
reg   [3:0] i_op_assign_4_reg_696;
reg   [1:0] i_op_assign_1_reg_708;
reg   [1:0] i_op_assign_3_reg_719;
wire   [15:0] line_buff_group_0_va_q0;
reg   [15:0] reg_806;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state9_pp0_stage1_iter0;
reg    ap_predicate_op320_read_state11;
reg    ap_block_state11_pp0_stage1_iter1;
wire    ap_block_state13_pp0_stage1_iter2;
wire    ap_block_state15_pp0_stage1_iter3;
reg    ap_block_state17_pp0_stage1_iter4;
reg    ap_block_pp0_stage1_11001;
reg   [0:0] select_ln1598_33_reg_2700_pp0_iter2_reg;
wire   [15:0] line_buff_group_0_va_q1;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state8_pp0_stage0_iter0;
wire    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_state14_pp0_stage0_iter3;
wire    ap_block_state16_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] select_ln1598_33_reg_2700_pp0_iter3_reg;
wire   [15:0] line_buff_group_1_va_q0;
reg   [15:0] reg_811;
wire   [15:0] line_buff_group_1_va_q1;
wire   [15:0] line_buff_group_2_va_q0;
reg   [15:0] reg_816;
wire   [15:0] line_buff_group_2_va_q1;
wire   [15:0] line_buff_group_3_va_q0;
reg   [15:0] reg_821;
wire   [15:0] line_buff_group_3_va_q1;
reg   [1:0] stride_V_read_reg_2232;
reg   [3:0] input_fold_ch_V_read_reg_2240;
reg   [8:0] input_w_V_read_reg_2248;
reg   [8:0] input_h_V_read_reg_2254;
reg   [8:0] output_w_V_read_reg_2259;
reg   [8:0] output_h_V_read_reg_2265;
wire   [2:0] add_ln19_fu_826_p2;
wire    ap_CS_fsm_state2;
wire   [11:0] add_ln627_fu_832_p2;
wire   [2:0] add_ln20_fu_844_p2;
wire    ap_CS_fsm_state3;
wire   [11:0] add_ln627_1_fu_850_p2;
wire   [2:0] add_ln21_fu_862_p2;
wire    ap_CS_fsm_state4;
wire   [11:0] add_ln627_2_fu_868_p2;
wire   [2:0] add_ln22_fu_880_p2;
wire    ap_CS_fsm_state5;
wire   [11:0] add_ln627_3_fu_886_p2;
wire   [5:0] bound_fu_904_p2;
reg   [5:0] bound_reg_2353;
wire   [0:0] icmp_ln22_fu_892_p2;
wire   [14:0] bound4_fu_917_p2;
reg   [14:0] bound4_reg_2359;
wire   [16:0] bound84_fu_929_p2;
reg   [16:0] bound84_reg_2366;
wire    ap_CS_fsm_state6;
wire   [10:0] p_cast60_fu_935_p1;
reg   [10:0] p_cast60_reg_2372;
wire    ap_CS_fsm_state7;
wire   [10:0] zext_ln215_fu_938_p1;
reg   [10:0] zext_ln215_reg_2380;
wire   [10:0] zext_ln1354_4_fu_941_p1;
reg   [10:0] zext_ln1354_4_reg_2387;
wire   [2:0] add_ln1354_fu_947_p2;
reg   [2:0] add_ln1354_reg_2394;
wire   [9:0] ret_V_fu_956_p2;
reg   [9:0] ret_V_reg_2400;
wire   [9:0] add_ln1354_2_fu_965_p2;
reg   [9:0] add_ln1354_2_reg_2406;
wire   [4:0] ret_V_1_fu_974_p2;
reg   [4:0] ret_V_1_reg_2412;
wire   [25:0] bound185_fu_2226_p2;
reg   [25:0] bound185_reg_2417;
wire   [0:0] icmp_ln77_2_fu_986_p2;
reg   [0:0] icmp_ln77_2_reg_2422;
wire   [0:0] icmp_ln101_2_fu_992_p2;
reg   [0:0] icmp_ln101_2_reg_2427;
wire   [0:0] icmp_ln55_fu_998_p2;
reg   [0:0] icmp_ln55_reg_2433;
wire   [0:0] icmp_ln39_fu_1003_p2;
reg   [0:0] icmp_ln39_reg_2439;
wire   [0:0] icmp_ln36_fu_1008_p2;
reg   [0:0] icmp_ln36_reg_2446;
wire   [0:0] icmp_ln33_fu_1013_p2;
reg   [0:0] icmp_ln33_reg_2452;
wire   [10:0] mul_ln44_fu_1026_p2;
reg   [10:0] mul_ln44_reg_2457;
wire   [10:0] mul_ln45_fu_1040_p2;
reg   [10:0] mul_ln45_reg_2463;
wire   [0:0] icmp_ln27_fu_1045_p2;
wire   [8:0] out_row_fu_1050_p2;
reg   [8:0] out_row_reg_2473;
wire   [0:0] icmp_ln30_fu_1056_p2;
reg   [0:0] icmp_ln30_reg_2478;
wire   [10:0] mul_ln44_1_fu_1069_p2;
reg   [10:0] mul_ln44_1_reg_2496;
wire   [0:0] select_ln1598_2_fu_1079_p3;
reg   [0:0] select_ln1598_2_reg_2503;
wire   [0:0] icmp_ln39_1_fu_1087_p2;
reg   [0:0] icmp_ln39_1_reg_2508;
wire   [0:0] icmp_ln36_1_fu_1092_p2;
reg   [0:0] icmp_ln36_1_reg_2513;
wire   [0:0] select_ln1598_10_fu_1102_p3;
reg   [0:0] select_ln1598_10_reg_2518;
wire   [10:0] col_idx_fu_1157_p2;
reg   [10:0] col_idx_reg_2533;
wire  signed [11:0] conv_count_1_fu_1184_p3;
reg  signed [11:0] conv_count_1_reg_2538;
wire   [0:0] or_ln77_1_fu_1227_p2;
reg   [0:0] or_ln77_1_reg_2543;
wire   [10:0] add_ln36_fu_1237_p2;
reg   [10:0] add_ln36_reg_2548;
wire   [25:0] add_ln27_fu_1243_p2;
reg   [25:0] add_ln27_reg_2553;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] select_ln1598_fu_1249_p3;
reg   [1:0] select_ln1598_reg_2558;
wire   [8:0] select_ln27_fu_1324_p3;
reg   [8:0] select_ln27_reg_2563;
wire   [1:0] row_stride_fu_1330_p2;
reg   [1:0] row_stride_reg_2568;
wire   [0:0] or_ln1598_1_fu_1336_p2;
reg   [0:0] or_ln1598_1_reg_2573;
wire   [0:0] select_ln1598_12_fu_1368_p3;
reg   [0:0] select_ln1598_12_reg_2581;
wire   [0:0] select_ln1598_13_fu_1386_p3;
reg   [0:0] select_ln1598_13_reg_2587;
wire   [0:0] select_ln1598_14_fu_1398_p3;
reg   [0:0] select_ln1598_14_reg_2593;
wire   [0:0] select_ln1598_18_fu_1416_p3;
reg   [0:0] select_ln1598_18_reg_2599;
wire   [0:0] select_ln1598_21_fu_1429_p3;
reg   [0:0] select_ln1598_21_reg_2604;
wire   [1:0] select_ln1598_22_fu_1451_p3;
reg   [1:0] select_ln1598_22_reg_2614;
wire   [10:0] mul_ln45_1_fu_1467_p2;
reg   [10:0] mul_ln45_1_reg_2619;
wire   [0:0] select_ln1598_24_fu_1477_p3;
reg   [0:0] select_ln1598_24_reg_2628;
wire   [0:0] select_ln1598_29_fu_1485_p3;
reg   [0:0] select_ln1598_29_reg_2633;
wire   [8:0] select_ln33_fu_1492_p3;
reg   [8:0] select_ln33_reg_2643;
wire   [1:0] col_stride_fu_1500_p2;
reg   [1:0] col_stride_reg_2648;
wire   [3:0] select_ln1598_30_fu_1518_p3;
reg   [3:0] select_ln1598_30_reg_2655;
wire   [12:0] mul_ln203_fu_1530_p2;
reg   [12:0] mul_ln203_reg_2660;
reg   [12:0] mul_ln203_reg_2660_pp0_iter1_reg;
reg   [12:0] mul_ln203_reg_2660_pp0_iter2_reg;
wire   [3:0] input_ch_idx_fu_1536_p2;
reg   [3:0] input_ch_idx_reg_2671;
wire   [5:0] select_ln36_1_fu_1548_p3;
reg   [5:0] select_ln36_1_reg_2676;
wire   [14:0] select_ln33_1_fu_1562_p3;
reg   [14:0] select_ln33_1_reg_2681;
wire   [16:0] select_ln30_1_fu_1576_p3;
reg   [16:0] select_ln30_1_reg_2686;
wire   [1:0] select_ln30_fu_1610_p3;
reg   [1:0] select_ln30_reg_2691;
wire   [0:0] select_ln1598_32_fu_1787_p3;
wire   [0:0] select_ln1598_33_fu_1816_p3;
wire   [12:0] select_ln1598_36_fu_1848_p3;
reg   [12:0] select_ln1598_36_reg_2704;
reg   [12:0] select_ln1598_36_reg_2704_pp0_iter2_reg;
wire   [10:0] select_ln1598_37_fu_1865_p3;
reg   [10:0] select_ln1598_37_reg_2713;
wire   [1:0] select_ln36_fu_1872_p3;
reg   [1:0] select_ln36_reg_2718;
wire  signed [63:0] sext_ln203_fu_1882_p1;
reg  signed [63:0] sext_ln203_reg_2723;
reg   [11:0] line_buff_group_0_va_5_reg_2731;
reg   [11:0] line_buff_group_1_va_5_reg_2736;
reg   [11:0] line_buff_group_2_va_5_reg_2741;
reg   [11:0] line_buff_group_3_va_5_reg_2746;
wire   [0:0] and_ln879_1_fu_1903_p2;
reg   [0:0] and_ln879_1_reg_2751;
reg   [0:0] and_ln879_1_reg_2751_pp0_iter2_reg;
reg   [0:0] and_ln879_1_reg_2751_pp0_iter3_reg;
reg   [0:0] and_ln879_1_reg_2751_pp0_iter4_reg;
wire   [12:0] zext_ln1598_9_fu_1995_p1;
reg   [12:0] zext_ln1598_9_reg_2756;
reg   [11:0] line_buff_group_0_va_6_reg_2774;
reg   [11:0] line_buff_group_0_va_7_reg_2779;
reg   [11:0] line_buff_group_0_va_7_reg_2779_pp0_iter3_reg;
reg   [11:0] line_buff_group_1_va_6_reg_2794;
reg   [11:0] line_buff_group_1_va_7_reg_2799;
reg   [11:0] line_buff_group_1_va_7_reg_2799_pp0_iter3_reg;
reg   [11:0] line_buff_group_2_va_6_reg_2814;
reg   [11:0] line_buff_group_2_va_7_reg_2819;
reg   [11:0] line_buff_group_2_va_7_reg_2819_pp0_iter3_reg;
reg   [11:0] line_buff_group_3_va_6_reg_2834;
reg   [11:0] line_buff_group_3_va_7_reg_2839;
reg   [11:0] line_buff_group_3_va_7_reg_2839_pp0_iter3_reg;
reg   [7:0] tmp_keep_V_load_reg_2844;
reg   [7:0] tmp_keep_V_load_reg_2844_pp0_iter3_reg;
reg   [7:0] tmp_strb_V_load_reg_2849;
reg   [7:0] tmp_strb_V_load_reg_2849_pp0_iter3_reg;
reg   [1:0] tmp_user_V_load_reg_2854;
reg   [1:0] tmp_user_V_load_reg_2854_pp0_iter3_reg;
reg   [4:0] tmp_id_V_load_reg_2859;
reg   [4:0] tmp_id_V_load_reg_2859_pp0_iter3_reg;
reg   [5:0] tmp_dest_V_load_reg_2864;
reg   [5:0] tmp_dest_V_load_reg_2864_pp0_iter3_reg;
reg   [15:0] window_0_val_0_V_1_reg_2869;
reg   [15:0] window_1_val_0_V_1_reg_2874;
reg   [15:0] window_2_val_0_V_1_reg_2879;
reg   [15:0] window_3_val_0_V_1_reg_2884;
wire   [12:0] add_ln140_2_fu_2057_p2;
reg   [12:0] add_ln140_2_reg_2889;
wire   [12:0] add_ln140_3_fu_2073_p2;
reg   [12:0] add_ln140_3_reg_2894;
wire   [12:0] add_ln140_4_fu_2089_p2;
reg   [12:0] add_ln140_4_reg_2899;
wire   [12:0] add_ln140_5_fu_2105_p2;
reg   [12:0] add_ln140_5_reg_2904;
wire   [15:0] line_buff_group_0_va_1_q1;
reg   [15:0] window_0_val_1_V_0_reg_2909;
reg    ap_enable_reg_pp0_iter3;
wire   [15:0] line_buff_group_1_va_1_q1;
reg   [15:0] window_1_val_1_V_0_reg_2915;
wire   [15:0] line_buff_group_2_va_1_q1;
reg   [15:0] window_2_val_1_V_0_reg_2921;
wire   [15:0] line_buff_group_3_va_1_q1;
reg   [15:0] window_3_val_1_V_0_reg_2927;
reg   [15:0] window_0_val_1_V_1_reg_2953;
reg   [15:0] window_1_val_1_V_1_reg_2959;
reg   [15:0] window_2_val_1_V_1_reg_2965;
reg   [15:0] window_3_val_1_V_1_reg_2971;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg   [11:0] line_buff_group_0_va_address0;
reg    line_buff_group_0_va_ce0;
reg    line_buff_group_0_va_we0;
reg   [11:0] line_buff_group_0_va_address1;
reg    line_buff_group_0_va_ce1;
reg   [11:0] line_buff_group_0_va_1_address0;
reg    line_buff_group_0_va_1_ce0;
reg    line_buff_group_0_va_1_we0;
wire   [15:0] line_buff_group_0_va_1_q0;
reg   [11:0] line_buff_group_0_va_1_address1;
reg    line_buff_group_0_va_1_ce1;
reg   [11:0] line_buff_group_1_va_address0;
reg    line_buff_group_1_va_ce0;
reg    line_buff_group_1_va_we0;
reg   [11:0] line_buff_group_1_va_address1;
reg    line_buff_group_1_va_ce1;
reg   [11:0] line_buff_group_1_va_1_address0;
reg    line_buff_group_1_va_1_ce0;
reg    line_buff_group_1_va_1_we0;
wire   [15:0] line_buff_group_1_va_1_q0;
reg   [11:0] line_buff_group_1_va_1_address1;
reg    line_buff_group_1_va_1_ce1;
reg   [11:0] line_buff_group_2_va_address0;
reg    line_buff_group_2_va_ce0;
reg    line_buff_group_2_va_we0;
reg   [11:0] line_buff_group_2_va_address1;
reg    line_buff_group_2_va_ce1;
reg   [11:0] line_buff_group_2_va_1_address0;
reg    line_buff_group_2_va_1_ce0;
reg    line_buff_group_2_va_1_we0;
wire   [15:0] line_buff_group_2_va_1_q0;
reg   [11:0] line_buff_group_2_va_1_address1;
reg    line_buff_group_2_va_1_ce1;
reg   [11:0] line_buff_group_3_va_address0;
reg    line_buff_group_3_va_ce0;
reg    line_buff_group_3_va_we0;
reg   [11:0] line_buff_group_3_va_address1;
reg    line_buff_group_3_va_ce1;
reg   [11:0] line_buff_group_3_va_1_address0;
reg    line_buff_group_3_va_1_ce0;
reg    line_buff_group_3_va_1_we0;
wire   [15:0] line_buff_group_3_va_1_q0;
reg   [11:0] line_buff_group_3_va_1_address1;
reg    line_buff_group_3_va_1_ce1;
wire    call_ln112_write_output_fu_778_ap_start;
wire    call_ln112_write_output_fu_778_ap_done;
wire    call_ln112_write_output_fu_778_ap_idle;
wire    call_ln112_write_output_fu_778_ap_ready;
wire   [15:0] call_ln112_write_output_fu_778_val_output_0_V;
wire   [15:0] call_ln112_write_output_fu_778_val_output_1_V;
wire   [15:0] call_ln112_write_output_fu_778_val_output_2_V;
wire   [15:0] call_ln112_write_output_fu_778_val_output_3_V;
wire   [63:0] call_ln112_write_output_fu_778_outStream_TDATA;
wire    call_ln112_write_output_fu_778_outStream_TVALID;
wire    call_ln112_write_output_fu_778_outStream_TREADY;
wire   [7:0] call_ln112_write_output_fu_778_outStream_TKEEP;
wire   [7:0] call_ln112_write_output_fu_778_outStream_TSTRB;
wire   [1:0] call_ln112_write_output_fu_778_outStream_TUSER;
wire   [0:0] call_ln112_write_output_fu_778_outStream_TLAST;
wire   [4:0] call_ln112_write_output_fu_778_outStream_TID;
wire   [5:0] call_ln112_write_output_fu_778_outStream_TDEST;
reg    call_ln112_write_output_fu_778_ap_ce;
wire    ap_block_state9_pp0_stage1_iter0_ignore_call65;
reg    ap_block_state11_pp0_stage1_iter1_ignore_call65;
wire    ap_block_state13_pp0_stage1_iter2_ignore_call65;
wire    ap_block_state15_pp0_stage1_iter3_ignore_call65;
wire    ap_block_state17_pp0_stage1_iter4_ignore_call65;
reg    ap_block_pp0_stage1_11001_ignoreCallOp461;
reg   [2:0] phi_ln19_reg_536;
wire   [0:0] icmp_ln19_fu_838_p2;
reg   [11:0] phi_mul_reg_547;
reg   [2:0] phi_ln20_reg_558;
wire   [0:0] icmp_ln20_fu_856_p2;
reg   [11:0] phi_mul311_reg_569;
reg   [2:0] phi_ln21_reg_580;
wire   [0:0] icmp_ln21_fu_874_p2;
reg   [11:0] phi_mul313_reg_591;
reg   [2:0] phi_ln22_reg_602;
reg   [11:0] phi_mul315_reg_613;
reg   [25:0] ap_phi_mux_indvar_flatten308_phi_fu_628_p4;
wire    ap_block_pp0_stage0;
reg   [8:0] ap_phi_mux_i_op_assign_phi_fu_640_p4;
reg   [16:0] ap_phi_mux_indvar_flatten180_phi_fu_652_p4;
reg   [14:0] ap_phi_mux_indvar_flatten79_phi_fu_664_p4;
reg   [8:0] ap_phi_mux_i_op_assign_2_phi_fu_676_p4;
reg   [5:0] ap_phi_mux_indvar_flatten_phi_fu_688_p4;
reg   [3:0] ap_phi_mux_i_op_assign_4_phi_fu_700_p4;
reg   [1:0] ap_phi_mux_i_op_assign_1_phi_fu_712_p4;
reg   [1:0] ap_phi_mux_i_op_assign_3_phi_fu_723_p4;
reg   [15:0] ap_phi_mux_p_011_phi_fu_734_p4;
reg   [15:0] ap_phi_reg_pp0_iter1_p_011_reg_730;
wire   [15:0] ap_phi_reg_pp0_iter0_p_011_reg_730;
reg   [15:0] ap_phi_mux_p_012_phi_fu_746_p4;
reg   [15:0] ap_phi_reg_pp0_iter1_p_012_reg_742;
wire   [15:0] ap_phi_reg_pp0_iter0_p_012_reg_742;
reg   [15:0] ap_phi_mux_p_013_phi_fu_758_p4;
reg   [15:0] ap_phi_reg_pp0_iter1_p_013_reg_754;
wire   [15:0] ap_phi_reg_pp0_iter0_p_013_reg_754;
reg   [15:0] ap_phi_mux_p_0_phi_fu_770_p4;
wire   [15:0] curr_input_data_sub_s_fu_1932_p1;
reg   [15:0] ap_phi_reg_pp0_iter1_p_0_reg_766;
wire   [15:0] ap_phi_reg_pp0_iter0_p_0_reg_766;
reg    call_ln112_write_output_fu_778_ap_start_reg;
wire  signed [63:0] sext_ln140_fu_2002_p1;
wire  signed [63:0] sext_ln140_1_fu_2019_p1;
wire  signed [63:0] sext_ln140_2_fu_2110_p1;
wire  signed [63:0] sext_ln140_3_fu_2114_p1;
wire  signed [63:0] sext_ln140_4_fu_2118_p1;
wire  signed [63:0] sext_ln140_5_fu_2122_p1;
reg   [7:0] tmp_keep_V_fu_198;
reg   [7:0] tmp_strb_V_fu_202;
reg   [1:0] tmp_user_V_fu_206;
reg   [4:0] tmp_id_V_fu_210;
reg   [5:0] tmp_dest_V_fu_214;
wire   [1:0] bound_fu_904_p0;
wire   [3:0] bound_fu_904_p1;
wire   [8:0] bound4_fu_917_p0;
wire   [5:0] bound4_fu_917_p1;
wire   [1:0] bound84_fu_929_p0;
wire   [14:0] bound84_fu_929_p1;
wire   [2:0] zext_ln1354_fu_944_p1;
wire   [9:0] zext_ln1354_1_fu_953_p1;
wire   [9:0] zext_ln1354_2_fu_962_p1;
wire   [4:0] zext_ln1354_3_fu_971_p1;
wire   [1:0] mul_ln44_fu_1026_p0;
wire   [8:0] mul_ln44_fu_1026_p1;
wire   [9:0] zext_ln44_fu_1022_p1;
wire   [1:0] mul_ln45_fu_1040_p0;
wire   [8:0] mul_ln45_fu_1040_p1;
wire   [1:0] mul_ln44_1_fu_1069_p0;
wire   [8:0] mul_ln44_1_fu_1069_p1;
wire   [9:0] zext_ln44_2_fu_1065_p1;
wire   [0:0] icmp_ln101_3_fu_1074_p2;
wire   [0:0] icmp_ln101_fu_1031_p2;
wire   [0:0] icmp_ln33_1_fu_1097_p2;
wire   [10:0] zext_ln1598_1_fu_1109_p1;
wire   [10:0] row_idx_fu_1117_p2;
wire   [0:0] icmp_ln55_1_fu_1128_p2;
wire   [2:0] zext_ln44_1_fu_1113_p1;
wire   [9:0] zext_ln45_fu_1144_p1;
wire   [10:0] zext_ln1598_3_fu_1153_p1;
wire   [0:0] icmp_ln48_fu_1122_p2;
wire   [0:0] icmp_ln48_1_fu_1166_p2;
wire   [11:0] zext_ln45_1_fu_1162_p1;
wire   [0:0] and_ln48_fu_1172_p2;
wire   [11:0] conv_count_fu_1178_p2;
wire   [0:0] icmp_ln55_2_fu_1192_p2;
wire   [0:0] xor_ln55_fu_1133_p2;
wire   [0:0] xor_ln55_1_fu_1197_p2;
wire   [0:0] icmp_ln77_fu_1139_p2;
wire   [0:0] xor_ln77_fu_1209_p2;
wire   [0:0] or_ln77_fu_1221_p2;
wire   [0:0] icmp_ln77_1_fu_1215_p2;
wire   [10:0] trunc_ln140_fu_1233_p1;
wire   [0:0] icmp_ln48_2_fu_1261_p2;
wire   [0:0] icmp_ln55_3_fu_1273_p2;
wire   [0:0] xor_ln55_2_fu_1277_p2;
wire   [0:0] icmp_ln101_1_fu_1148_p2;
wire   [0:0] or_ln55_1_fu_1302_p2;
wire   [0:0] or_ln55_fu_1203_p2;
wire   [10:0] zext_ln1598_5_fu_1348_p1;
wire   [10:0] select_ln1598_1_fu_1256_p3;
wire   [10:0] add_ln44_1_fu_1356_p2;
wire   [0:0] icmp_ln48_3_fu_1362_p2;
wire   [0:0] select_ln1598_3_fu_1266_p3;
wire   [0:0] icmp_ln55_4_fu_1375_p2;
wire   [0:0] xor_ln55_3_fu_1380_p2;
wire   [0:0] select_ln1598_4_fu_1283_p3;
wire   [2:0] zext_ln44_3_fu_1352_p1;
wire   [0:0] icmp_ln77_3_fu_1393_p2;
wire   [0:0] select_ln1598_5_fu_1290_p3;
wire   [0:0] select_ln1598_6_fu_1296_p3;
wire   [0:0] or_ln55_2_fu_1411_p2;
wire   [0:0] select_ln1598_7_fu_1307_p3;
wire   [0:0] select_ln1598_8_fu_1314_p3;
wire   [0:0] select_ln1598_9_fu_1319_p3;
wire   [8:0] select_ln1598_11_fu_1340_p3;
wire   [0:0] or_ln1598_3_fu_1441_p2;
wire   [0:0] or_ln1598_4_fu_1446_p2;
wire   [8:0] out_col_fu_1435_p2;
wire   [1:0] mul_ln45_1_fu_1467_p0;
wire   [8:0] mul_ln45_1_fu_1467_p1;
wire   [9:0] zext_ln45_2_fu_1463_p1;
wire   [0:0] icmp_ln101_4_fu_1472_p2;
wire   [0:0] select_ln1598_16_fu_1405_p3;
wire   [0:0] select_ln1598_20_fu_1423_p3;
wire   [0:0] or_ln1598_5_fu_1506_p2;
wire   [0:0] or_ln1598_6_fu_1512_p2;
wire   [3:0] mul_ln203_fu_1530_p0;
wire   [5:0] add_ln36_1_fu_1542_p2;
wire   [14:0] add_ln33_1_fu_1556_p2;
wire   [16:0] add_ln30_1_fu_1570_p2;
wire   [0:0] or_ln1598_fu_1583_p2;
wire   [10:0] select_ln1598_15_fu_1587_p3;
wire   [0:0] icmp_ln48_4_fu_1624_p2;
wire   [11:0] zext_ln45_3_fu_1621_p1;
wire   [0:0] and_ln48_1_fu_1629_p2;
wire   [11:0] add_ln49_1_fu_1634_p2;
wire   [10:0] select_ln1598_17_fu_1593_p3;
wire   [0:0] icmp_ln55_5_fu_1654_p2;
wire   [0:0] xor_ln55_4_fu_1658_p2;
wire   [0:0] or_ln55_3_fu_1664_p2;
wire   [0:0] xor_ln77_1_fu_1675_p2;
wire   [0:0] or_ln77_2_fu_1687_p2;
wire   [0:0] icmp_ln77_4_fu_1681_p2;
wire   [0:0] or_ln77_3_fu_1692_p2;
wire   [0:0] or_ln1598_2_fu_1599_p2;
wire  signed [11:0] select_ln48_1_fu_1640_p3;
wire   [10:0] trunc_ln140_1_fu_1705_p1;
wire   [10:0] add_ln1598_fu_1709_p2;
wire   [10:0] select_ln1598_19_fu_1604_p3;
wire   [10:0] zext_ln1598_7_fu_1722_p1;
wire   [10:0] select_ln1598_23_fu_1615_p3;
wire   [10:0] add_ln45_1_fu_1725_p2;
wire   [0:0] icmp_ln48_5_fu_1735_p2;
wire   [11:0] zext_ln45_4_fu_1731_p1;
wire   [0:0] and_ln48_2_fu_1741_p2;
wire   [11:0] add_ln49_2_fu_1746_p2;
wire   [10:0] select_ln1598_25_fu_1648_p3;
wire   [10:0] select_ln1598_31_fu_1760_p3;
wire   [0:0] icmp_ln55_6_fu_1771_p2;
wire   [0:0] xor_ln55_5_fu_1776_p2;
wire   [0:0] or_ln55_4_fu_1782_p2;
wire   [0:0] select_ln1598_26_fu_1669_p3;
wire   [0:0] xor_ln77_2_fu_1794_p2;
wire   [0:0] or_ln77_4_fu_1805_p2;
wire   [0:0] icmp_ln77_5_fu_1800_p2;
wire   [0:0] or_ln77_5_fu_1810_p2;
wire   [0:0] select_ln1598_27_fu_1698_p3;
wire  signed [11:0] select_ln48_2_fu_1752_p3;
wire  signed [12:0] sext_ln1598_2_fu_1831_p1;
wire  signed [12:0] sext_ln1598_1_fu_1827_p1;
wire   [12:0] select_ln1598_34_fu_1834_p3;
wire  signed [12:0] sext_ln1598_fu_1823_p1;
wire   [12:0] select_ln1598_35_fu_1841_p3;
wire   [10:0] trunc_ln140_2_fu_1855_p1;
wire   [10:0] add_ln1598_1_fu_1859_p2;
wire   [10:0] select_ln1598_28_fu_1715_p3;
wire   [12:0] zext_ln1598_8_fu_1767_p1;
wire   [12:0] add_ln203_fu_1877_p2;
wire   [4:0] zext_ln879_fu_1890_p1;
wire   [0:0] icmp_ln879_fu_1893_p2;
wire   [0:0] and_ln879_fu_1898_p2;
wire   [12:0] add_ln140_fu_1998_p2;
wire   [12:0] add_ln140_1_fu_2014_p2;
wire   [0:0] icmp_ln1494_fu_2046_p2;
wire   [12:0] select_ln156_fu_2051_p3;
wire   [0:0] icmp_ln1494_3_fu_2062_p2;
wire   [12:0] select_ln156_3_fu_2067_p3;
wire   [0:0] icmp_ln1494_6_fu_2078_p2;
wire   [12:0] select_ln156_6_fu_2083_p3;
wire   [0:0] icmp_ln1494_9_fu_2094_p2;
wire   [12:0] select_ln156_9_fu_2099_p3;
wire   [0:0] icmp_ln1494_1_fu_2126_p2;
wire   [15:0] select_ln156_1_fu_2131_p3;
wire   [0:0] icmp_ln1494_2_fu_2138_p2;
wire   [0:0] icmp_ln1494_4_fu_2151_p2;
wire   [15:0] select_ln156_4_fu_2156_p3;
wire   [0:0] icmp_ln1494_5_fu_2163_p2;
wire   [0:0] icmp_ln1494_7_fu_2176_p2;
wire   [15:0] select_ln156_7_fu_2181_p3;
wire   [0:0] icmp_ln1494_8_fu_2188_p2;
wire   [0:0] icmp_ln1494_10_fu_2201_p2;
wire   [15:0] select_ln156_10_fu_2206_p3;
wire   [0:0] icmp_ln1494_11_fu_2213_p2;
wire   [8:0] bound185_fu_2226_p0;
wire   [16:0] bound185_fu_2226_p1;
wire    ap_CS_fsm_state18;
reg    ap_block_state18;
reg   [9:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [25:0] bound185_fu_2226_p00;
wire   [25:0] bound185_fu_2226_p10;
wire   [14:0] bound4_fu_917_p00;
wire   [14:0] bound4_fu_917_p10;
wire   [16:0] bound84_fu_929_p00;
wire   [16:0] bound84_fu_929_p10;
wire   [5:0] bound_fu_904_p00;
wire   [5:0] bound_fu_904_p10;
wire   [12:0] mul_ln203_fu_1530_p00;
wire   [10:0] mul_ln44_1_fu_1069_p10;
wire   [10:0] mul_ln44_fu_1026_p10;
wire   [10:0] mul_ln45_1_fu_1467_p10;
wire   [10:0] mul_ln45_fu_1040_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 inStream_V_data_0_sel_rd = 1'b0;
#0 inStream_V_data_0_sel_wr = 1'b0;
#0 inStream_V_data_0_state = 2'd0;
#0 inStream_V_keep_V_0_sel_rd = 1'b0;
#0 inStream_V_keep_V_0_sel_wr = 1'b0;
#0 inStream_V_keep_V_0_state = 2'd0;
#0 inStream_V_strb_V_0_sel_rd = 1'b0;
#0 inStream_V_strb_V_0_sel_wr = 1'b0;
#0 inStream_V_strb_V_0_state = 2'd0;
#0 inStream_V_user_V_0_sel_rd = 1'b0;
#0 inStream_V_user_V_0_sel_wr = 1'b0;
#0 inStream_V_user_V_0_state = 2'd0;
#0 inStream_V_id_V_0_sel_rd = 1'b0;
#0 inStream_V_id_V_0_sel_wr = 1'b0;
#0 inStream_V_id_V_0_state = 2'd0;
#0 inStream_V_dest_V_0_sel_rd = 1'b0;
#0 inStream_V_dest_V_0_sel_wr = 1'b0;
#0 inStream_V_dest_V_0_state = 2'd0;
#0 outStream_V_data_1_sel_rd = 1'b0;
#0 outStream_V_data_1_sel_wr = 1'b0;
#0 outStream_V_data_1_state = 2'd0;
#0 outStream_V_keep_V_1_sel_rd = 1'b0;
#0 outStream_V_keep_V_1_sel_wr = 1'b0;
#0 outStream_V_keep_V_1_state = 2'd0;
#0 outStream_V_strb_V_1_sel_rd = 1'b0;
#0 outStream_V_strb_V_1_sel_wr = 1'b0;
#0 outStream_V_strb_V_1_state = 2'd0;
#0 outStream_V_user_V_1_sel_rd = 1'b0;
#0 outStream_V_user_V_1_sel_wr = 1'b0;
#0 outStream_V_user_V_1_state = 2'd0;
#0 outStream_V_last_V_1_sel_rd = 1'b0;
#0 outStream_V_last_V_1_sel_wr = 1'b0;
#0 outStream_V_last_V_1_state = 2'd0;
#0 outStream_V_id_V_1_sel_rd = 1'b0;
#0 outStream_V_id_V_1_sel_wr = 1'b0;
#0 outStream_V_id_V_1_state = 2'd0;
#0 outStream_V_dest_V_1_sel_rd = 1'b0;
#0 outStream_V_dest_V_1_sel_wr = 1'b0;
#0 outStream_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 call_ln112_write_output_fu_778_ap_start_reg = 1'b0;
end

yolo_max_pool_top_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
yolo_max_pool_top_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .output_h_V(output_h_V),
    .output_w_V(output_w_V),
    .input_h_V(input_h_V),
    .input_w_V(input_w_V),
    .input_fold_ch_V(input_fold_ch_V),
    .stride_V(stride_V)
);

yolo_max_pool_top_line_buff_group_0_va #(
    .DataWidth( 16 ),
    .AddressRange( 3344 ),
    .AddressWidth( 12 ))
line_buff_group_0_va_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buff_group_0_va_address0),
    .ce0(line_buff_group_0_va_ce0),
    .we0(line_buff_group_0_va_we0),
    .d0(line_buff_group_0_va_1_q0),
    .q0(line_buff_group_0_va_q0),
    .address1(line_buff_group_0_va_address1),
    .ce1(line_buff_group_0_va_ce1),
    .q1(line_buff_group_0_va_q1)
);

yolo_max_pool_top_line_buff_group_0_va #(
    .DataWidth( 16 ),
    .AddressRange( 3344 ),
    .AddressWidth( 12 ))
line_buff_group_0_va_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buff_group_0_va_1_address0),
    .ce0(line_buff_group_0_va_1_ce0),
    .we0(line_buff_group_0_va_1_we0),
    .d0(ap_phi_mux_p_0_phi_fu_770_p4),
    .q0(line_buff_group_0_va_1_q0),
    .address1(line_buff_group_0_va_1_address1),
    .ce1(line_buff_group_0_va_1_ce1),
    .q1(line_buff_group_0_va_1_q1)
);

yolo_max_pool_top_line_buff_group_0_va #(
    .DataWidth( 16 ),
    .AddressRange( 3344 ),
    .AddressWidth( 12 ))
line_buff_group_1_va_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buff_group_1_va_address0),
    .ce0(line_buff_group_1_va_ce0),
    .we0(line_buff_group_1_va_we0),
    .d0(line_buff_group_1_va_1_q0),
    .q0(line_buff_group_1_va_q0),
    .address1(line_buff_group_1_va_address1),
    .ce1(line_buff_group_1_va_ce1),
    .q1(line_buff_group_1_va_q1)
);

yolo_max_pool_top_line_buff_group_0_va #(
    .DataWidth( 16 ),
    .AddressRange( 3344 ),
    .AddressWidth( 12 ))
line_buff_group_1_va_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buff_group_1_va_1_address0),
    .ce0(line_buff_group_1_va_1_ce0),
    .we0(line_buff_group_1_va_1_we0),
    .d0(ap_phi_mux_p_013_phi_fu_758_p4),
    .q0(line_buff_group_1_va_1_q0),
    .address1(line_buff_group_1_va_1_address1),
    .ce1(line_buff_group_1_va_1_ce1),
    .q1(line_buff_group_1_va_1_q1)
);

yolo_max_pool_top_line_buff_group_0_va #(
    .DataWidth( 16 ),
    .AddressRange( 3344 ),
    .AddressWidth( 12 ))
line_buff_group_2_va_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buff_group_2_va_address0),
    .ce0(line_buff_group_2_va_ce0),
    .we0(line_buff_group_2_va_we0),
    .d0(line_buff_group_2_va_1_q0),
    .q0(line_buff_group_2_va_q0),
    .address1(line_buff_group_2_va_address1),
    .ce1(line_buff_group_2_va_ce1),
    .q1(line_buff_group_2_va_q1)
);

yolo_max_pool_top_line_buff_group_0_va #(
    .DataWidth( 16 ),
    .AddressRange( 3344 ),
    .AddressWidth( 12 ))
line_buff_group_2_va_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buff_group_2_va_1_address0),
    .ce0(line_buff_group_2_va_1_ce0),
    .we0(line_buff_group_2_va_1_we0),
    .d0(ap_phi_mux_p_012_phi_fu_746_p4),
    .q0(line_buff_group_2_va_1_q0),
    .address1(line_buff_group_2_va_1_address1),
    .ce1(line_buff_group_2_va_1_ce1),
    .q1(line_buff_group_2_va_1_q1)
);

yolo_max_pool_top_line_buff_group_0_va #(
    .DataWidth( 16 ),
    .AddressRange( 3344 ),
    .AddressWidth( 12 ))
line_buff_group_3_va_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buff_group_3_va_address0),
    .ce0(line_buff_group_3_va_ce0),
    .we0(line_buff_group_3_va_we0),
    .d0(line_buff_group_3_va_1_q0),
    .q0(line_buff_group_3_va_q0),
    .address1(line_buff_group_3_va_address1),
    .ce1(line_buff_group_3_va_ce1),
    .q1(line_buff_group_3_va_q1)
);

yolo_max_pool_top_line_buff_group_0_va #(
    .DataWidth( 16 ),
    .AddressRange( 3344 ),
    .AddressWidth( 12 ))
line_buff_group_3_va_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buff_group_3_va_1_address0),
    .ce0(line_buff_group_3_va_1_ce0),
    .we0(line_buff_group_3_va_1_we0),
    .d0(ap_phi_mux_p_011_phi_fu_734_p4),
    .q0(line_buff_group_3_va_1_q0),
    .address1(line_buff_group_3_va_1_address1),
    .ce1(line_buff_group_3_va_1_ce1),
    .q1(line_buff_group_3_va_1_q1)
);

write_output call_ln112_write_output_fu_778(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(call_ln112_write_output_fu_778_ap_start),
    .ap_done(call_ln112_write_output_fu_778_ap_done),
    .ap_idle(call_ln112_write_output_fu_778_ap_idle),
    .ap_ready(call_ln112_write_output_fu_778_ap_ready),
    .val_output_0_V(call_ln112_write_output_fu_778_val_output_0_V),
    .val_output_1_V(call_ln112_write_output_fu_778_val_output_1_V),
    .val_output_2_V(call_ln112_write_output_fu_778_val_output_2_V),
    .val_output_3_V(call_ln112_write_output_fu_778_val_output_3_V),
    .curr_input_keep_V(tmp_keep_V_load_reg_2844_pp0_iter3_reg),
    .curr_input_strb_V(tmp_strb_V_load_reg_2849_pp0_iter3_reg),
    .curr_input_user_V(tmp_user_V_load_reg_2854_pp0_iter3_reg),
    .curr_input_id_V(tmp_id_V_load_reg_2859_pp0_iter3_reg),
    .curr_input_dest_V(tmp_dest_V_load_reg_2864_pp0_iter3_reg),
    .outStream_TDATA(call_ln112_write_output_fu_778_outStream_TDATA),
    .outStream_TVALID(call_ln112_write_output_fu_778_outStream_TVALID),
    .outStream_TREADY(call_ln112_write_output_fu_778_outStream_TREADY),
    .outStream_TKEEP(call_ln112_write_output_fu_778_outStream_TKEEP),
    .outStream_TSTRB(call_ln112_write_output_fu_778_outStream_TSTRB),
    .outStream_TUSER(call_ln112_write_output_fu_778_outStream_TUSER),
    .outStream_TLAST(call_ln112_write_output_fu_778_outStream_TLAST),
    .outStream_TID(call_ln112_write_output_fu_778_outStream_TID),
    .outStream_TDEST(call_ln112_write_output_fu_778_outStream_TDEST),
    .last_V(and_ln879_1_reg_2751_pp0_iter4_reg),
    .outStream_TDATA_blk_n(call_ln112_write_output_fu_778_outStream_TDATA_blk_n),
    .ap_ce(call_ln112_write_output_fu_778_ap_ce)
);

yolo_max_pool_top_mul_mul_9ns_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
yolo_max_pool_top_mul_mul_9ns_17ns_26_1_1_U18(
    .din0(bound185_fu_2226_p0),
    .din1(bound185_fu_2226_p1),
    .dout(bound185_fu_2226_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        call_ln112_write_output_fu_778_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln1598_33_reg_2700_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
            call_ln112_write_output_fu_778_ap_start_reg <= 1'b1;
        end else if ((call_ln112_write_output_fu_778_ap_ready == 1'b1)) begin
            call_ln112_write_output_fu_778_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_data_0_ack_out == 1'b1) & (inStream_V_data_0_vld_out == 1'b1))) begin
            inStream_V_data_0_sel_rd <= ~inStream_V_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_data_0_ack_in == 1'b1) & (inStream_V_data_0_vld_in == 1'b1))) begin
            inStream_V_data_0_sel_wr <= ~inStream_V_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_data_0_state == 2'd2) & (inStream_V_data_0_vld_in == 1'b0)) | ((inStream_V_data_0_state == 2'd3) & (inStream_V_data_0_vld_in == 1'b0) & (inStream_V_data_0_ack_out == 1'b1)))) begin
            inStream_V_data_0_state <= 2'd2;
        end else if ((((inStream_V_data_0_state == 2'd1) & (inStream_V_data_0_ack_out == 1'b0)) | ((inStream_V_data_0_state == 2'd3) & (inStream_V_data_0_ack_out == 1'b0) & (inStream_V_data_0_vld_in == 1'b1)))) begin
            inStream_V_data_0_state <= 2'd1;
        end else if (((~((inStream_V_data_0_vld_in == 1'b0) & (inStream_V_data_0_ack_out == 1'b1)) & ~((inStream_V_data_0_ack_out == 1'b0) & (inStream_V_data_0_vld_in == 1'b1)) & (inStream_V_data_0_state == 2'd3)) | ((inStream_V_data_0_state == 2'd1) & (inStream_V_data_0_ack_out == 1'b1)) | ((inStream_V_data_0_state == 2'd2) & (inStream_V_data_0_vld_in == 1'b1)))) begin
            inStream_V_data_0_state <= 2'd3;
        end else begin
            inStream_V_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_out == 1'b1) & (inStream_V_dest_V_0_vld_out == 1'b1))) begin
            inStream_V_dest_V_0_sel_rd <= ~inStream_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_in == 1'b1) & (inStream_V_dest_V_0_vld_in == 1'b1))) begin
            inStream_V_dest_V_0_sel_wr <= ~inStream_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_dest_V_0_state == 2'd2) & (inStream_V_dest_V_0_vld_in == 1'b0)) | ((inStream_V_dest_V_0_state == 2'd3) & (inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd2;
        end else if ((((inStream_V_dest_V_0_state == 2'd1) & (inStream_V_dest_V_0_ack_out == 1'b0)) | ((inStream_V_dest_V_0_state == 2'd3) & (inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd1;
        end else if (((~((inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1)) & ~((inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1)) & (inStream_V_dest_V_0_state == 2'd3)) | ((inStream_V_dest_V_0_state == 2'd1) & (inStream_V_dest_V_0_ack_out == 1'b1)) | ((inStream_V_dest_V_0_state == 2'd2) & (inStream_V_dest_V_0_vld_in == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd3;
        end else begin
            inStream_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_id_V_0_ack_out == 1'b1) & (inStream_V_id_V_0_vld_out == 1'b1))) begin
            inStream_V_id_V_0_sel_rd <= ~inStream_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_id_V_0_ack_in == 1'b1) & (inStream_V_id_V_0_vld_in == 1'b1))) begin
            inStream_V_id_V_0_sel_wr <= ~inStream_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_id_V_0_state == 2'd2) & (inStream_V_id_V_0_vld_in == 1'b0)) | ((inStream_V_id_V_0_state == 2'd3) & (inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_ack_out == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd2;
        end else if ((((inStream_V_id_V_0_state == 2'd1) & (inStream_V_id_V_0_ack_out == 1'b0)) | ((inStream_V_id_V_0_state == 2'd3) & (inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_vld_in == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd1;
        end else if (((~((inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_ack_out == 1'b1)) & ~((inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_vld_in == 1'b1)) & (inStream_V_id_V_0_state == 2'd3)) | ((inStream_V_id_V_0_state == 2'd1) & (inStream_V_id_V_0_ack_out == 1'b1)) | ((inStream_V_id_V_0_state == 2'd2) & (inStream_V_id_V_0_vld_in == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd3;
        end else begin
            inStream_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_ack_out == 1'b1) & (inStream_V_keep_V_0_vld_out == 1'b1))) begin
            inStream_V_keep_V_0_sel_rd <= ~inStream_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_ack_in == 1'b1) & (inStream_V_keep_V_0_vld_in == 1'b1))) begin
            inStream_V_keep_V_0_sel_wr <= ~inStream_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_keep_V_0_state == 2'd2) & (inStream_V_keep_V_0_vld_in == 1'b0)) | ((inStream_V_keep_V_0_state == 2'd3) & (inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd2;
        end else if ((((inStream_V_keep_V_0_state == 2'd1) & (inStream_V_keep_V_0_ack_out == 1'b0)) | ((inStream_V_keep_V_0_state == 2'd3) & (inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd1;
        end else if (((~((inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1)) & ~((inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1)) & (inStream_V_keep_V_0_state == 2'd3)) | ((inStream_V_keep_V_0_state == 2'd1) & (inStream_V_keep_V_0_ack_out == 1'b1)) | ((inStream_V_keep_V_0_state == 2'd2) & (inStream_V_keep_V_0_vld_in == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd3;
        end else begin
            inStream_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_out == 1'b1) & (inStream_V_strb_V_0_vld_out == 1'b1))) begin
            inStream_V_strb_V_0_sel_rd <= ~inStream_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_in == 1'b1) & (inStream_V_strb_V_0_vld_in == 1'b1))) begin
            inStream_V_strb_V_0_sel_wr <= ~inStream_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_strb_V_0_state == 2'd2) & (inStream_V_strb_V_0_vld_in == 1'b0)) | ((inStream_V_strb_V_0_state == 2'd3) & (inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd2;
        end else if ((((inStream_V_strb_V_0_state == 2'd1) & (inStream_V_strb_V_0_ack_out == 1'b0)) | ((inStream_V_strb_V_0_state == 2'd3) & (inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd1;
        end else if (((~((inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1)) & ~((inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1)) & (inStream_V_strb_V_0_state == 2'd3)) | ((inStream_V_strb_V_0_state == 2'd1) & (inStream_V_strb_V_0_ack_out == 1'b1)) | ((inStream_V_strb_V_0_state == 2'd2) & (inStream_V_strb_V_0_vld_in == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd3;
        end else begin
            inStream_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_out == 1'b1) & (inStream_V_user_V_0_vld_out == 1'b1))) begin
            inStream_V_user_V_0_sel_rd <= ~inStream_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_in == 1'b1) & (inStream_V_user_V_0_vld_in == 1'b1))) begin
            inStream_V_user_V_0_sel_wr <= ~inStream_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_user_V_0_state == 2'd2) & (inStream_V_user_V_0_vld_in == 1'b0)) | ((inStream_V_user_V_0_state == 2'd3) & (inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd2;
        end else if ((((inStream_V_user_V_0_state == 2'd1) & (inStream_V_user_V_0_ack_out == 1'b0)) | ((inStream_V_user_V_0_state == 2'd3) & (inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd1;
        end else if (((~((inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1)) & ~((inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1)) & (inStream_V_user_V_0_state == 2'd3)) | ((inStream_V_user_V_0_state == 2'd1) & (inStream_V_user_V_0_ack_out == 1'b1)) | ((inStream_V_user_V_0_state == 2'd2) & (inStream_V_user_V_0_vld_in == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd3;
        end else begin
            inStream_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_data_1_ack_out == 1'b1) & (outStream_V_data_1_vld_out == 1'b1))) begin
            outStream_V_data_1_sel_rd <= ~outStream_V_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_data_1_ack_in == 1'b1) & (outStream_V_data_1_vld_in == 1'b1))) begin
            outStream_V_data_1_sel_wr <= ~outStream_V_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_data_1_state == 2'd2) & (outStream_V_data_1_vld_in == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_V_data_1_vld_in == 1'b0) & (outStream_V_data_1_ack_out == 1'b1)))) begin
            outStream_V_data_1_state <= 2'd2;
        end else if ((((outStream_V_data_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_data_1_vld_in == 1'b1)))) begin
            outStream_V_data_1_state <= 2'd1;
        end else if (((~((outStream_V_data_1_vld_in == 1'b0) & (outStream_V_data_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_data_1_vld_in == 1'b1)) & (outStream_V_data_1_state == 2'd3)) | ((outStream_V_data_1_state == 2'd1) & (outStream_V_data_1_ack_out == 1'b1)) | ((outStream_V_data_1_state == 2'd2) & (outStream_V_data_1_vld_in == 1'b1)))) begin
            outStream_V_data_1_state <= 2'd3;
        end else begin
            outStream_V_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_out == 1'b1) & (outStream_V_dest_V_1_vld_out == 1'b1))) begin
            outStream_V_dest_V_1_sel_rd <= ~outStream_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_in == 1'b1) & (outStream_V_dest_V_1_vld_in == 1'b1))) begin
            outStream_V_dest_V_1_sel_wr <= ~outStream_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_dest_V_1_state == 2'd2) & (outStream_V_dest_V_1_vld_in == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd2;
        end else if ((((outStream_V_dest_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd1;
        end else if (((~((outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)) & (outStream_V_dest_V_1_state == 2'd3)) | ((outStream_V_dest_V_1_state == 2'd1) & (outStream_V_dest_V_1_ack_out == 1'b1)) | ((outStream_V_dest_V_1_state == 2'd2) & (outStream_V_dest_V_1_vld_in == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd3;
        end else begin
            outStream_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_out == 1'b1) & (outStream_V_id_V_1_vld_out == 1'b1))) begin
            outStream_V_id_V_1_sel_rd <= ~outStream_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_in == 1'b1) & (outStream_V_id_V_1_vld_in == 1'b1))) begin
            outStream_V_id_V_1_sel_wr <= ~outStream_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_id_V_1_state == 2'd2) & (outStream_V_id_V_1_vld_in == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd2;
        end else if ((((outStream_V_id_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd1;
        end else if (((~((outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)) & (outStream_V_id_V_1_state == 2'd3)) | ((outStream_V_id_V_1_state == 2'd1) & (outStream_V_id_V_1_ack_out == 1'b1)) | ((outStream_V_id_V_1_state == 2'd2) & (outStream_V_id_V_1_vld_in == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd3;
        end else begin
            outStream_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_out == 1'b1) & (outStream_V_keep_V_1_vld_out == 1'b1))) begin
            outStream_V_keep_V_1_sel_rd <= ~outStream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_in == 1'b1) & (outStream_V_keep_V_1_vld_in == 1'b1))) begin
            outStream_V_keep_V_1_sel_wr <= ~outStream_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_keep_V_1_state == 2'd2) & (outStream_V_keep_V_1_vld_in == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd2;
        end else if ((((outStream_V_keep_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd1;
        end else if (((~((outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)) & (outStream_V_keep_V_1_state == 2'd3)) | ((outStream_V_keep_V_1_state == 2'd1) & (outStream_V_keep_V_1_ack_out == 1'b1)) | ((outStream_V_keep_V_1_state == 2'd2) & (outStream_V_keep_V_1_vld_in == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd3;
        end else begin
            outStream_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_out == 1'b1) & (outStream_V_last_V_1_vld_out == 1'b1))) begin
            outStream_V_last_V_1_sel_rd <= ~outStream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_in == 1'b1) & (outStream_V_last_V_1_vld_in == 1'b1))) begin
            outStream_V_last_V_1_sel_wr <= ~outStream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_last_V_1_state == 2'd2) & (outStream_V_last_V_1_vld_in == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd2;
        end else if ((((outStream_V_last_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd1;
        end else if (((~((outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)) & (outStream_V_last_V_1_state == 2'd3)) | ((outStream_V_last_V_1_state == 2'd1) & (outStream_V_last_V_1_ack_out == 1'b1)) | ((outStream_V_last_V_1_state == 2'd2) & (outStream_V_last_V_1_vld_in == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd3;
        end else begin
            outStream_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_out == 1'b1) & (outStream_V_strb_V_1_vld_out == 1'b1))) begin
            outStream_V_strb_V_1_sel_rd <= ~outStream_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_in == 1'b1) & (outStream_V_strb_V_1_vld_in == 1'b1))) begin
            outStream_V_strb_V_1_sel_wr <= ~outStream_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_strb_V_1_state == 2'd2) & (outStream_V_strb_V_1_vld_in == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd2;
        end else if ((((outStream_V_strb_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd1;
        end else if (((~((outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)) & (outStream_V_strb_V_1_state == 2'd3)) | ((outStream_V_strb_V_1_state == 2'd1) & (outStream_V_strb_V_1_ack_out == 1'b1)) | ((outStream_V_strb_V_1_state == 2'd2) & (outStream_V_strb_V_1_vld_in == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd3;
        end else begin
            outStream_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_out == 1'b1) & (outStream_V_user_V_1_vld_out == 1'b1))) begin
            outStream_V_user_V_1_sel_rd <= ~outStream_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_in == 1'b1) & (outStream_V_user_V_1_vld_in == 1'b1))) begin
            outStream_V_user_V_1_sel_wr <= ~outStream_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_user_V_1_state == 2'd2) & (outStream_V_user_V_1_vld_in == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd2;
        end else if ((((outStream_V_user_V_1_state == 2'd1) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd1;
        end else if (((~((outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)) & ~((outStream_TREADY == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)) & (outStream_V_user_V_1_state == 2'd3)) | ((outStream_V_user_V_1_state == 2'd1) & (outStream_V_user_V_1_ack_out == 1'b1)) | ((outStream_V_user_V_1_state == 2'd2) & (outStream_V_user_V_1_vld_in == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd3;
        end else begin
            outStream_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln1598_32_fu_1787_p3 == 1'd1) & (icmp_ln27_reg_2469 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_011_reg_730 <= 16'd32768;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_011_reg_730 <= ap_phi_reg_pp0_iter0_p_011_reg_730;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln1598_32_fu_1787_p3 == 1'd1) & (icmp_ln27_reg_2469 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_012_reg_742 <= 16'd32768;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_012_reg_742 <= ap_phi_reg_pp0_iter0_p_012_reg_742;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln1598_32_fu_1787_p3 == 1'd1) & (icmp_ln27_reg_2469 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_013_reg_754 <= 16'd32768;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_013_reg_754 <= ap_phi_reg_pp0_iter0_p_013_reg_754;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln1598_32_fu_1787_p3 == 1'd1) & (icmp_ln27_reg_2469 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_0_reg_766 <= 16'd32768;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_0_reg_766 <= ap_phi_reg_pp0_iter0_p_0_reg_766;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln27_reg_2469_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_op_assign_1_reg_708 <= select_ln30_reg_2691;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_op_assign_1_reg_708 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln27_reg_2469 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_op_assign_2_reg_672 <= select_ln33_reg_2643;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_op_assign_2_reg_672 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln27_reg_2469_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_op_assign_3_reg_719 <= select_ln36_reg_2718;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_op_assign_3_reg_719 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln27_reg_2469 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_op_assign_4_reg_696 <= input_ch_idx_reg_2671;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_op_assign_4_reg_696 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln27_reg_2469 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_op_assign_reg_636 <= select_ln27_reg_2563;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_op_assign_reg_636 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln27_reg_2469 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten180_reg_648 <= select_ln30_1_reg_2686;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten180_reg_648 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln27_reg_2469 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten308_reg_624 <= add_ln27_reg_2553;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten308_reg_624 <= 26'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln27_reg_2469 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten79_reg_660 <= select_ln33_1_reg_2681;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten79_reg_660 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln27_reg_2469 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_684 <= select_ln36_1_reg_2676;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten_reg_684 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_838_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln19_reg_536 <= add_ln19_fu_826_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln19_reg_536 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_838_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln20_reg_558 <= 3'd0;
    end else if (((icmp_ln20_fu_856_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln20_reg_558 <= add_ln20_fu_844_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_856_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln21_reg_580 <= 3'd0;
    end else if (((icmp_ln21_fu_874_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_ln21_reg_580 <= add_ln21_fu_862_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_874_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_ln22_reg_602 <= 3'd0;
    end else if (((icmp_ln22_fu_892_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_ln22_reg_602 <= add_ln22_fu_880_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_838_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul311_reg_569 <= 12'd0;
    end else if (((icmp_ln20_fu_856_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul311_reg_569 <= add_ln627_1_fu_850_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_856_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul313_reg_591 <= 12'd0;
    end else if (((icmp_ln21_fu_874_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul313_reg_591 <= add_ln627_2_fu_868_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_874_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul315_reg_613 <= 12'd0;
    end else if (((icmp_ln22_fu_892_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_mul315_reg_613 <= add_ln627_3_fu_886_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_838_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_547 <= add_ln627_fu_832_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_547 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln1598_33_reg_2700_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        reg_806 <= line_buff_group_0_va_q1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (select_ln1598_33_reg_2700_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        reg_806 <= line_buff_group_0_va_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln1598_33_reg_2700_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        reg_811 <= line_buff_group_1_va_q1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (select_ln1598_33_reg_2700_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        reg_811 <= line_buff_group_1_va_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln1598_33_reg_2700_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        reg_816 <= line_buff_group_2_va_q1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (select_ln1598_33_reg_2700_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        reg_816 <= line_buff_group_2_va_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln1598_33_reg_2700_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        reg_821 <= line_buff_group_3_va_q1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (select_ln1598_33_reg_2700_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        reg_821 <= line_buff_group_3_va_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln1354_2_reg_2406 <= add_ln1354_2_fu_965_p2;
        add_ln1354_reg_2394 <= add_ln1354_fu_947_p2;
        bound185_reg_2417 <= bound185_fu_2226_p2;
        icmp_ln101_2_reg_2427 <= icmp_ln101_2_fu_992_p2;
        icmp_ln33_reg_2452 <= icmp_ln33_fu_1013_p2;
        icmp_ln36_reg_2446 <= icmp_ln36_fu_1008_p2;
        icmp_ln39_reg_2439 <= icmp_ln39_fu_1003_p2;
        icmp_ln55_reg_2433 <= icmp_ln55_fu_998_p2;
        icmp_ln77_2_reg_2422 <= icmp_ln77_2_fu_986_p2;
        p_cast60_reg_2372[1 : 0] <= p_cast60_fu_935_p1[1 : 0];
        ret_V_1_reg_2412 <= ret_V_1_fu_974_p2;
        ret_V_reg_2400 <= ret_V_fu_956_p2;
        zext_ln1354_4_reg_2387[8 : 0] <= zext_ln1354_4_fu_941_p1[8 : 0];
        zext_ln215_reg_2380[8 : 0] <= zext_ln215_fu_938_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln1598_33_reg_2700_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln140_2_reg_2889 <= add_ln140_2_fu_2057_p2;
        add_ln140_3_reg_2894 <= add_ln140_3_fu_2073_p2;
        add_ln140_4_reg_2899 <= add_ln140_4_fu_2089_p2;
        add_ln140_5_reg_2904 <= add_ln140_5_fu_2105_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln27_reg_2553 <= add_ln27_fu_1243_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln36_reg_2548 <= add_ln36_fu_1237_p2;
        col_idx_reg_2533 <= col_idx_fu_1157_p2;
        conv_count_1_reg_2538 <= conv_count_1_fu_1184_p3;
        mul_ln203_reg_2660_pp0_iter1_reg[12 : 1] <= mul_ln203_reg_2660[12 : 1];
        mul_ln203_reg_2660_pp0_iter2_reg[12 : 1] <= mul_ln203_reg_2660_pp0_iter1_reg[12 : 1];
        or_ln77_1_reg_2543 <= or_ln77_1_fu_1227_p2;
        tmp_dest_V_load_reg_2864_pp0_iter3_reg <= tmp_dest_V_load_reg_2864;
        tmp_id_V_load_reg_2859_pp0_iter3_reg <= tmp_id_V_load_reg_2859;
        tmp_keep_V_load_reg_2844_pp0_iter3_reg <= tmp_keep_V_load_reg_2844;
        tmp_strb_V_load_reg_2849_pp0_iter3_reg <= tmp_strb_V_load_reg_2849;
        tmp_user_V_load_reg_2854_pp0_iter3_reg <= tmp_user_V_load_reg_2854;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln1598_33_fu_1816_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln879_1_reg_2751 <= and_ln879_1_fu_1903_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln879_1_reg_2751_pp0_iter2_reg <= and_ln879_1_reg_2751;
        and_ln879_1_reg_2751_pp0_iter3_reg <= and_ln879_1_reg_2751_pp0_iter2_reg;
        and_ln879_1_reg_2751_pp0_iter4_reg <= and_ln879_1_reg_2751_pp0_iter3_reg;
        icmp_ln27_reg_2469 <= icmp_ln27_fu_1045_p2;
        icmp_ln27_reg_2469_pp0_iter1_reg <= icmp_ln27_reg_2469;
        line_buff_group_0_va_5_reg_2731 <= sext_ln203_fu_1882_p1;
        line_buff_group_0_va_6_reg_2774 <= sext_ln140_fu_2002_p1;
        line_buff_group_0_va_7_reg_2779 <= sext_ln140_1_fu_2019_p1;
        line_buff_group_0_va_7_reg_2779_pp0_iter3_reg <= line_buff_group_0_va_7_reg_2779;
        line_buff_group_1_va_5_reg_2736 <= sext_ln203_fu_1882_p1;
        line_buff_group_1_va_6_reg_2794 <= sext_ln140_fu_2002_p1;
        line_buff_group_1_va_7_reg_2799 <= sext_ln140_1_fu_2019_p1;
        line_buff_group_1_va_7_reg_2799_pp0_iter3_reg <= line_buff_group_1_va_7_reg_2799;
        line_buff_group_2_va_5_reg_2741 <= sext_ln203_fu_1882_p1;
        line_buff_group_2_va_6_reg_2814 <= sext_ln140_fu_2002_p1;
        line_buff_group_2_va_7_reg_2819 <= sext_ln140_1_fu_2019_p1;
        line_buff_group_2_va_7_reg_2819_pp0_iter3_reg <= line_buff_group_2_va_7_reg_2819;
        line_buff_group_3_va_5_reg_2746 <= sext_ln203_fu_1882_p1;
        line_buff_group_3_va_6_reg_2834 <= sext_ln140_fu_2002_p1;
        line_buff_group_3_va_7_reg_2839 <= sext_ln140_1_fu_2019_p1;
        line_buff_group_3_va_7_reg_2839_pp0_iter3_reg <= line_buff_group_3_va_7_reg_2839;
        mul_ln44_reg_2457 <= mul_ln44_fu_1026_p2;
        mul_ln45_reg_2463 <= mul_ln45_fu_1040_p2;
        select_ln1598_33_reg_2700_pp0_iter2_reg <= select_ln1598_33_reg_2700;
        select_ln1598_33_reg_2700_pp0_iter3_reg <= select_ln1598_33_reg_2700_pp0_iter2_reg;
        select_ln1598_33_reg_2700_pp0_iter4_reg <= select_ln1598_33_reg_2700_pp0_iter3_reg;
        select_ln1598_36_reg_2704_pp0_iter2_reg <= select_ln1598_36_reg_2704;
        sext_ln203_reg_2723 <= sext_ln203_fu_1882_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_892_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        bound4_reg_2359 <= bound4_fu_917_p2;
        bound_reg_2353 <= bound_fu_904_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        bound84_reg_2366 <= bound84_fu_929_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln27_reg_2469 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        col_stride_reg_2648 <= col_stride_fu_1500_p2;
        mul_ln203_reg_2660[12 : 1] <= mul_ln203_fu_1530_p2[12 : 1];
        mul_ln45_1_reg_2619 <= mul_ln45_1_fu_1467_p2;
        or_ln1598_1_reg_2573 <= or_ln1598_1_fu_1336_p2;
        row_stride_reg_2568 <= row_stride_fu_1330_p2;
        select_ln1598_12_reg_2581 <= select_ln1598_12_fu_1368_p3;
        select_ln1598_13_reg_2587 <= select_ln1598_13_fu_1386_p3;
        select_ln1598_14_reg_2593 <= select_ln1598_14_fu_1398_p3;
        select_ln1598_18_reg_2599 <= select_ln1598_18_fu_1416_p3;
        select_ln1598_21_reg_2604 <= select_ln1598_21_fu_1429_p3;
        select_ln1598_22_reg_2614 <= select_ln1598_22_fu_1451_p3;
        select_ln1598_24_reg_2628 <= select_ln1598_24_fu_1477_p3;
        select_ln1598_29_reg_2633 <= select_ln1598_29_fu_1485_p3;
        select_ln1598_30_reg_2655 <= select_ln1598_30_fu_1518_p3;
        select_ln1598_reg_2558 <= select_ln1598_fu_1249_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln27_fu_1045_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln30_reg_2478 <= icmp_ln30_fu_1056_p2;
        icmp_ln36_1_reg_2513 <= icmp_ln36_1_fu_1092_p2;
        icmp_ln39_1_reg_2508 <= icmp_ln39_1_fu_1087_p2;
        mul_ln44_1_reg_2496 <= mul_ln44_1_fu_1069_p2;
        out_row_reg_2473 <= out_row_fu_1050_p2;
        select_ln1598_10_reg_2518 <= select_ln1598_10_fu_1102_p3;
        select_ln1598_2_reg_2503 <= select_ln1598_2_fu_1079_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_0_load_A == 1'b1)) begin
        inStream_V_data_0_payload_A <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_0_load_B == 1'b1)) begin
        inStream_V_data_0_payload_B <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_A == 1'b1)) begin
        inStream_V_dest_V_0_payload_A <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_B == 1'b1)) begin
        inStream_V_dest_V_0_payload_B <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_id_V_0_load_A == 1'b1)) begin
        inStream_V_id_V_0_payload_A <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_id_V_0_load_B == 1'b1)) begin
        inStream_V_id_V_0_payload_B <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_A == 1'b1)) begin
        inStream_V_keep_V_0_payload_A <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_B == 1'b1)) begin
        inStream_V_keep_V_0_payload_B <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_A == 1'b1)) begin
        inStream_V_strb_V_0_payload_A <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_B == 1'b1)) begin
        inStream_V_strb_V_0_payload_B <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_A == 1'b1)) begin
        inStream_V_user_V_0_payload_A <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_B == 1'b1)) begin
        inStream_V_user_V_0_payload_B <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln27_reg_2469 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_ch_idx_reg_2671 <= input_ch_idx_fu_1536_p2;
        select_ln27_reg_2563 <= select_ln27_fu_1324_p3;
        select_ln30_1_reg_2686 <= select_ln30_1_fu_1576_p3;
        select_ln33_1_reg_2681 <= select_ln33_1_fu_1562_p3;
        select_ln33_reg_2643 <= select_ln33_fu_1492_p3;
        select_ln36_1_reg_2676 <= select_ln36_1_fu_1548_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        input_fold_ch_V_read_reg_2240 <= input_fold_ch_V;
        input_h_V_read_reg_2254 <= input_h_V;
        input_w_V_read_reg_2248 <= input_w_V;
        output_h_V_read_reg_2265 <= output_h_V;
        output_w_V_read_reg_2259 <= output_w_V;
        stride_V_read_reg_2232 <= stride_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_1_load_A == 1'b1)) begin
        outStream_V_data_1_payload_A <= call_ln112_write_output_fu_778_outStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_1_load_B == 1'b1)) begin
        outStream_V_data_1_payload_B <= call_ln112_write_output_fu_778_outStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_A == 1'b1)) begin
        outStream_V_dest_V_1_payload_A <= call_ln112_write_output_fu_778_outStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_B == 1'b1)) begin
        outStream_V_dest_V_1_payload_B <= call_ln112_write_output_fu_778_outStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_A == 1'b1)) begin
        outStream_V_id_V_1_payload_A <= call_ln112_write_output_fu_778_outStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_B == 1'b1)) begin
        outStream_V_id_V_1_payload_B <= call_ln112_write_output_fu_778_outStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_A == 1'b1)) begin
        outStream_V_keep_V_1_payload_A <= call_ln112_write_output_fu_778_outStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_B == 1'b1)) begin
        outStream_V_keep_V_1_payload_B <= call_ln112_write_output_fu_778_outStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_A == 1'b1)) begin
        outStream_V_last_V_1_payload_A <= call_ln112_write_output_fu_778_outStream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_B == 1'b1)) begin
        outStream_V_last_V_1_payload_B <= call_ln112_write_output_fu_778_outStream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_A == 1'b1)) begin
        outStream_V_strb_V_1_payload_A <= call_ln112_write_output_fu_778_outStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_B == 1'b1)) begin
        outStream_V_strb_V_1_payload_B <= call_ln112_write_output_fu_778_outStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_A == 1'b1)) begin
        outStream_V_user_V_1_payload_A <= call_ln112_write_output_fu_778_outStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_B == 1'b1)) begin
        outStream_V_user_V_1_payload_B <= call_ln112_write_output_fu_778_outStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln27_reg_2469 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln1598_32_reg_2696 <= select_ln1598_32_fu_1787_p3;
        select_ln1598_33_reg_2700 <= select_ln1598_33_fu_1816_p3;
        select_ln1598_36_reg_2704 <= select_ln1598_36_fu_1848_p3;
        select_ln1598_37_reg_2713 <= select_ln1598_37_fu_1865_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln27_reg_2469 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        select_ln30_reg_2691 <= select_ln30_fu_1610_p3;
        select_ln36_reg_2718 <= select_ln36_fu_1872_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (select_ln1598_32_reg_2696 == 1'd0) & (icmp_ln27_reg_2469_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_dest_V_fu_214 <= inStream_V_dest_V_0_data_out;
        tmp_id_V_fu_210 <= inStream_V_id_V_0_data_out;
        tmp_keep_V_fu_198 <= inStream_V_keep_V_0_data_out;
        tmp_strb_V_fu_202 <= inStream_V_strb_V_0_data_out;
        tmp_user_V_fu_206 <= inStream_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (select_ln1598_33_reg_2700_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_dest_V_load_reg_2864 <= tmp_dest_V_fu_214;
        tmp_id_V_load_reg_2859 <= tmp_id_V_fu_210;
        tmp_keep_V_load_reg_2844 <= tmp_keep_V_fu_198;
        tmp_strb_V_load_reg_2849 <= tmp_strb_V_fu_202;
        tmp_user_V_load_reg_2854 <= tmp_user_V_fu_206;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (select_ln1598_33_reg_2700_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        window_0_val_0_V_1_reg_2869 <= line_buff_group_0_va_q1;
        window_1_val_0_V_1_reg_2874 <= line_buff_group_1_va_q1;
        window_2_val_0_V_1_reg_2879 <= line_buff_group_2_va_q1;
        window_3_val_0_V_1_reg_2884 <= line_buff_group_3_va_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (select_ln1598_33_reg_2700_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        window_0_val_1_V_0_reg_2909 <= line_buff_group_0_va_1_q1;
        window_1_val_1_V_0_reg_2915 <= line_buff_group_1_va_1_q1;
        window_2_val_1_V_0_reg_2921 <= line_buff_group_2_va_1_q1;
        window_3_val_1_V_0_reg_2927 <= line_buff_group_3_va_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln1598_33_reg_2700_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        window_0_val_1_V_1_reg_2953 <= line_buff_group_0_va_1_q1;
        window_1_val_1_V_1_reg_2959 <= line_buff_group_1_va_1_q1;
        window_2_val_1_V_1_reg_2965 <= line_buff_group_2_va_1_q1;
        window_3_val_1_V_1_reg_2971 <= line_buff_group_3_va_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln27_reg_2469_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln1598_9_reg_2756[10 : 0] <= zext_ln1598_9_fu_1995_p1[10 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln27_reg_2469 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | (outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state18))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (icmp_ln27_reg_2469_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_i_op_assign_1_phi_fu_712_p4 = select_ln30_reg_2691;
    end else begin
        ap_phi_mux_i_op_assign_1_phi_fu_712_p4 = i_op_assign_1_reg_708;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_2469 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_op_assign_2_phi_fu_676_p4 = select_ln33_reg_2643;
    end else begin
        ap_phi_mux_i_op_assign_2_phi_fu_676_p4 = i_op_assign_2_reg_672;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (icmp_ln27_reg_2469_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_i_op_assign_3_phi_fu_723_p4 = select_ln36_reg_2718;
    end else begin
        ap_phi_mux_i_op_assign_3_phi_fu_723_p4 = i_op_assign_3_reg_719;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_2469 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_op_assign_4_phi_fu_700_p4 = input_ch_idx_reg_2671;
    end else begin
        ap_phi_mux_i_op_assign_4_phi_fu_700_p4 = i_op_assign_4_reg_696;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_2469 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_op_assign_phi_fu_640_p4 = select_ln27_reg_2563;
    end else begin
        ap_phi_mux_i_op_assign_phi_fu_640_p4 = i_op_assign_reg_636;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_2469 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten180_phi_fu_652_p4 = select_ln30_1_reg_2686;
    end else begin
        ap_phi_mux_indvar_flatten180_phi_fu_652_p4 = indvar_flatten180_reg_648;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_2469 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten308_phi_fu_628_p4 = add_ln27_reg_2553;
    end else begin
        ap_phi_mux_indvar_flatten308_phi_fu_628_p4 = indvar_flatten308_reg_624;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_2469 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten79_phi_fu_664_p4 = select_ln33_1_reg_2681;
    end else begin
        ap_phi_mux_indvar_flatten79_phi_fu_664_p4 = indvar_flatten79_reg_660;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_2469 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_688_p4 = select_ln36_1_reg_2676;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_688_p4 = indvar_flatten_reg_684;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (select_ln1598_32_reg_2696 == 1'd0) & (icmp_ln27_reg_2469_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_p_011_phi_fu_734_p4 = {{inStream_V_data_0_data_out[63:48]}};
    end else begin
        ap_phi_mux_p_011_phi_fu_734_p4 = ap_phi_reg_pp0_iter1_p_011_reg_730;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (select_ln1598_32_reg_2696 == 1'd0) & (icmp_ln27_reg_2469_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_p_012_phi_fu_746_p4 = {{inStream_V_data_0_data_out[47:32]}};
    end else begin
        ap_phi_mux_p_012_phi_fu_746_p4 = ap_phi_reg_pp0_iter1_p_012_reg_742;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (select_ln1598_32_reg_2696 == 1'd0) & (icmp_ln27_reg_2469_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_p_013_phi_fu_758_p4 = {{inStream_V_data_0_data_out[31:16]}};
    end else begin
        ap_phi_mux_p_013_phi_fu_758_p4 = ap_phi_reg_pp0_iter1_p_013_reg_754;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (select_ln1598_32_reg_2696 == 1'd0) & (icmp_ln27_reg_2469_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_p_0_phi_fu_770_p4 = curr_input_data_sub_s_fu_1932_p1;
    end else begin
        ap_phi_mux_p_0_phi_fu_770_p4 = ap_phi_reg_pp0_iter1_p_0_reg_766;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | (outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state18))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_ignoreCallOp461))) begin
        call_ln112_write_output_fu_778_ap_ce = 1'b1;
    end else begin
        call_ln112_write_output_fu_778_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (select_ln1598_32_reg_2696 == 1'd0) & (icmp_ln27_reg_2469_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        inStream_TDATA_blk_n = inStream_V_data_0_state[1'd0];
    end else begin
        inStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op320_read_state11 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        inStream_V_data_0_ack_out = 1'b1;
    end else begin
        inStream_V_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_data_0_sel == 1'b1)) begin
        inStream_V_data_0_data_out = inStream_V_data_0_payload_B;
    end else begin
        inStream_V_data_0_data_out = inStream_V_data_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op320_read_state11 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        inStream_V_dest_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_dest_V_0_sel == 1'b1)) begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_B;
    end else begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op320_read_state11 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        inStream_V_id_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_id_V_0_sel == 1'b1)) begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_B;
    end else begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op320_read_state11 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        inStream_V_keep_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_keep_V_0_sel == 1'b1)) begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_B;
    end else begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op320_read_state11 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        inStream_V_strb_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_strb_V_0_sel == 1'b1)) begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_B;
    end else begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op320_read_state11 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        inStream_V_user_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_user_V_0_sel == 1'b1)) begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_B;
    end else begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            line_buff_group_0_va_1_address0 = line_buff_group_0_va_5_reg_2731;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            line_buff_group_0_va_1_address0 = sext_ln203_fu_1882_p1;
        end else begin
            line_buff_group_0_va_1_address0 = 'bx;
        end
    end else begin
        line_buff_group_0_va_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            line_buff_group_0_va_1_address1 = line_buff_group_0_va_7_reg_2779_pp0_iter3_reg;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            line_buff_group_0_va_1_address1 = line_buff_group_0_va_6_reg_2774;
        end else begin
            line_buff_group_0_va_1_address1 = 'bx;
        end
    end else begin
        line_buff_group_0_va_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        line_buff_group_0_va_1_ce0 = 1'b1;
    end else begin
        line_buff_group_0_va_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        line_buff_group_0_va_1_ce1 = 1'b1;
    end else begin
        line_buff_group_0_va_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buff_group_0_va_1_we0 = 1'b1;
    end else begin
        line_buff_group_0_va_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        line_buff_group_0_va_address0 = sext_ln140_fu_2002_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buff_group_0_va_address0 = sext_ln203_reg_2723;
    end else begin
        line_buff_group_0_va_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        line_buff_group_0_va_address1 = sext_ln140_2_fu_2110_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        line_buff_group_0_va_address1 = sext_ln140_1_fu_2019_p1;
    end else begin
        line_buff_group_0_va_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        line_buff_group_0_va_ce0 = 1'b1;
    end else begin
        line_buff_group_0_va_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        line_buff_group_0_va_ce1 = 1'b1;
    end else begin
        line_buff_group_0_va_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buff_group_0_va_we0 = 1'b1;
    end else begin
        line_buff_group_0_va_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            line_buff_group_1_va_1_address0 = line_buff_group_1_va_5_reg_2736;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            line_buff_group_1_va_1_address0 = sext_ln203_fu_1882_p1;
        end else begin
            line_buff_group_1_va_1_address0 = 'bx;
        end
    end else begin
        line_buff_group_1_va_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            line_buff_group_1_va_1_address1 = line_buff_group_1_va_7_reg_2799_pp0_iter3_reg;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            line_buff_group_1_va_1_address1 = line_buff_group_1_va_6_reg_2794;
        end else begin
            line_buff_group_1_va_1_address1 = 'bx;
        end
    end else begin
        line_buff_group_1_va_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        line_buff_group_1_va_1_ce0 = 1'b1;
    end else begin
        line_buff_group_1_va_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        line_buff_group_1_va_1_ce1 = 1'b1;
    end else begin
        line_buff_group_1_va_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buff_group_1_va_1_we0 = 1'b1;
    end else begin
        line_buff_group_1_va_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        line_buff_group_1_va_address0 = sext_ln140_fu_2002_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buff_group_1_va_address0 = sext_ln203_reg_2723;
    end else begin
        line_buff_group_1_va_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        line_buff_group_1_va_address1 = sext_ln140_3_fu_2114_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        line_buff_group_1_va_address1 = sext_ln140_1_fu_2019_p1;
    end else begin
        line_buff_group_1_va_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        line_buff_group_1_va_ce0 = 1'b1;
    end else begin
        line_buff_group_1_va_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        line_buff_group_1_va_ce1 = 1'b1;
    end else begin
        line_buff_group_1_va_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buff_group_1_va_we0 = 1'b1;
    end else begin
        line_buff_group_1_va_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            line_buff_group_2_va_1_address0 = line_buff_group_2_va_5_reg_2741;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            line_buff_group_2_va_1_address0 = sext_ln203_fu_1882_p1;
        end else begin
            line_buff_group_2_va_1_address0 = 'bx;
        end
    end else begin
        line_buff_group_2_va_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            line_buff_group_2_va_1_address1 = line_buff_group_2_va_7_reg_2819_pp0_iter3_reg;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            line_buff_group_2_va_1_address1 = line_buff_group_2_va_6_reg_2814;
        end else begin
            line_buff_group_2_va_1_address1 = 'bx;
        end
    end else begin
        line_buff_group_2_va_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        line_buff_group_2_va_1_ce0 = 1'b1;
    end else begin
        line_buff_group_2_va_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        line_buff_group_2_va_1_ce1 = 1'b1;
    end else begin
        line_buff_group_2_va_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buff_group_2_va_1_we0 = 1'b1;
    end else begin
        line_buff_group_2_va_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        line_buff_group_2_va_address0 = sext_ln140_fu_2002_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buff_group_2_va_address0 = sext_ln203_reg_2723;
    end else begin
        line_buff_group_2_va_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        line_buff_group_2_va_address1 = sext_ln140_4_fu_2118_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        line_buff_group_2_va_address1 = sext_ln140_1_fu_2019_p1;
    end else begin
        line_buff_group_2_va_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        line_buff_group_2_va_ce0 = 1'b1;
    end else begin
        line_buff_group_2_va_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        line_buff_group_2_va_ce1 = 1'b1;
    end else begin
        line_buff_group_2_va_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buff_group_2_va_we0 = 1'b1;
    end else begin
        line_buff_group_2_va_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            line_buff_group_3_va_1_address0 = line_buff_group_3_va_5_reg_2746;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            line_buff_group_3_va_1_address0 = sext_ln203_fu_1882_p1;
        end else begin
            line_buff_group_3_va_1_address0 = 'bx;
        end
    end else begin
        line_buff_group_3_va_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            line_buff_group_3_va_1_address1 = line_buff_group_3_va_7_reg_2839_pp0_iter3_reg;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            line_buff_group_3_va_1_address1 = line_buff_group_3_va_6_reg_2834;
        end else begin
            line_buff_group_3_va_1_address1 = 'bx;
        end
    end else begin
        line_buff_group_3_va_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        line_buff_group_3_va_1_ce0 = 1'b1;
    end else begin
        line_buff_group_3_va_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        line_buff_group_3_va_1_ce1 = 1'b1;
    end else begin
        line_buff_group_3_va_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buff_group_3_va_1_we0 = 1'b1;
    end else begin
        line_buff_group_3_va_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        line_buff_group_3_va_address0 = sext_ln140_fu_2002_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buff_group_3_va_address0 = sext_ln203_reg_2723;
    end else begin
        line_buff_group_3_va_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        line_buff_group_3_va_address1 = sext_ln140_5_fu_2122_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        line_buff_group_3_va_address1 = sext_ln140_1_fu_2019_p1;
    end else begin
        line_buff_group_3_va_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        line_buff_group_3_va_ce0 = 1'b1;
    end else begin
        line_buff_group_3_va_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        line_buff_group_3_va_ce1 = 1'b1;
    end else begin
        line_buff_group_3_va_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buff_group_3_va_we0 = 1'b1;
    end else begin
        line_buff_group_3_va_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (select_ln1598_33_reg_2700_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        outStream_TDATA_blk_n = call_ln112_write_output_fu_778_outStream_TDATA_blk_n;
    end else begin
        outStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((outStream_V_data_1_sel == 1'b1)) begin
        outStream_V_data_1_data_out = outStream_V_data_1_payload_B;
    end else begin
        outStream_V_data_1_data_out = outStream_V_data_1_payload_A;
    end
end

always @ (*) begin
    if ((outStream_V_dest_V_1_sel == 1'b1)) begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_B;
    end else begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((outStream_V_id_V_1_sel == 1'b1)) begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_B;
    end else begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((outStream_V_keep_V_1_sel == 1'b1)) begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_B;
    end else begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((outStream_V_last_V_1_sel == 1'b1)) begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_B;
    end else begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((outStream_V_strb_V_1_sel == 1'b1)) begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_B;
    end else begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((outStream_V_user_V_1_sel == 1'b1)) begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_B;
    end else begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln19_fu_838_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln20_fu_856_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln21_fu_874_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln22_fu_892_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln27_reg_2469 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln27_reg_2469 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state18 : begin
            if ((~((outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | (outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1354_2_fu_965_p2 = ($signed(zext_ln1354_2_fu_962_p1) + $signed(10'd1023));

assign add_ln1354_fu_947_p2 = ($signed(zext_ln1354_fu_944_p1) + $signed(3'd7));

assign add_ln140_1_fu_2014_p2 = (mul_ln203_reg_2660_pp0_iter1_reg + zext_ln1598_9_fu_1995_p1);

assign add_ln140_2_fu_2057_p2 = (mul_ln203_reg_2660_pp0_iter2_reg + select_ln156_fu_2051_p3);

assign add_ln140_3_fu_2073_p2 = (mul_ln203_reg_2660_pp0_iter2_reg + select_ln156_3_fu_2067_p3);

assign add_ln140_4_fu_2089_p2 = (mul_ln203_reg_2660_pp0_iter2_reg + select_ln156_6_fu_2083_p3);

assign add_ln140_5_fu_2105_p2 = (mul_ln203_reg_2660_pp0_iter2_reg + select_ln156_9_fu_2099_p3);

assign add_ln140_fu_1998_p2 = (mul_ln203_reg_2660_pp0_iter1_reg + select_ln1598_36_reg_2704);

assign add_ln1598_1_fu_1859_p2 = (11'd1 + trunc_ln140_2_fu_1855_p1);

assign add_ln1598_fu_1709_p2 = (11'd1 + trunc_ln140_1_fu_1705_p1);

assign add_ln19_fu_826_p2 = (phi_ln19_reg_536 + 3'd1);

assign add_ln203_fu_1877_p2 = (mul_ln203_reg_2660 + zext_ln1598_8_fu_1767_p1);

assign add_ln20_fu_844_p2 = (phi_ln20_reg_558 + 3'd1);

assign add_ln21_fu_862_p2 = (phi_ln21_reg_580 + 3'd1);

assign add_ln22_fu_880_p2 = (phi_ln22_reg_602 + 3'd1);

assign add_ln27_fu_1243_p2 = (26'd1 + indvar_flatten308_reg_624);

assign add_ln30_1_fu_1570_p2 = (indvar_flatten180_reg_648 + 17'd1);

assign add_ln33_1_fu_1556_p2 = (indvar_flatten79_reg_660 + 15'd1);

assign add_ln36_1_fu_1542_p2 = (indvar_flatten_reg_684 + 6'd1);

assign add_ln36_fu_1237_p2 = (11'd1 + trunc_ln140_fu_1233_p1);

assign add_ln44_1_fu_1356_p2 = (zext_ln1598_5_fu_1348_p1 + select_ln1598_1_fu_1256_p3);

assign add_ln45_1_fu_1725_p2 = (zext_ln1598_7_fu_1722_p1 + select_ln1598_23_fu_1615_p3);

assign add_ln49_1_fu_1634_p2 = ($signed(12'd4095) + $signed(zext_ln45_3_fu_1621_p1));

assign add_ln49_2_fu_1746_p2 = ($signed(12'd4095) + $signed(zext_ln45_4_fu_1731_p1));

assign add_ln627_1_fu_850_p2 = (phi_mul311_reg_569 + 12'd418);

assign add_ln627_2_fu_868_p2 = (phi_mul313_reg_591 + 12'd418);

assign add_ln627_3_fu_886_p2 = (phi_mul315_reg_613 + 12'd418);

assign add_ln627_fu_832_p2 = (phi_mul_reg_547 + 12'd418);

assign and_ln48_1_fu_1629_p2 = (select_ln1598_12_reg_2581 & icmp_ln48_4_fu_1624_p2);

assign and_ln48_2_fu_1741_p2 = (select_ln1598_12_reg_2581 & icmp_ln48_5_fu_1735_p2);

assign and_ln48_fu_1172_p2 = (icmp_ln48_fu_1122_p2 & icmp_ln48_1_fu_1166_p2);

assign and_ln879_1_fu_1903_p2 = (select_ln1598_24_reg_2628 & and_ln879_fu_1898_p2);

assign and_ln879_fu_1898_p2 = (select_ln1598_2_reg_2503 & icmp_ln879_fu_1893_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((select_ln1598_33_reg_2700_pp0_iter4_reg == 1'd0) & (call_ln112_write_output_fu_778_outStream_TDATA_blk_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((inStream_V_data_0_vld_out == 1'b0) & (ap_predicate_op320_read_state11 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001_ignoreCallOp461 = ((inStream_V_data_0_vld_out == 1'b0) & (ap_predicate_op320_read_state11 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((select_ln1598_33_reg_2700_pp0_iter4_reg == 1'd0) & (call_ln112_write_output_fu_778_outStream_TDATA_blk_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((inStream_V_data_0_vld_out == 1'b0) & (ap_predicate_op320_read_state11 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage1_iter1 = ((inStream_V_data_0_vld_out == 1'b0) & (ap_predicate_op320_read_state11 == 1'b1));
end

always @ (*) begin
    ap_block_state11_pp0_stage1_iter1_ignore_call65 = ((inStream_V_data_0_vld_out == 1'b0) & (ap_predicate_op320_read_state11 == 1'b1));
end

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter2_ignore_call65 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter3_ignore_call65 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_pp0_stage1_iter4 = ((select_ln1598_33_reg_2700_pp0_iter4_reg == 1'd0) & (call_ln112_write_output_fu_778_outStream_TDATA_blk_n == 1'b0));
end

assign ap_block_state17_pp0_stage1_iter4_ignore_call65 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18 = ((outStream_V_dest_V_1_state == 2'd1) | (outStream_V_id_V_1_state == 2'd1) | (outStream_V_last_V_1_state == 2'd1) | (outStream_V_user_V_1_state == 2'd1) | (outStream_V_strb_V_1_state == 2'd1) | (outStream_V_keep_V_1_state == 2'd1) | (outStream_V_data_1_state == 2'd1) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_TREADY == 1'b0)) | ((outStream_V_data_1_state == 2'd3) & (outStream_TREADY == 1'b0)));
end

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter0_ignore_call65 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_011_reg_730 = 'bx;

assign ap_phi_reg_pp0_iter0_p_012_reg_742 = 'bx;

assign ap_phi_reg_pp0_iter0_p_013_reg_754 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_reg_766 = 'bx;

always @ (*) begin
    ap_predicate_op320_read_state11 = ((select_ln1598_32_reg_2696 == 1'd0) & (icmp_ln27_reg_2469_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bound185_fu_2226_p0 = bound185_fu_2226_p00;

assign bound185_fu_2226_p00 = output_h_V_read_reg_2265;

assign bound185_fu_2226_p1 = bound185_fu_2226_p10;

assign bound185_fu_2226_p10 = bound84_reg_2366;

assign bound4_fu_917_p0 = bound4_fu_917_p00;

assign bound4_fu_917_p00 = output_w_V_read_reg_2259;

assign bound4_fu_917_p1 = bound4_fu_917_p10;

assign bound4_fu_917_p10 = bound_fu_904_p2;

assign bound4_fu_917_p2 = (bound4_fu_917_p0 * bound4_fu_917_p1);

assign bound84_fu_929_p0 = bound84_fu_929_p00;

assign bound84_fu_929_p00 = stride_V_read_reg_2232;

assign bound84_fu_929_p1 = bound84_fu_929_p10;

assign bound84_fu_929_p10 = bound4_reg_2359;

assign bound84_fu_929_p2 = (bound84_fu_929_p0 * bound84_fu_929_p1);

assign bound_fu_904_p0 = bound_fu_904_p00;

assign bound_fu_904_p00 = stride_V_read_reg_2232;

assign bound_fu_904_p1 = bound_fu_904_p10;

assign bound_fu_904_p10 = input_fold_ch_V_read_reg_2240;

assign bound_fu_904_p2 = (bound_fu_904_p0 * bound_fu_904_p1);

assign call_ln112_write_output_fu_778_ap_start = call_ln112_write_output_fu_778_ap_start_reg;

assign call_ln112_write_output_fu_778_outStream_TREADY = ((outStream_V_dest_V_1_ack_in & ap_CS_fsm_pp0_stage1) | (outStream_V_id_V_1_ack_in & ap_CS_fsm_pp0_stage1) | (outStream_V_last_V_1_ack_in & ap_CS_fsm_pp0_stage1) | (outStream_V_user_V_1_ack_in & ap_CS_fsm_pp0_stage1) | (outStream_V_strb_V_1_ack_in & ap_CS_fsm_pp0_stage1) | (outStream_V_keep_V_1_ack_in & ap_CS_fsm_pp0_stage1) | (outStream_V_data_1_ack_in & ap_CS_fsm_pp0_stage1));

assign call_ln112_write_output_fu_778_val_output_0_V = ((icmp_ln1494_2_fu_2138_p2[0:0] === 1'b1) ? window_0_val_1_V_1_reg_2953 : select_ln156_1_fu_2131_p3);

assign call_ln112_write_output_fu_778_val_output_1_V = ((icmp_ln1494_5_fu_2163_p2[0:0] === 1'b1) ? window_1_val_1_V_1_reg_2959 : select_ln156_4_fu_2156_p3);

assign call_ln112_write_output_fu_778_val_output_2_V = ((icmp_ln1494_8_fu_2188_p2[0:0] === 1'b1) ? window_2_val_1_V_1_reg_2965 : select_ln156_7_fu_2181_p3);

assign call_ln112_write_output_fu_778_val_output_3_V = ((icmp_ln1494_11_fu_2213_p2[0:0] === 1'b1) ? window_3_val_1_V_1_reg_2971 : select_ln156_10_fu_2206_p3);

assign col_idx_fu_1157_p2 = (zext_ln1598_3_fu_1153_p1 + mul_ln45_reg_2463);

assign col_stride_fu_1500_p2 = (2'd1 + select_ln1598_22_fu_1451_p3);

assign conv_count_1_fu_1184_p3 = ((and_ln48_fu_1172_p2[0:0] === 1'b1) ? conv_count_fu_1178_p2 : 12'd0);

assign conv_count_fu_1178_p2 = ($signed(12'd4095) + $signed(zext_ln45_1_fu_1162_p1));

assign curr_input_data_sub_s_fu_1932_p1 = inStream_V_data_0_data_out[15:0];

assign icmp_ln101_1_fu_1148_p2 = ((zext_ln45_fu_1144_p1 == add_ln1354_2_reg_2406) ? 1'b1 : 1'b0);

assign icmp_ln101_2_fu_992_p2 = ((add_ln1354_2_fu_965_p2 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln101_3_fu_1074_p2 = ((zext_ln44_2_fu_1065_p1 == ret_V_reg_2400) ? 1'b1 : 1'b0);

assign icmp_ln101_4_fu_1472_p2 = ((zext_ln45_2_fu_1463_p1 == add_ln1354_2_reg_2406) ? 1'b1 : 1'b0);

assign icmp_ln101_fu_1031_p2 = ((zext_ln44_fu_1022_p1 == ret_V_reg_2400) ? 1'b1 : 1'b0);

assign icmp_ln1494_10_fu_2201_p2 = (($signed(reg_821) < $signed(window_3_val_1_V_0_reg_2927)) ? 1'b1 : 1'b0);

assign icmp_ln1494_11_fu_2213_p2 = (($signed(select_ln156_10_fu_2206_p3) < $signed(window_3_val_1_V_1_reg_2971)) ? 1'b1 : 1'b0);

assign icmp_ln1494_1_fu_2126_p2 = (($signed(reg_806) < $signed(window_0_val_1_V_0_reg_2909)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_2138_p2 = (($signed(select_ln156_1_fu_2131_p3) < $signed(window_0_val_1_V_1_reg_2953)) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_2062_p2 = (($signed(window_1_val_0_V_1_reg_2874) > $signed(reg_811)) ? 1'b1 : 1'b0);

assign icmp_ln1494_4_fu_2151_p2 = (($signed(reg_811) < $signed(window_1_val_1_V_0_reg_2915)) ? 1'b1 : 1'b0);

assign icmp_ln1494_5_fu_2163_p2 = (($signed(select_ln156_4_fu_2156_p3) < $signed(window_1_val_1_V_1_reg_2959)) ? 1'b1 : 1'b0);

assign icmp_ln1494_6_fu_2078_p2 = (($signed(window_2_val_0_V_1_reg_2879) > $signed(reg_816)) ? 1'b1 : 1'b0);

assign icmp_ln1494_7_fu_2176_p2 = (($signed(reg_816) < $signed(window_2_val_1_V_0_reg_2921)) ? 1'b1 : 1'b0);

assign icmp_ln1494_8_fu_2188_p2 = (($signed(select_ln156_7_fu_2181_p3) < $signed(window_2_val_1_V_1_reg_2965)) ? 1'b1 : 1'b0);

assign icmp_ln1494_9_fu_2094_p2 = (($signed(window_3_val_0_V_1_reg_2884) > $signed(reg_821)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_2046_p2 = (($signed(window_0_val_0_V_1_reg_2869) > $signed(reg_806)) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_838_p2 = ((phi_ln19_reg_536 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_856_p2 = ((phi_ln20_reg_558 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_874_p2 = ((phi_ln21_reg_580 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_892_p2 = ((phi_ln22_reg_602 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_1045_p2 = ((ap_phi_mux_indvar_flatten308_phi_fu_628_p4 == bound185_reg_2417) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_1056_p2 = ((ap_phi_mux_indvar_flatten180_phi_fu_652_p4 == bound84_reg_2366) ? 1'b1 : 1'b0);

assign icmp_ln33_1_fu_1097_p2 = ((ap_phi_mux_indvar_flatten79_phi_fu_664_p4 == bound4_reg_2359) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_1013_p2 = ((bound4_reg_2359 == 15'd0) ? 1'b1 : 1'b0);

assign icmp_ln36_1_fu_1092_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_688_p4 == bound_reg_2353) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_1008_p2 = ((bound_reg_2353 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln39_1_fu_1087_p2 = ((ap_phi_mux_i_op_assign_4_phi_fu_700_p4 == input_fold_ch_V_read_reg_2240) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_1003_p2 = ((input_fold_ch_V_read_reg_2240 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln48_1_fu_1166_p2 = ((col_idx_fu_1157_p2 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln48_2_fu_1261_p2 = ((mul_ln44_1_reg_2496 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln48_3_fu_1362_p2 = ((add_ln44_1_fu_1356_p2 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln48_4_fu_1624_p2 = ((mul_ln45_1_reg_2619 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln48_5_fu_1735_p2 = ((add_ln45_1_fu_1725_p2 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_1122_p2 = ((row_idx_fu_1117_p2 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln55_1_fu_1128_p2 = ((row_idx_fu_1117_p2 < zext_ln215_reg_2380) ? 1'b1 : 1'b0);

assign icmp_ln55_2_fu_1192_p2 = ((col_idx_fu_1157_p2 < zext_ln1354_4_reg_2387) ? 1'b1 : 1'b0);

assign icmp_ln55_3_fu_1273_p2 = ((mul_ln44_1_reg_2496 < zext_ln215_reg_2380) ? 1'b1 : 1'b0);

assign icmp_ln55_4_fu_1375_p2 = ((add_ln44_1_fu_1356_p2 < zext_ln215_reg_2380) ? 1'b1 : 1'b0);

assign icmp_ln55_5_fu_1654_p2 = ((mul_ln45_1_reg_2619 < zext_ln1354_4_reg_2387) ? 1'b1 : 1'b0);

assign icmp_ln55_6_fu_1771_p2 = ((add_ln45_1_fu_1725_p2 < zext_ln1354_4_reg_2387) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_998_p2 = ((input_w_V_read_reg_2248 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln77_1_fu_1215_p2 = ((ap_phi_mux_i_op_assign_3_phi_fu_723_p4 != ap_phi_mux_i_op_assign_1_phi_fu_712_p4) ? 1'b1 : 1'b0);

assign icmp_ln77_2_fu_986_p2 = ((add_ln1354_fu_947_p2 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln77_3_fu_1393_p2 = ((zext_ln44_3_fu_1352_p1 != add_ln1354_reg_2394) ? 1'b1 : 1'b0);

assign icmp_ln77_4_fu_1681_p2 = ((select_ln30_fu_1610_p3 != 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln77_5_fu_1800_p2 = ((col_stride_reg_2648 != select_ln30_fu_1610_p3) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_1139_p2 = ((zext_ln44_1_fu_1113_p1 != add_ln1354_reg_2394) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_1893_p2 = ((zext_ln879_fu_1890_p1 == ret_V_1_reg_2412) ? 1'b1 : 1'b0);

assign inStream_TREADY = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_data_0_ack_in = inStream_V_data_0_state[1'd1];

assign inStream_V_data_0_load_A = (inStream_V_data_0_state_cmp_full & ~inStream_V_data_0_sel_wr);

assign inStream_V_data_0_load_B = (inStream_V_data_0_state_cmp_full & inStream_V_data_0_sel_wr);

assign inStream_V_data_0_sel = inStream_V_data_0_sel_rd;

assign inStream_V_data_0_state_cmp_full = ((inStream_V_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_data_0_vld_in = inStream_TVALID;

assign inStream_V_data_0_vld_out = inStream_V_data_0_state[1'd0];

assign inStream_V_dest_V_0_ack_in = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_dest_V_0_load_A = (inStream_V_dest_V_0_state_cmp_full & ~inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_load_B = (inStream_V_dest_V_0_state_cmp_full & inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_sel = inStream_V_dest_V_0_sel_rd;

assign inStream_V_dest_V_0_state_cmp_full = ((inStream_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_dest_V_0_vld_in = inStream_TVALID;

assign inStream_V_dest_V_0_vld_out = inStream_V_dest_V_0_state[1'd0];

assign inStream_V_id_V_0_ack_in = inStream_V_id_V_0_state[1'd1];

assign inStream_V_id_V_0_load_A = (inStream_V_id_V_0_state_cmp_full & ~inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_load_B = (inStream_V_id_V_0_state_cmp_full & inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_sel = inStream_V_id_V_0_sel_rd;

assign inStream_V_id_V_0_state_cmp_full = ((inStream_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_id_V_0_vld_in = inStream_TVALID;

assign inStream_V_id_V_0_vld_out = inStream_V_id_V_0_state[1'd0];

assign inStream_V_keep_V_0_ack_in = inStream_V_keep_V_0_state[1'd1];

assign inStream_V_keep_V_0_load_A = (inStream_V_keep_V_0_state_cmp_full & ~inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_load_B = (inStream_V_keep_V_0_state_cmp_full & inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_sel = inStream_V_keep_V_0_sel_rd;

assign inStream_V_keep_V_0_state_cmp_full = ((inStream_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_keep_V_0_vld_in = inStream_TVALID;

assign inStream_V_keep_V_0_vld_out = inStream_V_keep_V_0_state[1'd0];

assign inStream_V_strb_V_0_ack_in = inStream_V_strb_V_0_state[1'd1];

assign inStream_V_strb_V_0_load_A = (inStream_V_strb_V_0_state_cmp_full & ~inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_load_B = (inStream_V_strb_V_0_state_cmp_full & inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_sel = inStream_V_strb_V_0_sel_rd;

assign inStream_V_strb_V_0_state_cmp_full = ((inStream_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_strb_V_0_vld_in = inStream_TVALID;

assign inStream_V_strb_V_0_vld_out = inStream_V_strb_V_0_state[1'd0];

assign inStream_V_user_V_0_ack_in = inStream_V_user_V_0_state[1'd1];

assign inStream_V_user_V_0_load_A = (inStream_V_user_V_0_state_cmp_full & ~inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_load_B = (inStream_V_user_V_0_state_cmp_full & inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_sel = inStream_V_user_V_0_sel_rd;

assign inStream_V_user_V_0_state_cmp_full = ((inStream_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_user_V_0_vld_in = inStream_TVALID;

assign inStream_V_user_V_0_vld_out = inStream_V_user_V_0_state[1'd0];

assign input_ch_idx_fu_1536_p2 = (select_ln1598_30_fu_1518_p3 + 4'd1);

assign mul_ln203_fu_1530_p0 = mul_ln203_fu_1530_p00;

assign mul_ln203_fu_1530_p00 = select_ln1598_30_fu_1518_p3;

assign mul_ln203_fu_1530_p2 = (mul_ln203_fu_1530_p0 * $signed('h1A2));

assign mul_ln44_1_fu_1069_p0 = p_cast60_reg_2372;

assign mul_ln44_1_fu_1069_p1 = mul_ln44_1_fu_1069_p10;

assign mul_ln44_1_fu_1069_p10 = out_row_fu_1050_p2;

assign mul_ln44_1_fu_1069_p2 = (mul_ln44_1_fu_1069_p0 * mul_ln44_1_fu_1069_p1);

assign mul_ln44_fu_1026_p0 = p_cast60_reg_2372;

assign mul_ln44_fu_1026_p1 = mul_ln44_fu_1026_p10;

assign mul_ln44_fu_1026_p10 = ap_phi_mux_i_op_assign_phi_fu_640_p4;

assign mul_ln44_fu_1026_p2 = (mul_ln44_fu_1026_p0 * mul_ln44_fu_1026_p1);

assign mul_ln45_1_fu_1467_p0 = p_cast60_reg_2372;

assign mul_ln45_1_fu_1467_p1 = mul_ln45_1_fu_1467_p10;

assign mul_ln45_1_fu_1467_p10 = out_col_fu_1435_p2;

assign mul_ln45_1_fu_1467_p2 = (mul_ln45_1_fu_1467_p0 * mul_ln45_1_fu_1467_p1);

assign mul_ln45_fu_1040_p0 = p_cast60_reg_2372;

assign mul_ln45_fu_1040_p1 = mul_ln45_fu_1040_p10;

assign mul_ln45_fu_1040_p10 = ap_phi_mux_i_op_assign_2_phi_fu_676_p4;

assign mul_ln45_fu_1040_p2 = (mul_ln45_fu_1040_p0 * mul_ln45_fu_1040_p1);

assign or_ln1598_1_fu_1336_p2 = (select_ln1598_10_reg_2518 | icmp_ln30_reg_2478);

assign or_ln1598_2_fu_1599_p2 = (select_ln1598_10_reg_2518 | or_ln1598_fu_1583_p2);

assign or_ln1598_3_fu_1441_p2 = (select_ln1598_21_fu_1429_p3 | select_ln1598_10_reg_2518);

assign or_ln1598_4_fu_1446_p2 = (or_ln1598_3_fu_1441_p2 | icmp_ln30_reg_2478);

assign or_ln1598_5_fu_1506_p2 = (select_ln1598_29_fu_1485_p3 | select_ln1598_21_fu_1429_p3);

assign or_ln1598_6_fu_1512_p2 = (or_ln1598_5_fu_1506_p2 | or_ln1598_1_fu_1336_p2);

assign or_ln1598_fu_1583_p2 = (or_ln77_1_reg_2543 | icmp_ln30_reg_2478);

assign or_ln55_1_fu_1302_p2 = (xor_ln55_2_fu_1277_p2 | icmp_ln55_reg_2433);

assign or_ln55_2_fu_1411_p2 = (xor_ln55_3_fu_1380_p2 | icmp_ln55_reg_2433);

assign or_ln55_3_fu_1664_p2 = (xor_ln55_4_fu_1658_p2 | select_ln1598_13_reg_2587);

assign or_ln55_4_fu_1782_p2 = (xor_ln55_5_fu_1776_p2 | select_ln1598_13_reg_2587);

assign or_ln55_fu_1203_p2 = (xor_ln55_fu_1133_p2 | xor_ln55_1_fu_1197_p2);

assign or_ln77_1_fu_1227_p2 = (or_ln77_fu_1221_p2 | icmp_ln77_1_fu_1215_p2);

assign or_ln77_2_fu_1687_p2 = (xor_ln77_1_fu_1675_p2 | select_ln1598_14_reg_2593);

assign or_ln77_3_fu_1692_p2 = (or_ln77_2_fu_1687_p2 | icmp_ln77_4_fu_1681_p2);

assign or_ln77_4_fu_1805_p2 = (xor_ln77_2_fu_1794_p2 | select_ln1598_14_reg_2593);

assign or_ln77_5_fu_1810_p2 = (or_ln77_4_fu_1805_p2 | icmp_ln77_5_fu_1800_p2);

assign or_ln77_fu_1221_p2 = (xor_ln77_fu_1209_p2 | icmp_ln77_fu_1139_p2);

assign outStream_TDATA = outStream_V_data_1_data_out;

assign outStream_TDEST = outStream_V_dest_V_1_data_out;

assign outStream_TID = outStream_V_id_V_1_data_out;

assign outStream_TKEEP = outStream_V_keep_V_1_data_out;

assign outStream_TLAST = outStream_V_last_V_1_data_out;

assign outStream_TSTRB = outStream_V_strb_V_1_data_out;

assign outStream_TUSER = outStream_V_user_V_1_data_out;

assign outStream_TVALID = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_data_1_ack_in = outStream_V_data_1_state[1'd1];

assign outStream_V_data_1_ack_out = outStream_TREADY;

assign outStream_V_data_1_load_A = (outStream_V_data_1_state_cmp_full & ~outStream_V_data_1_sel_wr);

assign outStream_V_data_1_load_B = (outStream_V_data_1_state_cmp_full & outStream_V_data_1_sel_wr);

assign outStream_V_data_1_sel = outStream_V_data_1_sel_rd;

assign outStream_V_data_1_state_cmp_full = ((outStream_V_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_data_1_vld_in = call_ln112_write_output_fu_778_outStream_TVALID;

assign outStream_V_data_1_vld_out = outStream_V_data_1_state[1'd0];

assign outStream_V_dest_V_1_ack_in = outStream_V_dest_V_1_state[1'd1];

assign outStream_V_dest_V_1_ack_out = outStream_TREADY;

assign outStream_V_dest_V_1_load_A = (outStream_V_dest_V_1_state_cmp_full & ~outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_load_B = (outStream_V_dest_V_1_state_cmp_full & outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_sel = outStream_V_dest_V_1_sel_rd;

assign outStream_V_dest_V_1_state_cmp_full = ((outStream_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_dest_V_1_vld_in = call_ln112_write_output_fu_778_outStream_TVALID;

assign outStream_V_dest_V_1_vld_out = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_id_V_1_ack_in = outStream_V_id_V_1_state[1'd1];

assign outStream_V_id_V_1_ack_out = outStream_TREADY;

assign outStream_V_id_V_1_load_A = (outStream_V_id_V_1_state_cmp_full & ~outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_load_B = (outStream_V_id_V_1_state_cmp_full & outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_sel = outStream_V_id_V_1_sel_rd;

assign outStream_V_id_V_1_state_cmp_full = ((outStream_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_id_V_1_vld_in = call_ln112_write_output_fu_778_outStream_TVALID;

assign outStream_V_id_V_1_vld_out = outStream_V_id_V_1_state[1'd0];

assign outStream_V_keep_V_1_ack_in = outStream_V_keep_V_1_state[1'd1];

assign outStream_V_keep_V_1_ack_out = outStream_TREADY;

assign outStream_V_keep_V_1_load_A = (outStream_V_keep_V_1_state_cmp_full & ~outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_load_B = (outStream_V_keep_V_1_state_cmp_full & outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_sel = outStream_V_keep_V_1_sel_rd;

assign outStream_V_keep_V_1_state_cmp_full = ((outStream_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_keep_V_1_vld_in = call_ln112_write_output_fu_778_outStream_TVALID;

assign outStream_V_keep_V_1_vld_out = outStream_V_keep_V_1_state[1'd0];

assign outStream_V_last_V_1_ack_in = outStream_V_last_V_1_state[1'd1];

assign outStream_V_last_V_1_ack_out = outStream_TREADY;

assign outStream_V_last_V_1_load_A = (outStream_V_last_V_1_state_cmp_full & ~outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_load_B = (outStream_V_last_V_1_state_cmp_full & outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_sel = outStream_V_last_V_1_sel_rd;

assign outStream_V_last_V_1_state_cmp_full = ((outStream_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_last_V_1_vld_in = call_ln112_write_output_fu_778_outStream_TVALID;

assign outStream_V_last_V_1_vld_out = outStream_V_last_V_1_state[1'd0];

assign outStream_V_strb_V_1_ack_in = outStream_V_strb_V_1_state[1'd1];

assign outStream_V_strb_V_1_ack_out = outStream_TREADY;

assign outStream_V_strb_V_1_load_A = (outStream_V_strb_V_1_state_cmp_full & ~outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_load_B = (outStream_V_strb_V_1_state_cmp_full & outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_sel = outStream_V_strb_V_1_sel_rd;

assign outStream_V_strb_V_1_state_cmp_full = ((outStream_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_strb_V_1_vld_in = call_ln112_write_output_fu_778_outStream_TVALID;

assign outStream_V_strb_V_1_vld_out = outStream_V_strb_V_1_state[1'd0];

assign outStream_V_user_V_1_ack_in = outStream_V_user_V_1_state[1'd1];

assign outStream_V_user_V_1_ack_out = outStream_TREADY;

assign outStream_V_user_V_1_load_A = (outStream_V_user_V_1_state_cmp_full & ~outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_load_B = (outStream_V_user_V_1_state_cmp_full & outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_sel = outStream_V_user_V_1_sel_rd;

assign outStream_V_user_V_1_state_cmp_full = ((outStream_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_user_V_1_vld_in = call_ln112_write_output_fu_778_outStream_TVALID;

assign outStream_V_user_V_1_vld_out = outStream_V_user_V_1_state[1'd0];

assign out_col_fu_1435_p2 = (9'd1 + select_ln1598_11_fu_1340_p3);

assign out_row_fu_1050_p2 = (9'd1 + ap_phi_mux_i_op_assign_phi_fu_640_p4);

assign p_cast60_fu_935_p1 = stride_V_read_reg_2232;

assign ret_V_1_fu_974_p2 = ($signed(zext_ln1354_3_fu_971_p1) + $signed(5'd31));

assign ret_V_fu_956_p2 = ($signed(zext_ln1354_1_fu_953_p1) + $signed(10'd1023));

assign row_idx_fu_1117_p2 = (zext_ln1598_1_fu_1109_p1 + mul_ln44_reg_2457);

assign row_stride_fu_1330_p2 = (2'd1 + select_ln1598_fu_1249_p3);

assign select_ln156_10_fu_2206_p3 = ((icmp_ln1494_10_fu_2201_p2[0:0] === 1'b1) ? window_3_val_1_V_0_reg_2927 : reg_821);

assign select_ln156_1_fu_2131_p3 = ((icmp_ln1494_1_fu_2126_p2[0:0] === 1'b1) ? window_0_val_1_V_0_reg_2909 : reg_806);

assign select_ln156_3_fu_2067_p3 = ((icmp_ln1494_3_fu_2062_p2[0:0] === 1'b1) ? zext_ln1598_9_reg_2756 : select_ln1598_36_reg_2704_pp0_iter2_reg);

assign select_ln156_4_fu_2156_p3 = ((icmp_ln1494_4_fu_2151_p2[0:0] === 1'b1) ? window_1_val_1_V_0_reg_2915 : reg_811);

assign select_ln156_6_fu_2083_p3 = ((icmp_ln1494_6_fu_2078_p2[0:0] === 1'b1) ? zext_ln1598_9_reg_2756 : select_ln1598_36_reg_2704_pp0_iter2_reg);

assign select_ln156_7_fu_2181_p3 = ((icmp_ln1494_7_fu_2176_p2[0:0] === 1'b1) ? window_2_val_1_V_0_reg_2921 : reg_816);

assign select_ln156_9_fu_2099_p3 = ((icmp_ln1494_9_fu_2094_p2[0:0] === 1'b1) ? zext_ln1598_9_reg_2756 : select_ln1598_36_reg_2704_pp0_iter2_reg);

assign select_ln156_fu_2051_p3 = ((icmp_ln1494_fu_2046_p2[0:0] === 1'b1) ? zext_ln1598_9_reg_2756 : select_ln1598_36_reg_2704_pp0_iter2_reg);

assign select_ln1598_10_fu_1102_p3 = ((icmp_ln30_fu_1056_p2[0:0] === 1'b1) ? icmp_ln33_reg_2452 : icmp_ln33_1_fu_1097_p2);

assign select_ln1598_11_fu_1340_p3 = ((or_ln1598_1_fu_1336_p2[0:0] === 1'b1) ? 9'd0 : i_op_assign_2_reg_672);

assign select_ln1598_12_fu_1368_p3 = ((select_ln1598_10_reg_2518[0:0] === 1'b1) ? icmp_ln48_3_fu_1362_p2 : select_ln1598_3_fu_1266_p3);

assign select_ln1598_13_fu_1386_p3 = ((select_ln1598_10_reg_2518[0:0] === 1'b1) ? xor_ln55_3_fu_1380_p2 : select_ln1598_4_fu_1283_p3);

assign select_ln1598_14_fu_1398_p3 = ((select_ln1598_10_reg_2518[0:0] === 1'b1) ? icmp_ln77_3_fu_1393_p2 : select_ln1598_5_fu_1290_p3);

assign select_ln1598_15_fu_1587_p3 = ((or_ln1598_1_reg_2573[0:0] === 1'b1) ? 11'd0 : mul_ln45_reg_2463);

assign select_ln1598_16_fu_1405_p3 = ((select_ln1598_10_reg_2518[0:0] === 1'b1) ? icmp_ln101_2_reg_2427 : select_ln1598_6_fu_1296_p3);

assign select_ln1598_17_fu_1593_p3 = ((or_ln1598_1_reg_2573[0:0] === 1'b1) ? 11'd0 : col_idx_reg_2533);

assign select_ln1598_18_fu_1416_p3 = ((select_ln1598_10_reg_2518[0:0] === 1'b1) ? or_ln55_2_fu_1411_p2 : select_ln1598_7_fu_1307_p3);

assign select_ln1598_19_fu_1604_p3 = ((or_ln1598_1_reg_2573[0:0] === 1'b1) ? 11'd1 : add_ln36_reg_2548);

assign select_ln1598_1_fu_1256_p3 = ((icmp_ln30_reg_2478[0:0] === 1'b1) ? mul_ln44_1_reg_2496 : mul_ln44_reg_2457);

assign select_ln1598_20_fu_1423_p3 = ((select_ln1598_10_reg_2518[0:0] === 1'b1) ? icmp_ln39_reg_2439 : select_ln1598_8_fu_1314_p3);

assign select_ln1598_21_fu_1429_p3 = ((select_ln1598_10_reg_2518[0:0] === 1'b1) ? icmp_ln36_reg_2446 : select_ln1598_9_fu_1319_p3);

assign select_ln1598_22_fu_1451_p3 = ((or_ln1598_4_fu_1446_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_i_op_assign_3_phi_fu_723_p4);

assign select_ln1598_23_fu_1615_p3 = ((select_ln1598_21_reg_2604[0:0] === 1'b1) ? mul_ln45_1_reg_2619 : select_ln1598_15_fu_1587_p3);

assign select_ln1598_24_fu_1477_p3 = ((select_ln1598_21_fu_1429_p3[0:0] === 1'b1) ? icmp_ln101_4_fu_1472_p2 : select_ln1598_16_fu_1405_p3);

assign select_ln1598_25_fu_1648_p3 = ((select_ln1598_21_reg_2604[0:0] === 1'b1) ? mul_ln45_1_reg_2619 : select_ln1598_17_fu_1593_p3);

assign select_ln1598_26_fu_1669_p3 = ((select_ln1598_21_reg_2604[0:0] === 1'b1) ? or_ln55_3_fu_1664_p2 : select_ln1598_18_reg_2599);

assign select_ln1598_27_fu_1698_p3 = ((select_ln1598_21_reg_2604[0:0] === 1'b1) ? or_ln77_3_fu_1692_p2 : or_ln1598_2_fu_1599_p2);

assign select_ln1598_28_fu_1715_p3 = ((select_ln1598_21_reg_2604[0:0] === 1'b1) ? add_ln1598_fu_1709_p2 : select_ln1598_19_fu_1604_p3);

assign select_ln1598_29_fu_1485_p3 = ((select_ln1598_21_fu_1429_p3[0:0] === 1'b1) ? icmp_ln39_reg_2439 : select_ln1598_20_fu_1423_p3);

assign select_ln1598_2_fu_1079_p3 = ((icmp_ln30_fu_1056_p2[0:0] === 1'b1) ? icmp_ln101_3_fu_1074_p2 : icmp_ln101_fu_1031_p2);

assign select_ln1598_30_fu_1518_p3 = ((or_ln1598_6_fu_1512_p2[0:0] === 1'b1) ? 4'd0 : i_op_assign_4_reg_696);

assign select_ln1598_31_fu_1760_p3 = ((select_ln1598_29_reg_2633[0:0] === 1'b1) ? add_ln45_1_fu_1725_p2 : select_ln1598_25_fu_1648_p3);

assign select_ln1598_32_fu_1787_p3 = ((select_ln1598_29_reg_2633[0:0] === 1'b1) ? or_ln55_4_fu_1782_p2 : select_ln1598_26_fu_1669_p3);

assign select_ln1598_33_fu_1816_p3 = ((select_ln1598_29_reg_2633[0:0] === 1'b1) ? or_ln77_5_fu_1810_p2 : select_ln1598_27_fu_1698_p3);

assign select_ln1598_34_fu_1834_p3 = ((or_ln1598_1_reg_2573[0:0] === 1'b1) ? 13'd0 : sext_ln1598_2_fu_1831_p1);

assign select_ln1598_35_fu_1841_p3 = ((select_ln1598_21_reg_2604[0:0] === 1'b1) ? sext_ln1598_1_fu_1827_p1 : select_ln1598_34_fu_1834_p3);

assign select_ln1598_36_fu_1848_p3 = ((select_ln1598_29_reg_2633[0:0] === 1'b1) ? sext_ln1598_fu_1823_p1 : select_ln1598_35_fu_1841_p3);

assign select_ln1598_37_fu_1865_p3 = ((select_ln1598_29_reg_2633[0:0] === 1'b1) ? add_ln1598_1_fu_1859_p2 : select_ln1598_28_fu_1715_p3);

assign select_ln1598_3_fu_1266_p3 = ((icmp_ln30_reg_2478[0:0] === 1'b1) ? icmp_ln48_2_fu_1261_p2 : icmp_ln48_fu_1122_p2);

assign select_ln1598_4_fu_1283_p3 = ((icmp_ln30_reg_2478[0:0] === 1'b1) ? xor_ln55_2_fu_1277_p2 : xor_ln55_fu_1133_p2);

assign select_ln1598_5_fu_1290_p3 = ((icmp_ln30_reg_2478[0:0] === 1'b1) ? icmp_ln77_2_reg_2422 : icmp_ln77_fu_1139_p2);

assign select_ln1598_6_fu_1296_p3 = ((icmp_ln30_reg_2478[0:0] === 1'b1) ? icmp_ln101_2_reg_2427 : icmp_ln101_1_fu_1148_p2);

assign select_ln1598_7_fu_1307_p3 = ((icmp_ln30_reg_2478[0:0] === 1'b1) ? or_ln55_1_fu_1302_p2 : or_ln55_fu_1203_p2);

assign select_ln1598_8_fu_1314_p3 = ((icmp_ln30_reg_2478[0:0] === 1'b1) ? icmp_ln39_reg_2439 : icmp_ln39_1_reg_2508);

assign select_ln1598_9_fu_1319_p3 = ((icmp_ln30_reg_2478[0:0] === 1'b1) ? icmp_ln36_reg_2446 : icmp_ln36_1_reg_2513);

assign select_ln1598_fu_1249_p3 = ((icmp_ln30_reg_2478[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_i_op_assign_1_phi_fu_712_p4);

assign select_ln27_fu_1324_p3 = ((icmp_ln30_reg_2478[0:0] === 1'b1) ? out_row_reg_2473 : i_op_assign_reg_636);

assign select_ln30_1_fu_1576_p3 = ((icmp_ln30_reg_2478[0:0] === 1'b1) ? 17'd1 : add_ln30_1_fu_1570_p2);

assign select_ln30_fu_1610_p3 = ((select_ln1598_10_reg_2518[0:0] === 1'b1) ? row_stride_reg_2568 : select_ln1598_reg_2558);

assign select_ln33_1_fu_1562_p3 = ((or_ln1598_1_fu_1336_p2[0:0] === 1'b1) ? 15'd1 : add_ln33_1_fu_1556_p2);

assign select_ln33_fu_1492_p3 = ((select_ln1598_21_fu_1429_p3[0:0] === 1'b1) ? out_col_fu_1435_p2 : select_ln1598_11_fu_1340_p3);

assign select_ln36_1_fu_1548_p3 = ((or_ln1598_4_fu_1446_p2[0:0] === 1'b1) ? 6'd1 : add_ln36_1_fu_1542_p2);

assign select_ln36_fu_1872_p3 = ((select_ln1598_29_reg_2633[0:0] === 1'b1) ? col_stride_reg_2648 : select_ln1598_22_reg_2614);

assign select_ln48_1_fu_1640_p3 = ((and_ln48_1_fu_1629_p2[0:0] === 1'b1) ? add_ln49_1_fu_1634_p2 : 12'd0);

assign select_ln48_2_fu_1752_p3 = ((and_ln48_2_fu_1741_p2[0:0] === 1'b1) ? add_ln49_2_fu_1746_p2 : 12'd0);

assign sext_ln140_1_fu_2019_p1 = $signed(add_ln140_1_fu_2014_p2);

assign sext_ln140_2_fu_2110_p1 = $signed(add_ln140_2_reg_2889);

assign sext_ln140_3_fu_2114_p1 = $signed(add_ln140_3_reg_2894);

assign sext_ln140_4_fu_2118_p1 = $signed(add_ln140_4_reg_2899);

assign sext_ln140_5_fu_2122_p1 = $signed(add_ln140_5_reg_2904);

assign sext_ln140_fu_2002_p1 = $signed(add_ln140_fu_1998_p2);

assign sext_ln1598_1_fu_1827_p1 = select_ln48_1_fu_1640_p3;

assign sext_ln1598_2_fu_1831_p1 = conv_count_1_reg_2538;

assign sext_ln1598_fu_1823_p1 = select_ln48_2_fu_1752_p3;

assign sext_ln203_fu_1882_p1 = $signed(add_ln203_fu_1877_p2);

assign trunc_ln140_1_fu_1705_p1 = select_ln48_1_fu_1640_p3[10:0];

assign trunc_ln140_2_fu_1855_p1 = select_ln48_2_fu_1752_p3[10:0];

assign trunc_ln140_fu_1233_p1 = conv_count_1_fu_1184_p3[10:0];

assign xor_ln55_1_fu_1197_p2 = (icmp_ln55_2_fu_1192_p2 ^ 1'd1);

assign xor_ln55_2_fu_1277_p2 = (icmp_ln55_3_fu_1273_p2 ^ 1'd1);

assign xor_ln55_3_fu_1380_p2 = (icmp_ln55_4_fu_1375_p2 ^ 1'd1);

assign xor_ln55_4_fu_1658_p2 = (icmp_ln55_5_fu_1654_p2 ^ 1'd1);

assign xor_ln55_5_fu_1776_p2 = (icmp_ln55_6_fu_1771_p2 ^ 1'd1);

assign xor_ln55_fu_1133_p2 = (icmp_ln55_1_fu_1128_p2 ^ 1'd1);

assign xor_ln77_1_fu_1675_p2 = (1'd1 ^ and_ln48_1_fu_1629_p2);

assign xor_ln77_2_fu_1794_p2 = (1'd1 ^ and_ln48_2_fu_1741_p2);

assign xor_ln77_fu_1209_p2 = (1'd1 ^ and_ln48_fu_1172_p2);

assign zext_ln1354_1_fu_953_p1 = output_h_V_read_reg_2265;

assign zext_ln1354_2_fu_962_p1 = output_w_V_read_reg_2259;

assign zext_ln1354_3_fu_971_p1 = input_fold_ch_V_read_reg_2240;

assign zext_ln1354_4_fu_941_p1 = input_w_V_read_reg_2248;

assign zext_ln1354_fu_944_p1 = stride_V_read_reg_2232;

assign zext_ln1598_1_fu_1109_p1 = ap_phi_mux_i_op_assign_1_phi_fu_712_p4;

assign zext_ln1598_3_fu_1153_p1 = ap_phi_mux_i_op_assign_3_phi_fu_723_p4;

assign zext_ln1598_5_fu_1348_p1 = row_stride_fu_1330_p2;

assign zext_ln1598_7_fu_1722_p1 = col_stride_reg_2648;

assign zext_ln1598_8_fu_1767_p1 = select_ln1598_31_fu_1760_p3;

assign zext_ln1598_9_fu_1995_p1 = select_ln1598_37_reg_2713;

assign zext_ln215_fu_938_p1 = input_h_V_read_reg_2254;

assign zext_ln44_1_fu_1113_p1 = ap_phi_mux_i_op_assign_1_phi_fu_712_p4;

assign zext_ln44_2_fu_1065_p1 = out_row_fu_1050_p2;

assign zext_ln44_3_fu_1352_p1 = row_stride_fu_1330_p2;

assign zext_ln44_fu_1022_p1 = ap_phi_mux_i_op_assign_phi_fu_640_p4;

assign zext_ln45_1_fu_1162_p1 = col_idx_fu_1157_p2;

assign zext_ln45_2_fu_1463_p1 = out_col_fu_1435_p2;

assign zext_ln45_3_fu_1621_p1 = mul_ln45_1_reg_2619;

assign zext_ln45_4_fu_1731_p1 = add_ln45_1_fu_1725_p2;

assign zext_ln45_fu_1144_p1 = i_op_assign_2_reg_672;

assign zext_ln879_fu_1890_p1 = select_ln1598_30_reg_2655;

always @ (posedge ap_clk) begin
    p_cast60_reg_2372[10:2] <= 9'b000000000;
    zext_ln215_reg_2380[10:9] <= 2'b00;
    zext_ln1354_4_reg_2387[10:9] <= 2'b00;
    mul_ln203_reg_2660[0] <= 1'b0;
    mul_ln203_reg_2660_pp0_iter1_reg[0] <= 1'b0;
    mul_ln203_reg_2660_pp0_iter2_reg[0] <= 1'b0;
    zext_ln1598_9_reg_2756[12:11] <= 2'b00;
end

endmodule //yolo_max_pool_top
