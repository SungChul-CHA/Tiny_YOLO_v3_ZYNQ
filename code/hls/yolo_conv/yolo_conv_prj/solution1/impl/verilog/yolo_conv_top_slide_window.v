// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yolo_conv_top_slide_window (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        conv_count,
        line_buff_0_address0,
        line_buff_0_ce0,
        line_buff_0_q0,
        line_buff_0_offset,
        line_buff_1_address0,
        line_buff_1_ce0,
        line_buff_1_q0,
        line_buff_1_offset,
        line_buff_2_address0,
        line_buff_2_ce0,
        line_buff_2_q0,
        line_buff_2_offset,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [8:0] conv_count;
output  [11:0] line_buff_0_address0;
output   line_buff_0_ce0;
input  [15:0] line_buff_0_q0;
input  [2:0] line_buff_0_offset;
output  [11:0] line_buff_1_address0;
output   line_buff_1_ce0;
input  [15:0] line_buff_1_q0;
input  [2:0] line_buff_1_offset;
output  [11:0] line_buff_2_address0;
output   line_buff_2_ce0;
input  [15:0] line_buff_2_q0;
input  [2:0] line_buff_2_offset;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [15:0] ap_return_2;
output  [15:0] ap_return_3;
output  [15:0] ap_return_4;
output  [15:0] ap_return_5;
output  [15:0] ap_return_6;
output  [15:0] ap_return_7;
output  [15:0] ap_return_8;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] line_buff_0_address0;
reg line_buff_0_ce0;
reg[11:0] line_buff_1_address0;
reg line_buff_1_ce0;
reg[11:0] line_buff_2_address0;
reg line_buff_2_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_subdone;
wire   [11:0] mul_ln984_fu_151_p2;
reg   [11:0] mul_ln984_reg_334;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [11:0] mul_ln984_1_fu_161_p2;
reg   [11:0] mul_ln984_1_reg_341;
wire   [11:0] mul_ln984_2_fu_171_p2;
reg   [11:0] mul_ln984_2_reg_348;
reg   [8:0] conv_count_read_reg_355;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [8:0] add_ln262_fu_211_p2;
reg   [8:0] add_ln262_reg_375;
reg   [15:0] kernel_window_val_V_reg_380;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [11:0] add_ln984_6_fu_259_p2;
reg   [11:0] add_ln984_6_reg_400;
wire   [11:0] add_ln984_7_fu_264_p2;
reg   [11:0] add_ln984_7_reg_405;
wire   [11:0] add_ln984_8_fu_269_p2;
reg   [11:0] add_ln984_8_reg_410;
reg   [15:0] kernel_window_val_V_3_reg_415;
reg   [15:0] kernel_window_val_V_6_reg_420;
reg   [15:0] kernel_window_val_V_1_reg_425;
wire    ap_block_pp0_stage3_11001;
reg   [15:0] kernel_window_val_V_4_reg_445;
reg   [15:0] kernel_window_val_V_7_reg_450;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
reg   [8:0] ap_port_reg_conv_count;
wire   [63:0] zext_ln984_4_fu_186_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln984_5_fu_196_p1;
wire   [63:0] zext_ln984_6_fu_206_p1;
wire   [63:0] zext_ln984_8_fu_225_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln984_9_fu_235_p1;
wire   [63:0] zext_ln984_10_fu_245_p1;
wire   [63:0] zext_ln984_12_fu_274_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln984_13_fu_278_p1;
wire   [63:0] zext_ln984_14_fu_282_p1;
wire    ap_block_pp0_stage0;
wire   [2:0] mul_ln984_fu_151_p0;
wire   [9:0] mul_ln984_fu_151_p1;
wire   [2:0] mul_ln984_1_fu_161_p0;
wire   [9:0] mul_ln984_1_fu_161_p1;
wire   [2:0] mul_ln984_2_fu_171_p0;
wire   [9:0] mul_ln984_2_fu_171_p1;
wire   [11:0] zext_ln984_3_fu_177_p1;
wire   [11:0] add_ln984_fu_181_p2;
wire   [11:0] add_ln984_1_fu_191_p2;
wire   [11:0] add_ln984_2_fu_201_p2;
wire   [11:0] zext_ln984_7_fu_217_p1;
wire   [11:0] add_ln984_3_fu_220_p2;
wire   [11:0] add_ln984_4_fu_230_p2;
wire   [11:0] add_ln984_5_fu_240_p2;
wire   [8:0] add_ln262_1_fu_250_p2;
wire   [11:0] zext_ln984_11_fu_255_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire   [11:0] mul_ln984_1_fu_161_p00;
wire   [11:0] mul_ln984_2_fu_171_p00;
wire   [11:0] mul_ln984_fu_151_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

yolo_conv_top_mul_3ns_10ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 12 ))
mul_3ns_10ns_12_1_1_U78(
    .din0(mul_ln984_fu_151_p0),
    .din1(mul_ln984_fu_151_p1),
    .dout(mul_ln984_fu_151_p2)
);

yolo_conv_top_mul_3ns_10ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 12 ))
mul_3ns_10ns_12_1_1_U79(
    .din0(mul_ln984_1_fu_161_p0),
    .din1(mul_ln984_1_fu_161_p1),
    .dout(mul_ln984_1_fu_161_p2)
);

yolo_conv_top_mul_3ns_10ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 12 ))
mul_3ns_10ns_12_1_1_U80(
    .din0(mul_ln984_2_fu_171_p0),
    .din1(mul_ln984_2_fu_171_p1),
    .dout(mul_ln984_2_fu_171_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce))) begin
        add_ln262_reg_375 <= add_ln262_fu_211_p2;
        conv_count_read_reg_355 <= ap_port_reg_conv_count;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln984_6_reg_400 <= add_ln984_6_fu_259_p2;
        add_ln984_7_reg_405 <= add_ln984_7_fu_264_p2;
        add_ln984_8_reg_410 <= add_ln984_8_fu_269_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_port_reg_conv_count <= conv_count;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        kernel_window_val_V_1_reg_425 <= line_buff_0_q0;
        kernel_window_val_V_4_reg_445 <= line_buff_1_q0;
        kernel_window_val_V_7_reg_450 <= line_buff_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        kernel_window_val_V_3_reg_415 <= line_buff_1_q0;
        kernel_window_val_V_6_reg_420 <= line_buff_2_q0;
        kernel_window_val_V_reg_380 <= line_buff_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_ln984_1_reg_341 <= mul_ln984_1_fu_161_p2;
        mul_ln984_2_reg_348 <= mul_ln984_2_fu_171_p2;
        mul_ln984_reg_334 <= mul_ln984_fu_151_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            line_buff_0_address0 = zext_ln984_12_fu_274_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            line_buff_0_address0 = zext_ln984_8_fu_225_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            line_buff_0_address0 = zext_ln984_4_fu_186_p1;
        end else begin
            line_buff_0_address0 = 'bx;
        end
    end else begin
        line_buff_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce)))) begin
        line_buff_0_ce0 = 1'b1;
    end else begin
        line_buff_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            line_buff_1_address0 = zext_ln984_13_fu_278_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            line_buff_1_address0 = zext_ln984_9_fu_235_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            line_buff_1_address0 = zext_ln984_5_fu_196_p1;
        end else begin
            line_buff_1_address0 = 'bx;
        end
    end else begin
        line_buff_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce)))) begin
        line_buff_1_ce0 = 1'b1;
    end else begin
        line_buff_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            line_buff_2_address0 = zext_ln984_14_fu_282_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            line_buff_2_address0 = zext_ln984_10_fu_245_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            line_buff_2_address0 = zext_ln984_6_fu_206_p1;
        end else begin
            line_buff_2_address0 = 'bx;
        end
    end else begin
        line_buff_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce)))) begin
        line_buff_2_ce0 = 1'b1;
    end else begin
        line_buff_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln262_1_fu_250_p2 = (conv_count_read_reg_355 + 9'd2);

assign add_ln262_fu_211_p2 = (ap_port_reg_conv_count + 9'd1);

assign add_ln984_1_fu_191_p2 = (mul_ln984_1_reg_341 + zext_ln984_3_fu_177_p1);

assign add_ln984_2_fu_201_p2 = (mul_ln984_reg_334 + zext_ln984_3_fu_177_p1);

assign add_ln984_3_fu_220_p2 = (mul_ln984_2_reg_348 + zext_ln984_7_fu_217_p1);

assign add_ln984_4_fu_230_p2 = (mul_ln984_1_reg_341 + zext_ln984_7_fu_217_p1);

assign add_ln984_5_fu_240_p2 = (mul_ln984_reg_334 + zext_ln984_7_fu_217_p1);

assign add_ln984_6_fu_259_p2 = (mul_ln984_2_reg_348 + zext_ln984_11_fu_255_p1);

assign add_ln984_7_fu_264_p2 = (mul_ln984_1_reg_341 + zext_ln984_11_fu_255_p1);

assign add_ln984_8_fu_269_p2 = (mul_ln984_reg_334 + zext_ln984_11_fu_255_p1);

assign add_ln984_fu_181_p2 = (mul_ln984_2_reg_348 + zext_ln984_3_fu_177_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_subdone = (1'b0 == ap_ce);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = kernel_window_val_V_reg_380;

assign ap_return_1 = kernel_window_val_V_1_reg_425;

assign ap_return_2 = line_buff_0_q0;

assign ap_return_3 = kernel_window_val_V_3_reg_415;

assign ap_return_4 = kernel_window_val_V_4_reg_445;

assign ap_return_5 = line_buff_1_q0;

assign ap_return_6 = kernel_window_val_V_6_reg_420;

assign ap_return_7 = kernel_window_val_V_7_reg_450;

assign ap_return_8 = line_buff_2_q0;

assign mul_ln984_1_fu_161_p0 = mul_ln984_1_fu_161_p00;

assign mul_ln984_1_fu_161_p00 = line_buff_1_offset;

assign mul_ln984_1_fu_161_p1 = 12'd418;

assign mul_ln984_2_fu_171_p0 = mul_ln984_2_fu_171_p00;

assign mul_ln984_2_fu_171_p00 = line_buff_0_offset;

assign mul_ln984_2_fu_171_p1 = 12'd418;

assign mul_ln984_fu_151_p0 = mul_ln984_fu_151_p00;

assign mul_ln984_fu_151_p00 = line_buff_2_offset;

assign mul_ln984_fu_151_p1 = 12'd418;

assign zext_ln984_10_fu_245_p1 = add_ln984_5_fu_240_p2;

assign zext_ln984_11_fu_255_p1 = add_ln262_1_fu_250_p2;

assign zext_ln984_12_fu_274_p1 = add_ln984_6_reg_400;

assign zext_ln984_13_fu_278_p1 = add_ln984_7_reg_405;

assign zext_ln984_14_fu_282_p1 = add_ln984_8_reg_410;

assign zext_ln984_3_fu_177_p1 = ap_port_reg_conv_count;

assign zext_ln984_4_fu_186_p1 = add_ln984_fu_181_p2;

assign zext_ln984_5_fu_196_p1 = add_ln984_1_fu_191_p2;

assign zext_ln984_6_fu_206_p1 = add_ln984_2_fu_201_p2;

assign zext_ln984_7_fu_217_p1 = add_ln262_reg_375;

assign zext_ln984_8_fu_225_p1 = add_ln984_3_fu_220_p2;

assign zext_ln984_9_fu_235_p1 = add_ln984_4_fu_230_p2;

endmodule //yolo_conv_top_slide_window
